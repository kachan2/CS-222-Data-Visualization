{"ast":null,"code":"/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n      if (isObject(ele)) {\n        var curClass = getValue('attributes.className', ele);\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    var flag = isObject(ele);\n    var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n    if (canRemove) {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n        if (flag) {\n          var classes_1 = getValue('attributes.className', ele);\n          var classArr = classes_1.split(' ');\n          var index = classArr.indexOf(className);\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n  var classList = [];\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n  toElement.insertBefore(docFrag, toElement.firstElementChild);\n  if (isEval) {\n    executeScript(toElement);\n  }\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n  toElement.appendChild(docFrag);\n  if (isEval) {\n    executeScript(toElement);\n  }\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function detach(element) {\n  var parentNode = element.parentNode;\n  if (parentNode) {\n    return parentNode.removeChild(element);\n  }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n  var parentNode = element.parentNode;\n  EventHandler.clearEvents(element);\n  parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\n// eslint-disable-next-line\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    if (isObject(ele)) {\n      var iKey = key;\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n      ele.attributes[iKey] = attributes[key];\n    } else {\n      ele.setAttribute(key, attributes[key]);\n    }\n  }\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  selector = querySelectId(selector);\n  return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\n// eslint-disable-next-line\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  selector = querySelectId(selector);\n  var nodeList = context.querySelectorAll(selector);\n  return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n  var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    var idList = selector.split(',');\n    for (var i = 0; i < idList.length; i++) {\n      var list = idList[i].split(' ');\n      for (var j = 0; j < list.length; j++) {\n        if (list[j].indexOf('#') > -1) {\n          if (!list[j].match(/\\[.*\\]/)) {\n            var splitId = list[j].split('#');\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              var setId = list[j].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[j] = setId.join('.');\n            }\n          }\n        }\n      }\n      idList[i] = list.join(' ');\n    }\n    return idList.join(',');\n  }\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n  var el = element;\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n    el = el.parentNode;\n  }\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[property] = value;\n    }\n    attrVal = value;\n  }\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    Object.keys(attrs).forEach(function (key) {\n      // eslint-disable-next-line\n      element.style[key] = attrs[key];\n    });\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n  // eslint-disable-next-line\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n  ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    // eslint-disable-next-line\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"names":["EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","_i","_a","length","ele","_b","classList_1","curClass","RegExp","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","split","index","indexOf","splice","join","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","iKey","select","selector","context","needsVDOM","querySelectId","querySelector","selectAll","nodeList","charRegex","match","idList","i","list","j","splitId","setId","replace","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","isObj","getAttribute","toString","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","containsClass","cloneNode","deep"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-base/src/dom.js"],"sourcesContent":["/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n            var className = classList_1[_b];\n            if (isObject(ele)) {\n                var curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        var flag = isObject(ele);\n        var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                var className = classList_2[_b];\n                if (flag) {\n                    var classes_1 = getValue('attributes.className', ele);\n                    var classArr = classes_1.split(' ');\n                    var index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.appendChild(docFrag);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function detach(element) {\n    var parentNode = element.parentNode;\n    if (parentNode) {\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\n// eslint-disable-next-line\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (isObject(ele)) {\n            var iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[iKey] = attributes[key];\n        }\n        else {\n            ele.setAttribute(key, attributes[key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\n// eslint-disable-next-line\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n    var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n    if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n        var idList = selector.split(',');\n        for (var i = 0; i < idList.length; i++) {\n            var list = idList[i].split(' ');\n            for (var j = 0; j < list.length; j++) {\n                if (list[j].indexOf('#') > -1) {\n                    if (!list[j].match(/\\[.*\\]/)) {\n                        var splitId = list[j].split('#');\n                        if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n                            var setId = list[j].split('.');\n                            setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n                            list[j] = setId.join('.');\n                        }\n                    }\n                }\n            }\n            idList[i] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        Object.keys(attrs).forEach(function (key) {\n            // eslint-disable-next-line\n            element.style[key] = attrs[key];\n        });\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n    // eslint-disable-next-line\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n    ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        // eslint-disable-next-line\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}