{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar _jsxFileName = \"/Users/krise/github/react-slider/src/components/ReactSlider/ReactSlider.jsx\";\n/**\n * To prevent text selection while dragging.\n * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n */\n\nfunction pauseEvent(e) {\n  if (e && e.stopPropagation) {\n    e.stopPropagation();\n  }\n  if (e && e.preventDefault) {\n    e.preventDefault();\n  }\n  return false;\n}\nfunction stopPropagation(e) {\n  if (e.stopPropagation) {\n    e.stopPropagation();\n  }\n}\nfunction sanitizeInValue(x) {\n  if (x == null) {\n    return [];\n  }\n  return Array.isArray(x) ? x.slice() : [x];\n}\nfunction prepareOutValue(x) {\n  return x !== null && x.length === 1 ? x[0] : x.slice();\n}\nfunction trimSucceeding(length, nextValue, minDistance, max) {\n  for (let i = 0; i < length; i += 1) {\n    const padding = max - i * minDistance;\n    if (nextValue[length - 1 - i] > padding) {\n      // eslint-disable-next-line no-param-reassign\n      nextValue[length - 1 - i] = padding;\n    }\n  }\n}\nfunction trimPreceding(length, nextValue, minDistance, min) {\n  for (let i = 0; i < length; i += 1) {\n    const padding = min + i * minDistance;\n    if (nextValue[i] < padding) {\n      // eslint-disable-next-line no-param-reassign\n      nextValue[i] = padding;\n    }\n  }\n}\nfunction addHandlers(eventMap) {\n  Object.keys(eventMap).forEach(key => {\n    if (typeof document !== 'undefined') {\n      document.addEventListener(key, eventMap[key], false);\n    }\n  });\n}\nfunction removeHandlers(eventMap) {\n  Object.keys(eventMap).forEach(key => {\n    if (typeof document !== 'undefined') {\n      document.removeEventListener(key, eventMap[key], false);\n    }\n  });\n}\nfunction trimAlignValue(val, props) {\n  return alignValue(trimValue(val, props), props);\n}\nfunction alignValue(val, props) {\n  const valModStep = (val - props.min) % props.step;\n  let alignedValue = val - valModStep;\n  if (Math.abs(valModStep) * 2 >= props.step) {\n    alignedValue += valModStep > 0 ? props.step : -props.step;\n  }\n  return parseFloat(alignedValue.toFixed(5));\n}\nfunction trimValue(val, props) {\n  let trimmed = val;\n  if (trimmed <= props.min) {\n    trimmed = props.min;\n  }\n  if (trimmed >= props.max) {\n    trimmed = props.max;\n  }\n  return trimmed;\n}\nlet ReactSlider = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ReactSlider, _React$Component);\n  function ReactSlider(_props) {\n    var _this;\n    _this = _React$Component.call(this, _props) || this;\n    _this.onKeyUp = () => {\n      _this.onEnd();\n    };\n    _this.onMouseUp = () => {\n      _this.onEnd(_this.getMouseEventMap());\n    };\n    _this.onTouchEnd = () => {\n      _this.onEnd(_this.getTouchEventMap());\n    };\n    _this.onBlur = () => {\n      _this.setState({\n        index: -1\n      }, _this.onEnd(_this.getKeyDownEventMap()));\n    };\n    _this.onMouseMove = e => {\n      // Prevent controlled updates from happening while mouse is moving\n      _this.setState({\n        pending: true\n      });\n      const position = _this.getMousePosition(e);\n      const diffPosition = _this.getDiffPosition(position[0]);\n      const newValue = _this.getValueFromPosition(diffPosition);\n      _this.move(newValue);\n    };\n    _this.onTouchMove = e => {\n      if (e.touches.length > 1) {\n        return;\n      } // Prevent controlled updates from happending while touch is moving\n\n      _this.setState({\n        pending: true\n      });\n      const position = _this.getTouchPosition(e);\n      if (typeof _this.isScrolling === 'undefined') {\n        const diffMainDir = position[0] - _this.startPosition[0];\n        const diffScrollDir = position[1] - _this.startPosition[1];\n        _this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n      }\n      if (_this.isScrolling) {\n        _this.setState({\n          index: -1\n        });\n        return;\n      }\n      const diffPosition = _this.getDiffPosition(position[0]);\n      const newValue = _this.getValueFromPosition(diffPosition);\n      _this.move(newValue);\n    };\n    _this.onKeyDown = e => {\n      if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {\n        return;\n      } // Prevent controlled updates from happening while a key is pressed\n\n      _this.setState({\n        pending: true\n      });\n      switch (e.key) {\n        case 'ArrowLeft':\n        case 'ArrowDown':\n        case 'Left':\n        case 'Down':\n          e.preventDefault();\n          _this.moveDownByStep();\n          break;\n        case 'ArrowRight':\n        case 'ArrowUp':\n        case 'Right':\n        case 'Up':\n          e.preventDefault();\n          _this.moveUpByStep();\n          break;\n        case 'Home':\n          e.preventDefault();\n          _this.move(_this.props.min);\n          break;\n        case 'End':\n          e.preventDefault();\n          _this.move(_this.props.max);\n          break;\n        case 'PageDown':\n          e.preventDefault();\n          _this.moveDownByStep(_this.props.pageFn(_this.props.step));\n          break;\n        case 'PageUp':\n          e.preventDefault();\n          _this.moveUpByStep(_this.props.pageFn(_this.props.step));\n          break;\n      }\n    };\n    _this.onSliderMouseDown = e => {\n      // do nothing if disabled or right click\n      if (_this.props.disabled || e.button === 2) {\n        return;\n      } // Prevent controlled updates from happening while mouse is moving\n\n      _this.setState({\n        pending: true\n      });\n      if (!_this.props.snapDragDisabled) {\n        const position = _this.getMousePosition(e);\n        _this.forceValueFromPosition(position[0], i => {\n          _this.start(i, position[0]);\n          addHandlers(_this.getMouseEventMap());\n        });\n      }\n      pauseEvent(e);\n    };\n    _this.onSliderClick = e => {\n      if (_this.props.disabled) {\n        return;\n      }\n      if (_this.props.onSliderClick && !_this.hasMoved) {\n        const position = _this.getMousePosition(e);\n        const valueAtPos = trimAlignValue(_this.calcValue(_this.calcOffsetFromPosition(position[0])), _this.props);\n        _this.props.onSliderClick(valueAtPos);\n      }\n    };\n    _this.createOnKeyDown = i => e => {\n      if (_this.props.disabled) {\n        return;\n      }\n      _this.start(i);\n      addHandlers(_this.getKeyDownEventMap());\n      pauseEvent(e);\n    };\n    _this.createOnMouseDown = i => e => {\n      // do nothing if disabled or right click\n      if (_this.props.disabled || e.button === 2) {\n        return;\n      } // Prevent controlled updates from happending while mouse is moving\n\n      _this.setState({\n        pending: true\n      });\n      const position = _this.getMousePosition(e);\n      _this.start(i, position[0]);\n      addHandlers(_this.getMouseEventMap());\n      pauseEvent(e);\n    };\n    _this.createOnTouchStart = i => e => {\n      if (_this.props.disabled || e.touches.length > 1) {\n        return;\n      } // Prevent controlled updates from happending while touch is moving\n\n      _this.setState({\n        pending: true\n      });\n      const position = _this.getTouchPosition(e);\n      _this.startPosition = position; // don't know yet if the user is trying to scroll\n\n      _this.isScrolling = undefined;\n      _this.start(i, position[0]);\n      addHandlers(_this.getTouchEventMap());\n      stopPropagation(e);\n    };\n    _this.handleResize = () => {\n      // setTimeout of 0 gives element enough time to have assumed its new size if\n      // it is being resized\n      const resizeTimeout = window.setTimeout(() => {\n        // drop this timeout from pendingResizeTimeouts to reduce memory usage\n        _this.pendingResizeTimeouts.shift();\n        _this.resize();\n      }, 0);\n      _this.pendingResizeTimeouts.push(resizeTimeout);\n    };\n    _this.renderThumb = (style, i) => {\n      const className = _this.props.thumbClassName + \" \" + _this.props.thumbClassName + \"-\" + i + \" \" + (_this.state.index === i ? _this.props.thumbActiveClassName : '');\n      const props = {\n        'ref': r => {\n          _this[\"thumb\" + i] = r;\n        },\n        'key': _this.props.thumbClassName + \"-\" + i,\n        className,\n        style,\n        'onMouseDown': _this.createOnMouseDown(i),\n        'onTouchStart': _this.createOnTouchStart(i),\n        'onFocus': _this.createOnKeyDown(i),\n        'tabIndex': 0,\n        'role': 'slider',\n        'aria-orientation': _this.props.orientation,\n        'aria-valuenow': _this.state.value[i],\n        'aria-valuemin': _this.props.min,\n        'aria-valuemax': _this.props.max,\n        'aria-label': Array.isArray(_this.props.ariaLabel) ? _this.props.ariaLabel[i] : _this.props.ariaLabel,\n        'aria-labelledby': Array.isArray(_this.props.ariaLabelledby) ? _this.props.ariaLabelledby[i] : _this.props.ariaLabelledby\n      };\n      const state = {\n        index: i,\n        value: prepareOutValue(_this.state.value),\n        valueNow: _this.state.value[i]\n      };\n      if (_this.props.ariaValuetext) {\n        props['aria-valuetext'] = typeof _this.props.ariaValuetext === 'string' ? _this.props.ariaValuetext : _this.props.ariaValuetext(state);\n      }\n      return _this.props.renderThumb(props, state);\n    };\n    _this.renderTrack = (i, offsetFrom, offsetTo) => {\n      const props = {\n        key: _this.props.trackClassName + \"-\" + i,\n        className: _this.props.trackClassName + \" \" + _this.props.trackClassName + \"-\" + i,\n        style: _this.buildTrackStyle(offsetFrom, _this.state.upperBound - offsetTo)\n      };\n      const state = {\n        index: i,\n        value: prepareOutValue(_this.state.value)\n      };\n      return _this.props.renderTrack(props, state);\n    };\n    let value = sanitizeInValue(_props.value);\n    if (!value.length) {\n      value = sanitizeInValue(_props.defaultValue);\n    } // array for storing resize timeouts ids\n\n    _this.pendingResizeTimeouts = [];\n    const zIndices = [];\n    for (let i = 0; i < value.length; i += 1) {\n      value[i] = trimAlignValue(value[i], _props);\n      zIndices.push(i);\n    }\n    _this.resizeObserver = null;\n    _this.resizeElementRef = /*#__PURE__*/React.createRef();\n    _this.state = {\n      index: -1,\n      upperBound: 0,\n      sliderLength: 0,\n      value,\n      zIndices\n    };\n    return _this;\n  }\n  var _proto = ReactSlider.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    if (typeof window !== 'undefined') {\n      this.resizeObserver = new ResizeObserver(this.handleResize);\n      this.resizeObserver.observe(this.resizeElementRef.current);\n      this.resize();\n    }\n  } // Keep the internal `value` consistent with an outside `value` if present.\n  // This basically allows the slider to be a controlled component.\n  ;\n\n  ReactSlider.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    const value = sanitizeInValue(props.value);\n    if (!value.length) {\n      return null;\n    } // Do not allow controlled upates to happen while we have pending updates\n\n    if (state.pending) {\n      return null;\n    }\n    return {\n      value: value.map(item => trimAlignValue(item, props))\n    };\n  };\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    // If an upperBound has not yet been determined (due to the component being hidden\n    // during the mount event, or during the last resize), then calculate it now\n    if (this.state.upperBound === 0) {\n      this.resize();\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.clearPendingResizeTimeouts();\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n  };\n  _proto.onEnd = function onEnd(eventMap) {\n    if (eventMap) {\n      removeHandlers(eventMap);\n    }\n    if (this.hasMoved) {\n      this.fireChangeEvent('onAfterChange');\n    } // Allow controlled updates to continue\n\n    this.setState({\n      pending: false\n    });\n    this.hasMoved = false;\n  };\n  _proto.getValue = function getValue() {\n    return prepareOutValue(this.state.value);\n  };\n  _proto.getClosestIndex = function getClosestIndex(pixelOffset) {\n    let minDist = Number.MAX_VALUE;\n    let closestIndex = -1;\n    const {\n      value\n    } = this.state;\n    const l = value.length;\n    for (let i = 0; i < l; i += 1) {\n      const offset = this.calcOffset(value[i]);\n      const dist = Math.abs(pixelOffset - offset);\n      if (dist < minDist) {\n        minDist = dist;\n        closestIndex = i;\n      }\n    }\n    return closestIndex;\n  };\n  _proto.getMousePosition = function getMousePosition(e) {\n    return [e[\"page\" + this.axisKey()], e[\"page\" + this.orthogonalAxisKey()]];\n  };\n  _proto.getTouchPosition = function getTouchPosition(e) {\n    const touch = e.touches[0];\n    return [touch[\"page\" + this.axisKey()], touch[\"page\" + this.orthogonalAxisKey()]];\n  };\n  _proto.getKeyDownEventMap = function getKeyDownEventMap() {\n    return {\n      keydown: this.onKeyDown,\n      keyup: this.onKeyUp,\n      focusout: this.onBlur\n    };\n  };\n  _proto.getMouseEventMap = function getMouseEventMap() {\n    return {\n      mousemove: this.onMouseMove,\n      mouseup: this.onMouseUp\n    };\n  };\n  _proto.getTouchEventMap = function getTouchEventMap() {\n    return {\n      touchmove: this.onTouchMove,\n      touchend: this.onTouchEnd\n    };\n  };\n  _proto.getValueFromPosition = function getValueFromPosition(position) {\n    const diffValue = position / (this.state.sliderLength - this.state.thumbSize) * (this.props.max - this.props.min);\n    return trimAlignValue(this.state.startValue + diffValue, this.props);\n  };\n  _proto.getDiffPosition = function getDiffPosition(position) {\n    let diffPosition = position - this.state.startPosition;\n    if (this.props.invert) {\n      diffPosition *= -1;\n    }\n    return diffPosition;\n  } // create the `keydown` handler for the i-th thumb\n  ;\n\n  _proto.resize = function resize() {\n    const {\n      slider,\n      thumb0: thumb\n    } = this;\n    if (!slider || !thumb) {\n      return;\n    }\n    const sizeKey = this.sizeKey(); // For the slider size, we want to use the client width/height, excluding any borders\n\n    const sliderRect = slider.getBoundingClientRect();\n    const sliderSize = slider[sizeKey];\n    const sliderMax = sliderRect[this.posMaxKey()];\n    const sliderMin = sliderRect[this.posMinKey()]; // For the thumb size, we want to use the outer width/height, including any borders\n\n    const thumbRect = thumb.getBoundingClientRect();\n    const thumbSize = thumbRect[sizeKey.replace('client', '').toLowerCase()];\n    const upperBound = sliderSize - thumbSize;\n    const sliderLength = Math.abs(sliderMax - sliderMin);\n    if (this.state.upperBound !== upperBound || this.state.sliderLength !== sliderLength || this.state.thumbSize !== thumbSize) {\n      this.setState({\n        upperBound,\n        sliderLength,\n        thumbSize\n      });\n    }\n  } // calculates the offset of a thumb in pixels based on its value.\n  ;\n\n  _proto.calcOffset = function calcOffset(value) {\n    const range = this.props.max - this.props.min;\n    if (range === 0) {\n      return 0;\n    }\n    const ratio = (value - this.props.min) / range;\n    return ratio * this.state.upperBound;\n  } // calculates the value corresponding to a given pixel offset, i.e. the inverse of `calcOffset`.\n  ;\n\n  _proto.calcValue = function calcValue(offset) {\n    const ratio = offset / this.state.upperBound;\n    return ratio * (this.props.max - this.props.min) + this.props.min;\n  };\n  _proto.calcOffsetFromPosition = function calcOffsetFromPosition(position) {\n    const {\n      slider\n    } = this;\n    const sliderRect = slider.getBoundingClientRect();\n    const sliderMax = sliderRect[this.posMaxKey()];\n    const sliderMin = sliderRect[this.posMinKey()]; // The `position` value passed in is the mouse position based on the window height.\n    // The slider bounding rect is based on the viewport, so we must add the window scroll\n    // offset to normalize the values.\n\n    const windowOffset = window[\"page\" + this.axisKey() + \"Offset\"];\n    const sliderStart = windowOffset + (this.props.invert ? sliderMax : sliderMin);\n    let pixelOffset = position - sliderStart;\n    if (this.props.invert) {\n      pixelOffset = this.state.sliderLength - pixelOffset;\n    }\n    pixelOffset -= this.state.thumbSize / 2;\n    return pixelOffset;\n  } // Snaps the nearest thumb to the value corresponding to `position`\n  // and calls `callback` with that thumb's index.\n  ;\n\n  _proto.forceValueFromPosition = function forceValueFromPosition(position, callback) {\n    const pixelOffset = this.calcOffsetFromPosition(position);\n    const closestIndex = this.getClosestIndex(pixelOffset);\n    const nextValue = trimAlignValue(this.calcValue(pixelOffset), this.props); // Clone this.state.value since we'll modify it temporarily\n    // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n\n    const value = this.state.value.slice();\n    value[closestIndex] = nextValue; // Prevents the slider from shrinking below `props.minDistance`\n\n    for (let i = 0; i < value.length - 1; i += 1) {\n      if (value[i + 1] - value[i] < this.props.minDistance) {\n        return;\n      }\n    }\n    this.fireChangeEvent('onBeforeChange');\n    this.hasMoved = true;\n    this.setState({\n      value\n    }, () => {\n      callback(closestIndex);\n      this.fireChangeEvent('onChange');\n    });\n  } // clear all pending timeouts to avoid error messages after unmounting\n  ;\n\n  _proto.clearPendingResizeTimeouts = function clearPendingResizeTimeouts() {\n    do {\n      const nextTimeout = this.pendingResizeTimeouts.shift();\n      clearTimeout(nextTimeout);\n    } while (this.pendingResizeTimeouts.length);\n  };\n  _proto.start = function start(i, position) {\n    const thumbRef = this[\"thumb\" + i];\n    if (thumbRef) {\n      thumbRef.focus();\n    }\n    const {\n      zIndices\n    } = this.state; // remove wherever the element is\n\n    zIndices.splice(zIndices.indexOf(i), 1); // add to end\n\n    zIndices.push(i);\n    this.setState(prevState => ({\n      startValue: prevState.value[i],\n      startPosition: position !== undefined ? position : prevState.startPosition,\n      index: i,\n      zIndices\n    }));\n  };\n  _proto.moveUpByStep = function moveUpByStep(step) {\n    if (step === void 0) {\n      step = this.props.step;\n    }\n    const oldValue = this.state.value[this.state.index];\n    const newValue = trimAlignValue(oldValue + step, this.props);\n    this.move(Math.min(newValue, this.props.max));\n  };\n  _proto.moveDownByStep = function moveDownByStep(step) {\n    if (step === void 0) {\n      step = this.props.step;\n    }\n    const oldValue = this.state.value[this.state.index];\n    const newValue = trimAlignValue(oldValue - step, this.props);\n    this.move(Math.max(newValue, this.props.min));\n  };\n  _proto.move = function move(newValue) {\n    const {\n      index,\n      value\n    } = this.state;\n    const {\n      length\n    } = value; // Short circuit if the value is not changing\n\n    const oldValue = value[index];\n    if (newValue === oldValue) {\n      return;\n    } // Trigger only before the first movement\n\n    if (!this.hasMoved) {\n      this.fireChangeEvent('onBeforeChange');\n    }\n    this.hasMoved = true; // if \"pearling\" (= thumbs pushing each other) is disabled,\n    // prevent the thumb from getting closer than `minDistance` to the previous or next thumb.\n\n    const {\n      pearling,\n      max,\n      min,\n      minDistance\n    } = this.props;\n    if (!pearling) {\n      if (index > 0) {\n        const valueBefore = value[index - 1];\n        if (newValue < valueBefore + minDistance) {\n          // eslint-disable-next-line no-param-reassign\n          newValue = valueBefore + minDistance;\n        }\n      }\n      if (index < length - 1) {\n        const valueAfter = value[index + 1];\n        if (newValue > valueAfter - minDistance) {\n          // eslint-disable-next-line no-param-reassign\n          newValue = valueAfter - minDistance;\n        }\n      }\n    }\n    value[index] = newValue; // if \"pearling\" is enabled, let the current thumb push the pre- and succeeding thumbs.\n\n    if (pearling && length > 1) {\n      if (newValue > oldValue) {\n        this.pushSucceeding(value, minDistance, index);\n        trimSucceeding(length, value, minDistance, max);\n      } else if (newValue < oldValue) {\n        this.pushPreceding(value, minDistance, index);\n        trimPreceding(length, value, minDistance, min);\n      }\n    } // Normally you would use `shouldComponentUpdate`,\n    // but since the slider is a low-level component,\n    // the extra complexity might be worth the extra performance.\n\n    this.setState({\n      value\n    }, this.fireChangeEvent.bind(this, 'onChange'));\n  };\n  _proto.pushSucceeding = function pushSucceeding(value, minDistance, index) {\n    let i;\n    let padding;\n    for (i = index, padding = value[i] + minDistance; value[i + 1] !== null && padding > value[i + 1]; i += 1, padding = value[i] + minDistance) {\n      // eslint-disable-next-line no-param-reassign\n      value[i + 1] = alignValue(padding, this.props);\n    }\n  };\n  _proto.pushPreceding = function pushPreceding(value, minDistance, index) {\n    for (let i = index, padding = value[i] - minDistance; value[i - 1] !== null && padding < value[i - 1]; i -= 1, padding = value[i] - minDistance) {\n      // eslint-disable-next-line no-param-reassign\n      value[i - 1] = alignValue(padding, this.props);\n    }\n  };\n  _proto.axisKey = function axisKey() {\n    if (this.props.orientation === 'vertical') {\n      return 'Y';\n    } // Defaults to 'horizontal';\n\n    return 'X';\n  };\n  _proto.orthogonalAxisKey = function orthogonalAxisKey() {\n    if (this.props.orientation === 'vertical') {\n      return 'X';\n    } // Defaults to 'horizontal'\n\n    return 'Y';\n  };\n  _proto.posMinKey = function posMinKey() {\n    if (this.props.orientation === 'vertical') {\n      return this.props.invert ? 'bottom' : 'top';\n    } // Defaults to 'horizontal'\n\n    return this.props.invert ? 'right' : 'left';\n  };\n  _proto.posMaxKey = function posMaxKey() {\n    if (this.props.orientation === 'vertical') {\n      return this.props.invert ? 'top' : 'bottom';\n    } // Defaults to 'horizontal'\n\n    return this.props.invert ? 'left' : 'right';\n  };\n  _proto.sizeKey = function sizeKey() {\n    if (this.props.orientation === 'vertical') {\n      return 'clientHeight';\n    } // Defaults to 'horizontal'\n\n    return 'clientWidth';\n  };\n  _proto.fireChangeEvent = function fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](prepareOutValue(this.state.value), this.state.index);\n    }\n  };\n  _proto.buildThumbStyle = function buildThumbStyle(offset, i) {\n    const style = {\n      position: 'absolute',\n      touchAction: 'none',\n      willChange: this.state.index >= 0 ? this.posMinKey() : undefined,\n      zIndex: this.state.zIndices.indexOf(i) + 1\n    };\n    style[this.posMinKey()] = offset + \"px\";\n    return style;\n  };\n  _proto.buildTrackStyle = function buildTrackStyle(min, max) {\n    const obj = {\n      position: 'absolute',\n      willChange: this.state.index >= 0 ? this.posMinKey() + \",\" + this.posMaxKey() : undefined\n    };\n    obj[this.posMinKey()] = min;\n    obj[this.posMaxKey()] = max;\n    return obj;\n  };\n  _proto.buildMarkStyle = function buildMarkStyle(offset) {\n    var _ref;\n    return _ref = {\n      position: 'absolute'\n    }, _ref[this.posMinKey()] = offset, _ref;\n  };\n  _proto.renderThumbs = function renderThumbs(offset) {\n    const {\n      length\n    } = offset;\n    const styles = [];\n    for (let i = 0; i < length; i += 1) {\n      styles[i] = this.buildThumbStyle(offset[i], i);\n    }\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n      res[i] = this.renderThumb(styles[i], i);\n    }\n    return res;\n  };\n  _proto.renderTracks = function renderTracks(offset) {\n    const tracks = [];\n    const lastIndex = offset.length - 1;\n    tracks.push(this.renderTrack(0, 0, offset[0]));\n    for (let i = 0; i < lastIndex; i += 1) {\n      tracks.push(this.renderTrack(i + 1, offset[i], offset[i + 1]));\n    }\n    tracks.push(this.renderTrack(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n    return tracks;\n  };\n  _proto.renderMarks = function renderMarks() {\n    let {\n      marks\n    } = this.props;\n    const range = this.props.max - this.props.min + 1;\n    if (typeof marks === 'boolean') {\n      marks = Array.from({\n        length: range\n      }).map((_, key) => key);\n    } else if (typeof marks === 'number') {\n      marks = Array.from({\n        length: range\n      }).map((_, key) => key).filter(key => key % marks === 0);\n    }\n    return marks.map(parseFloat).sort((a, b) => a - b).map(mark => {\n      const offset = this.calcOffset(mark);\n      const props = {\n        key: mark,\n        className: this.props.markClassName,\n        style: this.buildMarkStyle(offset)\n      };\n      return this.props.renderMark(props);\n    });\n  };\n  _proto.render = function render() {\n    const offset = [];\n    const {\n      value\n    } = this.state;\n    const l = value.length;\n    for (let i = 0; i < l; i += 1) {\n      offset[i] = this.calcOffset(value[i], i);\n    }\n    const tracks = this.props.withTracks ? this.renderTracks(offset) : null;\n    const thumbs = this.renderThumbs(offset);\n    const marks = this.props.marks ? this.renderMarks() : null;\n    return /*#__PURE__*/React.createElement('div', {\n      ref: r => {\n        this.slider = r;\n        this.resizeElementRef.current = r;\n      },\n      style: {\n        position: 'relative'\n      },\n      className: this.props.className + (this.props.disabled ? ' disabled' : ''),\n      onMouseDown: this.onSliderMouseDown,\n      onClick: this.onSliderClick\n    }, tracks, thumbs, marks);\n  };\n  return ReactSlider;\n}(React.Component);\nReactSlider.displayName = 'ReactSlider';\nReactSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 1,\n  pageFn: step => step * 10,\n  minDistance: 0,\n  defaultValue: 0,\n  orientation: 'horizontal',\n  className: 'slider',\n  thumbClassName: 'thumb',\n  thumbActiveClassName: 'active',\n  trackClassName: 'track',\n  markClassName: 'mark',\n  withTracks: true,\n  pearling: false,\n  disabled: false,\n  snapDragDisabled: false,\n  invert: false,\n  marks: [],\n  renderThumb: props => /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    __self: ReactSlider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 31\n    }\n  })),\n  renderTrack: props => /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    __self: ReactSlider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 31\n    }\n  })),\n  renderMark: props => /*#__PURE__*/React.createElement(\"span\", _extends({}, props, {\n    __self: ReactSlider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 30\n    }\n  }))\n};\nReactSlider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * The minimum value of the slider.\n   */\n  min: PropTypes.number,\n  /**\n   * The maximum value of the slider.\n   */\n  max: PropTypes.number,\n  /**\n   * Value to be added or subtracted on each step the slider makes.\n   * Must be greater than zero.\n   * `max - min` should be evenly divisible by the step value.\n   */\n  step: PropTypes.number,\n  /**\n   * The result of the function is the value to be added or subtracted\n   * when the `Page Up` or `Page Down` keys are pressed.\n   *\n   * The current `step` value will be passed as the only argument.\n   * By default, paging will modify `step` by a factor of 10.\n   */\n  pageFn: PropTypes.func,\n  /**\n   * The minimal distance between any pair of thumbs.\n   * Must be positive, but zero means they can sit on top of each other.\n   */\n  minDistance: PropTypes.number,\n  /**\n   * Determines the initial positions of the thumbs and the number of thumbs.\n   *\n   * If a number is passed a slider with one thumb will be rendered.\n   * If an array is passed each value will determine the position of one thumb.\n   * The values in the array must be sorted.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  /**\n   * Like `defaultValue` but for\n   * [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  /**\n   * Determines whether the slider moves horizontally (from left to right)\n   * or vertically (from top to bottom).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The css class set on the slider node.\n   */\n  className: PropTypes.string,\n  /**\n   * The css class set on each thumb node.\n   *\n   * In addition each thumb will receive a numbered css class of the form\n   * `${thumbClassName}-${i}`, e.g. `thumb-0`, `thumb-1`, ...\n   */\n  thumbClassName: PropTypes.string,\n  /**\n   * The css class set on the thumb that is currently being moved.\n   */\n  thumbActiveClassName: PropTypes.string,\n  /**\n   * If `true` tracks between the thumbs will be rendered.\n   */\n  withTracks: PropTypes.bool,\n  /**\n   * The css class set on the tracks between the thumbs.\n   * In addition track fragment will receive a numbered css class of the form\n   * `${trackClassName}-${i}`, e.g. `track-0`, `track-1`, ...\n   */\n  trackClassName: PropTypes.string,\n  /**\n   * If `true` the active thumb will push other thumbs\n   * within the constraints of `min`, `max`, `step` and `minDistance`.\n   */\n  pearling: PropTypes.bool,\n  /**\n   * If `true` the thumbs can't be moved.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables thumb move when clicking the slider track\n   */\n  snapDragDisabled: PropTypes.bool,\n  /**\n   * Inverts the slider.\n   */\n  invert: PropTypes.bool,\n  /**\n   * Shows passed marks on the track, if true it shows all the marks,\n   * if an array of numbers it shows just the passed marks, if a number is passed\n   * it shows just the marks in that steps: like passing 3 shows the marks 3, 6, 9\n   */\n  marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.bool, PropTypes.number]),\n  /**\n   * The css class set on the marks.\n   */\n  markClassName: PropTypes.string,\n  /**\n   * Callback called before starting to move a thumb. The callback will only be called if the\n   * action will result in a change. The function will be called with two arguments, the first\n   * being the initial value(s) the second being thumb index.\n   */\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n  onBeforeChange: PropTypes.func,\n  /**\n   * Callback called on every value change.\n   * The function will be called with two arguments, the first being the new value(s)\n   * the second being thumb index.\n   */\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n  onChange: PropTypes.func,\n  /**\n   * Callback called only after moving a thumb has ended. The callback will only be called if\n   * the action resulted in a change. The function will be called with two arguments, the\n   * first being the result value(s) the second being thumb index.\n   */\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n  onAfterChange: PropTypes.func,\n  /**\n   * Callback called when the the slider is clicked (thumb or tracks).\n   * Receives the value at the clicked position as argument.\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  onSliderClick: PropTypes.func,\n  /**\n   * aria-label for screen-readers to apply to the thumbs.\n   * Use an array for more than one thumb.\n   * The length of the array must match the number of thumbs in the value array.\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  ariaLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  /**\n   * aria-labelledby for screen-readers to apply to the thumbs.\n   * Used when slider rendered with separate label.\n   * Use an array for more than one thumb.\n   * The length of the array must match the number of thumbs in the value array.\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  ariaLabelledby: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  /**\n   * aria-valuetext for screen-readers.\n   * Can be a static string, or a function that returns a string.\n   * The function will be passed a single argument,\n   * an object with the following properties:\n   *\n   *     state => `Value: ${state.value}`\n   *\n   * - `state.index` {`number`} the index of the thumb\n   * - `state.value` {`number` | `array`} the current value state\n   * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  ariaValuetext: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Provide a custom render function for the track node.\n   * The render function will be passed two arguments,\n   * an object with props that should be added to your handle node,\n   * and an object with track and slider state:\n   *\n   *     (props, state) => <div {...props} />\n   *\n   * - `props` {`object`} props to be spread into your track node\n   * - `state.index` {`number`} the index of the track\n   * - `state.value` {`number` | `array`} the current value state\n   */\n  renderTrack: PropTypes.func,\n  /**\n   * Provide a custom render function for dynamic thumb content.\n   * The render function will be passed two arguments,\n   * an object with props that should be added to your thumb node,\n   * and an object with thumb and slider state:\n   *\n   *     (props, state) => <div {...props} />\n   *\n   * - `props` {`object`} props to be spread into your thumb node\n   * - `state.index` {`number`} the index of the thumb\n   * - `state.value` {`number` | `array`} the current value state\n   * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  renderThumb: PropTypes.func,\n  /**\n   * Provide a custom render function for the mark node.\n   * The render function will be passed one argument,\n   * an object with props that should be added to your handle node\n   *\n   *     (props) => <span {...props} />\n   *\n   * - `props` {`object`} props to be spread into your track node\n   */\n  renderMark: PropTypes.func\n} : {};\nvar ReactSlider$1 = ReactSlider;\nexport { ReactSlider$1 as default };","map":{"version":3,"mappings":"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","names":["pauseEvent","e","stopPropagation","preventDefault","sanitizeInValue","x","Array","isArray","slice","prepareOutValue","length","trimSucceeding","nextValue","minDistance","max","i","padding","trimPreceding","min","addHandlers","eventMap","Object","keys","forEach","key","document","addEventListener","removeHandlers","removeEventListener","trimAlignValue","val","props","alignValue","trimValue","valModStep","step","alignedValue","Math","abs","parseFloat","toFixed","trimmed","ReactSlider","_this","onKeyUp","onEnd","onMouseUp","getMouseEventMap","onTouchEnd","getTouchEventMap","onBlur","setState","index","getKeyDownEventMap","onMouseMove","pending","position","getMousePosition","diffPosition","getDiffPosition","newValue","getValueFromPosition","move","onTouchMove","touches","getTouchPosition","isScrolling","diffMainDir","startPosition","diffScrollDir","onKeyDown","ctrlKey","shiftKey","altKey","metaKey","moveDownByStep","moveUpByStep","pageFn","onSliderMouseDown","disabled","button","snapDragDisabled","forceValueFromPosition","start","onSliderClick","hasMoved","valueAtPos","calcValue","calcOffsetFromPosition","createOnKeyDown","createOnMouseDown","createOnTouchStart","undefined","handleResize","resizeTimeout","window","setTimeout","pendingResizeTimeouts","shift","resize","push","renderThumb","style","className","thumbClassName","state","thumbActiveClassName","r","orientation","value","ariaLabel","ariaLabelledby","valueNow","ariaValuetext","renderTrack","offsetFrom","offsetTo","trackClassName","buildTrackStyle","upperBound","defaultValue","zIndices","resizeObserver","resizeElementRef","React","createRef","sliderLength","componentDidMount","ResizeObserver","observe","current","getDerivedStateFromProps","map","item","componentDidUpdate","componentWillUnmount","clearPendingResizeTimeouts","disconnect","fireChangeEvent","getValue","getClosestIndex","pixelOffset","minDist","Number","MAX_VALUE","closestIndex","l","offset","calcOffset","dist","axisKey","orthogonalAxisKey","touch","keydown","keyup","focusout","mousemove","mouseup","touchmove","touchend","diffValue","thumbSize","startValue","invert","slider","thumb0","thumb","sizeKey","sliderRect","getBoundingClientRect","sliderSize","sliderMax","posMaxKey","sliderMin","posMinKey","thumbRect","replace","toLowerCase","range","ratio","windowOffset","sliderStart","callback","nextTimeout","clearTimeout","thumbRef","focus","splice","indexOf","prevState","oldValue","pearling","valueBefore","valueAfter","pushSucceeding","pushPreceding","bind","event","buildThumbStyle","touchAction","willChange","zIndex","obj","buildMarkStyle","renderThumbs","styles","res","renderTracks","tracks","lastIndex","renderMarks","marks","from","_","filter","sort","a","b","mark","markClassName","renderMark","render","withTracks","thumbs","createElement","ref","onMouseDown","onClick","Component","displayName","defaultProps","__self","__source","fileName","lineNumber","columnNumber","propTypes","process","PropTypes","number","func","oneOfType","arrayOf","oneOf","string","bool","onBeforeChange","onChange","onAfterChange"],"sources":["/Users/macbookpro16/Desktop/data-visualization/client/node_modules/react-slider/src/components/ReactSlider/ReactSlider.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * To prevent text selection while dragging.\n * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n */\nfunction pauseEvent(e) {\n    if (e && e.stopPropagation) {\n        e.stopPropagation();\n    }\n    if (e && e.preventDefault) {\n        e.preventDefault();\n    }\n    return false;\n}\n\nfunction stopPropagation(e) {\n    if (e.stopPropagation) {\n        e.stopPropagation();\n    }\n}\n\nfunction sanitizeInValue(x) {\n    if (x == null) {\n        return [];\n    }\n    return Array.isArray(x) ? x.slice() : [x];\n}\n\nfunction prepareOutValue(x) {\n    return x !== null && x.length === 1 ? x[0] : x.slice();\n}\n\nfunction trimSucceeding(length, nextValue, minDistance, max) {\n    for (let i = 0; i < length; i += 1) {\n        const padding = max - i * minDistance;\n        if (nextValue[length - 1 - i] > padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[length - 1 - i] = padding;\n        }\n    }\n}\n\nfunction trimPreceding(length, nextValue, minDistance, min) {\n    for (let i = 0; i < length; i += 1) {\n        const padding = min + i * minDistance;\n        if (nextValue[i] < padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[i] = padding;\n        }\n    }\n}\n\nfunction addHandlers(eventMap) {\n    Object.keys(eventMap).forEach(key => {\n        if (typeof document !== 'undefined') {\n            document.addEventListener(key, eventMap[key], false);\n        }\n    });\n}\n\nfunction removeHandlers(eventMap) {\n    Object.keys(eventMap).forEach(key => {\n        if (typeof document !== 'undefined') {\n            document.removeEventListener(key, eventMap[key], false);\n        }\n    });\n}\n\nfunction trimAlignValue(val, props) {\n    return alignValue(trimValue(val, props), props);\n}\n\nfunction alignValue(val, props) {\n    const valModStep = (val - props.min) % props.step;\n    let alignedValue = val - valModStep;\n\n    if (Math.abs(valModStep) * 2 >= props.step) {\n        alignedValue += valModStep > 0 ? props.step : -props.step;\n    }\n\n    return parseFloat(alignedValue.toFixed(5));\n}\n\nfunction trimValue(val, props) {\n    let trimmed = val;\n    if (trimmed <= props.min) {\n        trimmed = props.min;\n    }\n    if (trimmed >= props.max) {\n        trimmed = props.max;\n    }\n\n    return trimmed;\n}\n\nclass ReactSlider extends React.Component {\n    static displayName = 'ReactSlider';\n\n    static propTypes = {\n        /**\n         * The minimum value of the slider.\n         */\n        min: PropTypes.number,\n\n        /**\n         * The maximum value of the slider.\n         */\n        max: PropTypes.number,\n\n        /**\n         * Value to be added or subtracted on each step the slider makes.\n         * Must be greater than zero.\n         * `max - min` should be evenly divisible by the step value.\n         */\n        step: PropTypes.number,\n\n        /**\n         * The result of the function is the value to be added or subtracted\n         * when the `Page Up` or `Page Down` keys are pressed.\n         *\n         * The current `step` value will be passed as the only argument.\n         * By default, paging will modify `step` by a factor of 10.\n         */\n        pageFn: PropTypes.func,\n\n        /**\n         * The minimal distance between any pair of thumbs.\n         * Must be positive, but zero means they can sit on top of each other.\n         */\n        minDistance: PropTypes.number,\n\n        /**\n         * Determines the initial positions of the thumbs and the number of thumbs.\n         *\n         * If a number is passed a slider with one thumb will be rendered.\n         * If an array is passed each value will determine the position of one thumb.\n         * The values in the array must be sorted.\n         */\n        defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n        /**\n         * Like `defaultValue` but for\n         * [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n        /**\n         * Determines whether the slider moves horizontally (from left to right)\n         * or vertically (from top to bottom).\n         */\n        orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n        /**\n         * The css class set on the slider node.\n         */\n        className: PropTypes.string,\n\n        /**\n         * The css class set on each thumb node.\n         *\n         * In addition each thumb will receive a numbered css class of the form\n         * `${thumbClassName}-${i}`, e.g. `thumb-0`, `thumb-1`, ...\n         */\n        thumbClassName: PropTypes.string,\n\n        /**\n         * The css class set on the thumb that is currently being moved.\n         */\n        thumbActiveClassName: PropTypes.string,\n\n        /**\n         * If `true` tracks between the thumbs will be rendered.\n         */\n        withTracks: PropTypes.bool,\n\n        /**\n         * The css class set on the tracks between the thumbs.\n         * In addition track fragment will receive a numbered css class of the form\n         * `${trackClassName}-${i}`, e.g. `track-0`, `track-1`, ...\n         */\n        trackClassName: PropTypes.string,\n\n        /**\n         * If `true` the active thumb will push other thumbs\n         * within the constraints of `min`, `max`, `step` and `minDistance`.\n         */\n        pearling: PropTypes.bool,\n\n        /**\n         * If `true` the thumbs can't be moved.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Disables thumb move when clicking the slider track\n         */\n        snapDragDisabled: PropTypes.bool,\n\n        /**\n         * Inverts the slider.\n         */\n        invert: PropTypes.bool,\n\n        /**\n         * Shows passed marks on the track, if true it shows all the marks,\n         * if an array of numbers it shows just the passed marks, if a number is passed\n         * it shows just the marks in that steps: like passing 3 shows the marks 3, 6, 9\n         */\n        marks: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.number),\n            PropTypes.bool,\n            PropTypes.number,\n        ]),\n\n        /**\n         * The css class set on the marks.\n         */\n        markClassName: PropTypes.string,\n\n        /**\n         * Callback called before starting to move a thumb. The callback will only be called if the\n         * action will result in a change. The function will be called with two arguments, the first\n         * being the initial value(s) the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onBeforeChange: PropTypes.func,\n\n        /**\n         * Callback called on every value change.\n         * The function will be called with two arguments, the first being the new value(s)\n         * the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onChange: PropTypes.func,\n\n        /**\n         * Callback called only after moving a thumb has ended. The callback will only be called if\n         * the action resulted in a change. The function will be called with two arguments, the\n         * first being the result value(s) the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onAfterChange: PropTypes.func,\n\n        /**\n         * Callback called when the the slider is clicked (thumb or tracks).\n         * Receives the value at the clicked position as argument.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        onSliderClick: PropTypes.func,\n\n        /**\n         * aria-label for screen-readers to apply to the thumbs.\n         * Use an array for more than one thumb.\n         * The length of the array must match the number of thumbs in the value array.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n        /**\n         * aria-labelledby for screen-readers to apply to the thumbs.\n         * Used when slider rendered with separate label.\n         * Use an array for more than one thumb.\n         * The length of the array must match the number of thumbs in the value array.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaLabelledby: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string),\n        ]),\n\n        /**\n         * aria-valuetext for screen-readers.\n         * Can be a static string, or a function that returns a string.\n         * The function will be passed a single argument,\n         * an object with the following properties:\n         *\n         *     state => `Value: ${state.value}`\n         *\n         * - `state.index` {`number`} the index of the thumb\n         * - `state.value` {`number` | `array`} the current value state\n         * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaValuetext: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n        /**\n         * Provide a custom render function for the track node.\n         * The render function will be passed two arguments,\n         * an object with props that should be added to your handle node,\n         * and an object with track and slider state:\n         *\n         *     (props, state) => <div {...props} />\n         *\n         * - `props` {`object`} props to be spread into your track node\n         * - `state.index` {`number`} the index of the track\n         * - `state.value` {`number` | `array`} the current value state\n         */\n        renderTrack: PropTypes.func,\n\n        /**\n         * Provide a custom render function for dynamic thumb content.\n         * The render function will be passed two arguments,\n         * an object with props that should be added to your thumb node,\n         * and an object with thumb and slider state:\n         *\n         *     (props, state) => <div {...props} />\n         *\n         * - `props` {`object`} props to be spread into your thumb node\n         * - `state.index` {`number`} the index of the thumb\n         * - `state.value` {`number` | `array`} the current value state\n         * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        renderThumb: PropTypes.func,\n\n        /**\n         * Provide a custom render function for the mark node.\n         * The render function will be passed one argument,\n         * an object with props that should be added to your handle node\n         *\n         *     (props) => <span {...props} />\n         *\n         * - `props` {`object`} props to be spread into your track node\n         */\n        renderMark: PropTypes.func,\n    };\n\n    static defaultProps = {\n        min: 0,\n        max: 100,\n        step: 1,\n        pageFn: step => step * 10,\n        minDistance: 0,\n        defaultValue: 0,\n        orientation: 'horizontal',\n        className: 'slider',\n        thumbClassName: 'thumb',\n        thumbActiveClassName: 'active',\n        trackClassName: 'track',\n        markClassName: 'mark',\n        withTracks: true,\n        pearling: false,\n        disabled: false,\n        snapDragDisabled: false,\n        invert: false,\n        marks: [],\n        renderThumb: props => <div {...props} />,\n        renderTrack: props => <div {...props} />,\n        renderMark: props => <span {...props} />,\n    };\n\n    constructor(props) {\n        super(props);\n\n        let value = sanitizeInValue(props.value);\n        if (!value.length) {\n            value = sanitizeInValue(props.defaultValue);\n        }\n\n        // array for storing resize timeouts ids\n        this.pendingResizeTimeouts = [];\n\n        const zIndices = [];\n        for (let i = 0; i < value.length; i += 1) {\n            value[i] = trimAlignValue(value[i], props);\n            zIndices.push(i);\n        }\n\n        this.resizeObserver = null;\n        this.resizeElementRef = React.createRef();\n\n        this.state = {\n            index: -1,\n            upperBound: 0,\n            sliderLength: 0,\n            value,\n            zIndices,\n        };\n    }\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            this.resizeObserver = new ResizeObserver(this.handleResize);\n            this.resizeObserver.observe(this.resizeElementRef.current);\n            this.resize();\n        }\n    }\n\n    // Keep the internal `value` consistent with an outside `value` if present.\n    // This basically allows the slider to be a controlled component.\n    static getDerivedStateFromProps(props, state) {\n        const value = sanitizeInValue(props.value);\n        if (!value.length) {\n            return null;\n        }\n\n        // Do not allow controlled upates to happen while we have pending updates\n        if (state.pending) {\n            return null;\n        }\n\n        return {\n            value: value.map(item => trimAlignValue(item, props)),\n        };\n    }\n\n    componentDidUpdate() {\n        // If an upperBound has not yet been determined (due to the component being hidden\n        // during the mount event, or during the last resize), then calculate it now\n        if (this.state.upperBound === 0) {\n            this.resize();\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearPendingResizeTimeouts();\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n\n    onKeyUp = () => {\n        this.onEnd();\n    };\n\n    onMouseUp = () => {\n        this.onEnd(this.getMouseEventMap());\n    };\n\n    onTouchEnd = () => {\n        this.onEnd(this.getTouchEventMap());\n    };\n\n    onBlur = () => {\n        this.setState({ index: -1 }, this.onEnd(this.getKeyDownEventMap()));\n    };\n\n    onEnd(eventMap) {\n        if (eventMap) {\n            removeHandlers(eventMap);\n        }\n        if (this.hasMoved) {\n            this.fireChangeEvent('onAfterChange');\n        }\n\n        // Allow controlled updates to continue\n        this.setState({ pending: false });\n\n        this.hasMoved = false;\n    }\n\n    onMouseMove = e => {\n        // Prevent controlled updates from happening while mouse is moving\n        this.setState({ pending: true });\n\n        const position = this.getMousePosition(e);\n        const diffPosition = this.getDiffPosition(position[0]);\n        const newValue = this.getValueFromPosition(diffPosition);\n        this.move(newValue);\n    };\n\n    onTouchMove = e => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while touch is moving\n        this.setState({ pending: true });\n\n        const position = this.getTouchPosition(e);\n\n        if (typeof this.isScrolling === 'undefined') {\n            const diffMainDir = position[0] - this.startPosition[0];\n            const diffScrollDir = position[1] - this.startPosition[1];\n            this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n        }\n\n        if (this.isScrolling) {\n            this.setState({ index: -1 });\n            return;\n        }\n\n        const diffPosition = this.getDiffPosition(position[0]);\n        const newValue = this.getValueFromPosition(diffPosition);\n\n        this.move(newValue);\n    };\n\n    onKeyDown = e => {\n        if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {\n            return;\n        }\n\n        // Prevent controlled updates from happening while a key is pressed\n        this.setState({ pending: true });\n\n        switch (e.key) {\n            case 'ArrowLeft':\n            case 'ArrowDown':\n            case 'Left':\n            case 'Down':\n                e.preventDefault();\n                this.moveDownByStep();\n                break;\n            case 'ArrowRight':\n            case 'ArrowUp':\n            case 'Right':\n            case 'Up':\n                e.preventDefault();\n                this.moveUpByStep();\n                break;\n            case 'Home':\n                e.preventDefault();\n                this.move(this.props.min);\n                break;\n            case 'End':\n                e.preventDefault();\n                this.move(this.props.max);\n                break;\n            case 'PageDown':\n                e.preventDefault();\n                this.moveDownByStep(this.props.pageFn(this.props.step));\n                break;\n            case 'PageUp':\n                e.preventDefault();\n                this.moveUpByStep(this.props.pageFn(this.props.step));\n                break;\n            default:\n        }\n    };\n\n    onSliderMouseDown = e => {\n        // do nothing if disabled or right click\n        if (this.props.disabled || e.button === 2) {\n            return;\n        }\n\n        // Prevent controlled updates from happening while mouse is moving\n        this.setState({ pending: true });\n\n        if (!this.props.snapDragDisabled) {\n            const position = this.getMousePosition(e);\n            this.forceValueFromPosition(position[0], i => {\n                this.start(i, position[0]);\n                addHandlers(this.getMouseEventMap());\n            });\n        }\n\n        pauseEvent(e);\n    };\n\n    onSliderClick = e => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        if (this.props.onSliderClick && !this.hasMoved) {\n            const position = this.getMousePosition(e);\n            const valueAtPos = trimAlignValue(\n                this.calcValue(this.calcOffsetFromPosition(position[0])),\n                this.props\n            );\n            this.props.onSliderClick(valueAtPos);\n        }\n    };\n\n    getValue() {\n        return prepareOutValue(this.state.value);\n    }\n\n    getClosestIndex(pixelOffset) {\n        let minDist = Number.MAX_VALUE;\n        let closestIndex = -1;\n\n        const { value } = this.state;\n        const l = value.length;\n\n        for (let i = 0; i < l; i += 1) {\n            const offset = this.calcOffset(value[i]);\n            const dist = Math.abs(pixelOffset - offset);\n            if (dist < minDist) {\n                minDist = dist;\n                closestIndex = i;\n            }\n        }\n\n        return closestIndex;\n    }\n\n    getMousePosition(e) {\n        return [e[`page${this.axisKey()}`], e[`page${this.orthogonalAxisKey()}`]];\n    }\n\n    getTouchPosition(e) {\n        const touch = e.touches[0];\n        return [touch[`page${this.axisKey()}`], touch[`page${this.orthogonalAxisKey()}`]];\n    }\n\n    getKeyDownEventMap() {\n        return {\n            keydown: this.onKeyDown,\n            keyup: this.onKeyUp,\n            focusout: this.onBlur,\n        };\n    }\n\n    getMouseEventMap() {\n        return {\n            mousemove: this.onMouseMove,\n            mouseup: this.onMouseUp,\n        };\n    }\n\n    getTouchEventMap() {\n        return {\n            touchmove: this.onTouchMove,\n            touchend: this.onTouchEnd,\n        };\n    }\n\n    getValueFromPosition(position) {\n        const diffValue =\n            (position / (this.state.sliderLength - this.state.thumbSize)) *\n            (this.props.max - this.props.min);\n        return trimAlignValue(this.state.startValue + diffValue, this.props);\n    }\n\n    getDiffPosition(position) {\n        let diffPosition = position - this.state.startPosition;\n        if (this.props.invert) {\n            diffPosition *= -1;\n        }\n        return diffPosition;\n    }\n\n    // create the `keydown` handler for the i-th thumb\n    createOnKeyDown = i => e => {\n        if (this.props.disabled) {\n            return;\n        }\n        this.start(i);\n        addHandlers(this.getKeyDownEventMap());\n        pauseEvent(e);\n    };\n\n    // create the `mousedown` handler for the i-th thumb\n    createOnMouseDown = i => e => {\n        // do nothing if disabled or right click\n        if (this.props.disabled || e.button === 2) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while mouse is moving\n        this.setState({ pending: true });\n\n        const position = this.getMousePosition(e);\n        this.start(i, position[0]);\n        addHandlers(this.getMouseEventMap());\n        pauseEvent(e);\n    };\n\n    // create the `touchstart` handler for the i-th thumb\n    createOnTouchStart = i => e => {\n        if (this.props.disabled || e.touches.length > 1) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while touch is moving\n        this.setState({ pending: true });\n\n        const position = this.getTouchPosition(e);\n        this.startPosition = position;\n        // don't know yet if the user is trying to scroll\n        this.isScrolling = undefined;\n        this.start(i, position[0]);\n        addHandlers(this.getTouchEventMap());\n        stopPropagation(e);\n    };\n\n    handleResize = () => {\n        // setTimeout of 0 gives element enough time to have assumed its new size if\n        // it is being resized\n        const resizeTimeout = window.setTimeout(() => {\n            // drop this timeout from pendingResizeTimeouts to reduce memory usage\n            this.pendingResizeTimeouts.shift();\n            this.resize();\n        }, 0);\n\n        this.pendingResizeTimeouts.push(resizeTimeout);\n    };\n\n    resize() {\n        const { slider, thumb0: thumb } = this;\n        if (!slider || !thumb) {\n            return;\n        }\n\n        const sizeKey = this.sizeKey();\n\n        // For the slider size, we want to use the client width/height, excluding any borders\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderSize = slider[sizeKey];\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()];\n\n        // For the thumb size, we want to use the outer width/height, including any borders\n        const thumbRect = thumb.getBoundingClientRect();\n        const thumbSize = thumbRect[sizeKey.replace('client', '').toLowerCase()];\n\n        const upperBound = sliderSize - thumbSize;\n        const sliderLength = Math.abs(sliderMax - sliderMin);\n\n        if (\n            this.state.upperBound !== upperBound ||\n            this.state.sliderLength !== sliderLength ||\n            this.state.thumbSize !== thumbSize\n        ) {\n            this.setState({\n                upperBound,\n                sliderLength,\n                thumbSize,\n            });\n        }\n    }\n\n    // calculates the offset of a thumb in pixels based on its value.\n    calcOffset(value) {\n        const range = this.props.max - this.props.min;\n        if (range === 0) {\n            return 0;\n        }\n        const ratio = (value - this.props.min) / range;\n        return ratio * this.state.upperBound;\n    }\n\n    // calculates the value corresponding to a given pixel offset, i.e. the inverse of `calcOffset`.\n    calcValue(offset) {\n        const ratio = offset / this.state.upperBound;\n        return ratio * (this.props.max - this.props.min) + this.props.min;\n    }\n\n    calcOffsetFromPosition(position) {\n        const { slider } = this;\n\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()];\n\n        // The `position` value passed in is the mouse position based on the window height.\n        // The slider bounding rect is based on the viewport, so we must add the window scroll\n        // offset to normalize the values.\n        const windowOffset = window[`page${this.axisKey()}Offset`];\n        const sliderStart = windowOffset + (this.props.invert ? sliderMax : sliderMin);\n\n        let pixelOffset = position - sliderStart;\n        if (this.props.invert) {\n            pixelOffset = this.state.sliderLength - pixelOffset;\n        }\n        pixelOffset -= this.state.thumbSize / 2;\n        return pixelOffset;\n    }\n\n    // Snaps the nearest thumb to the value corresponding to `position`\n    // and calls `callback` with that thumb's index.\n    forceValueFromPosition(position, callback) {\n        const pixelOffset = this.calcOffsetFromPosition(position);\n        const closestIndex = this.getClosestIndex(pixelOffset);\n        const nextValue = trimAlignValue(this.calcValue(pixelOffset), this.props);\n\n        // Clone this.state.value since we'll modify it temporarily\n        // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n        const value = this.state.value.slice();\n        value[closestIndex] = nextValue;\n\n        // Prevents the slider from shrinking below `props.minDistance`\n        for (let i = 0; i < value.length - 1; i += 1) {\n            if (value[i + 1] - value[i] < this.props.minDistance) {\n                return;\n            }\n        }\n\n        this.fireChangeEvent('onBeforeChange');\n        this.hasMoved = true;\n        this.setState({ value }, () => {\n            callback(closestIndex);\n            this.fireChangeEvent('onChange');\n        });\n    }\n\n    // clear all pending timeouts to avoid error messages after unmounting\n    clearPendingResizeTimeouts() {\n        do {\n            const nextTimeout = this.pendingResizeTimeouts.shift();\n\n            clearTimeout(nextTimeout);\n        } while (this.pendingResizeTimeouts.length);\n    }\n\n    start(i, position) {\n        const thumbRef = this[`thumb${i}`];\n        if (thumbRef) {\n            thumbRef.focus();\n        }\n\n        const { zIndices } = this.state;\n        // remove wherever the element is\n        zIndices.splice(zIndices.indexOf(i), 1);\n        // add to end\n        zIndices.push(i);\n\n        this.setState(prevState => ({\n            startValue: prevState.value[i],\n            startPosition: position !== undefined ? position : prevState.startPosition,\n            index: i,\n            zIndices,\n        }));\n    }\n\n    moveUpByStep(step = this.props.step) {\n        const oldValue = this.state.value[this.state.index];\n        const newValue = trimAlignValue(oldValue + step, this.props);\n        this.move(Math.min(newValue, this.props.max));\n    }\n\n    moveDownByStep(step = this.props.step) {\n        const oldValue = this.state.value[this.state.index];\n        const newValue = trimAlignValue(oldValue - step, this.props);\n        this.move(Math.max(newValue, this.props.min));\n    }\n\n    move(newValue) {\n        const { index, value } = this.state;\n        const { length } = value;\n\n        // Short circuit if the value is not changing\n        const oldValue = value[index];\n        if (newValue === oldValue) {\n            return;\n        }\n\n        // Trigger only before the first movement\n        if (!this.hasMoved) {\n            this.fireChangeEvent('onBeforeChange');\n        }\n        this.hasMoved = true;\n\n        // if \"pearling\" (= thumbs pushing each other) is disabled,\n        // prevent the thumb from getting closer than `minDistance` to the previous or next thumb.\n        const { pearling, max, min, minDistance } = this.props;\n        if (!pearling) {\n            if (index > 0) {\n                const valueBefore = value[index - 1];\n                if (newValue < valueBefore + minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueBefore + minDistance;\n                }\n            }\n\n            if (index < length - 1) {\n                const valueAfter = value[index + 1];\n                if (newValue > valueAfter - minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueAfter - minDistance;\n                }\n            }\n        }\n\n        value[index] = newValue;\n\n        // if \"pearling\" is enabled, let the current thumb push the pre- and succeeding thumbs.\n        if (pearling && length > 1) {\n            if (newValue > oldValue) {\n                this.pushSucceeding(value, minDistance, index);\n                trimSucceeding(length, value, minDistance, max);\n            } else if (newValue < oldValue) {\n                this.pushPreceding(value, minDistance, index);\n                trimPreceding(length, value, minDistance, min);\n            }\n        }\n\n        // Normally you would use `shouldComponentUpdate`,\n        // but since the slider is a low-level component,\n        // the extra complexity might be worth the extra performance.\n        this.setState({ value }, this.fireChangeEvent.bind(this, 'onChange'));\n    }\n\n    pushSucceeding(value, minDistance, index) {\n        let i;\n        let padding;\n        for (\n            i = index, padding = value[i] + minDistance;\n            value[i + 1] !== null && padding > value[i + 1];\n            i += 1, padding = value[i] + minDistance\n        ) {\n            // eslint-disable-next-line no-param-reassign\n            value[i + 1] = alignValue(padding, this.props);\n        }\n    }\n\n    pushPreceding(value, minDistance, index) {\n        for (\n            let i = index, padding = value[i] - minDistance;\n            value[i - 1] !== null && padding < value[i - 1];\n            i -= 1, padding = value[i] - minDistance\n        ) {\n            // eslint-disable-next-line no-param-reassign\n            value[i - 1] = alignValue(padding, this.props);\n        }\n    }\n\n    axisKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'Y';\n        }\n        // Defaults to 'horizontal';\n        return 'X';\n    }\n\n    orthogonalAxisKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'X';\n        }\n        // Defaults to 'horizontal'\n        return 'Y';\n    }\n\n    posMinKey() {\n        if (this.props.orientation === 'vertical') {\n            return this.props.invert ? 'bottom' : 'top';\n        }\n        // Defaults to 'horizontal'\n        return this.props.invert ? 'right' : 'left';\n    }\n\n    posMaxKey() {\n        if (this.props.orientation === 'vertical') {\n            return this.props.invert ? 'top' : 'bottom';\n        }\n        // Defaults to 'horizontal'\n        return this.props.invert ? 'left' : 'right';\n    }\n\n    sizeKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'clientHeight';\n        }\n        // Defaults to 'horizontal'\n        return 'clientWidth';\n    }\n\n    fireChangeEvent(event) {\n        if (this.props[event]) {\n            this.props[event](prepareOutValue(this.state.value), this.state.index);\n        }\n    }\n\n    buildThumbStyle(offset, i) {\n        const style = {\n            position: 'absolute',\n            touchAction: 'none',\n            willChange: this.state.index >= 0 ? this.posMinKey() : undefined,\n            zIndex: this.state.zIndices.indexOf(i) + 1,\n        };\n        style[this.posMinKey()] = `${offset}px`;\n        return style;\n    }\n\n    buildTrackStyle(min, max) {\n        const obj = {\n            position: 'absolute',\n            willChange:\n                this.state.index >= 0 ? `${this.posMinKey()},${this.posMaxKey()}` : undefined,\n        };\n        obj[this.posMinKey()] = min;\n        obj[this.posMaxKey()] = max;\n        return obj;\n    }\n\n    buildMarkStyle(offset) {\n        return {\n            position: 'absolute',\n            [this.posMinKey()]: offset,\n        };\n    }\n\n    renderThumb = (style, i) => {\n        const className = `${this.props.thumbClassName} ${this.props.thumbClassName}-${i} ${\n            this.state.index === i ? this.props.thumbActiveClassName : ''\n        }`;\n\n        const props = {\n            'ref': r => {\n                this[`thumb${i}`] = r;\n            },\n            'key': `${this.props.thumbClassName}-${i}`,\n            className,\n            style,\n            'onMouseDown': this.createOnMouseDown(i),\n            'onTouchStart': this.createOnTouchStart(i),\n            'onFocus': this.createOnKeyDown(i),\n            'tabIndex': 0,\n            'role': 'slider',\n            'aria-orientation': this.props.orientation,\n            'aria-valuenow': this.state.value[i],\n            'aria-valuemin': this.props.min,\n            'aria-valuemax': this.props.max,\n            'aria-label': Array.isArray(this.props.ariaLabel)\n                ? this.props.ariaLabel[i]\n                : this.props.ariaLabel,\n            'aria-labelledby': Array.isArray(this.props.ariaLabelledby)\n                ? this.props.ariaLabelledby[i]\n                : this.props.ariaLabelledby,\n        };\n\n        const state = {\n            index: i,\n            value: prepareOutValue(this.state.value),\n            valueNow: this.state.value[i],\n        };\n\n        if (this.props.ariaValuetext) {\n            props['aria-valuetext'] =\n                typeof this.props.ariaValuetext === 'string'\n                    ? this.props.ariaValuetext\n                    : this.props.ariaValuetext(state);\n        }\n\n        return this.props.renderThumb(props, state);\n    };\n\n    renderThumbs(offset) {\n        const { length } = offset;\n\n        const styles = [];\n        for (let i = 0; i < length; i += 1) {\n            styles[i] = this.buildThumbStyle(offset[i], i);\n        }\n\n        const res = [];\n        for (let i = 0; i < length; i += 1) {\n            res[i] = this.renderThumb(styles[i], i);\n        }\n        return res;\n    }\n\n    renderTrack = (i, offsetFrom, offsetTo) => {\n        const props = {\n            key: `${this.props.trackClassName}-${i}`,\n            className: `${this.props.trackClassName} ${this.props.trackClassName}-${i}`,\n            style: this.buildTrackStyle(offsetFrom, this.state.upperBound - offsetTo),\n        };\n        const state = {\n            index: i,\n            value: prepareOutValue(this.state.value),\n        };\n        return this.props.renderTrack(props, state);\n    };\n\n    renderTracks(offset) {\n        const tracks = [];\n        const lastIndex = offset.length - 1;\n\n        tracks.push(this.renderTrack(0, 0, offset[0]));\n\n        for (let i = 0; i < lastIndex; i += 1) {\n            tracks.push(this.renderTrack(i + 1, offset[i], offset[i + 1]));\n        }\n\n        tracks.push(this.renderTrack(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n\n        return tracks;\n    }\n\n    renderMarks() {\n        let { marks } = this.props;\n\n        const range = this.props.max - this.props.min + 1;\n\n        if (typeof marks === 'boolean') {\n            marks = Array.from({ length: range }).map((_, key) => key);\n        } else if (typeof marks === 'number') {\n            marks = Array.from({ length: range })\n                .map((_, key) => key)\n                .filter(key => key % marks === 0);\n        }\n\n        return marks\n            .map(parseFloat)\n            .sort((a, b) => a - b)\n            .map(mark => {\n                const offset = this.calcOffset(mark);\n\n                const props = {\n                    key: mark,\n                    className: this.props.markClassName,\n                    style: this.buildMarkStyle(offset),\n                };\n\n                return this.props.renderMark(props);\n            });\n    }\n\n    render() {\n        const offset = [];\n        const { value } = this.state;\n        const l = value.length;\n        for (let i = 0; i < l; i += 1) {\n            offset[i] = this.calcOffset(value[i], i);\n        }\n\n        const tracks = this.props.withTracks ? this.renderTracks(offset) : null;\n        const thumbs = this.renderThumbs(offset);\n        const marks = this.props.marks ? this.renderMarks() : null;\n\n        return React.createElement(\n            'div',\n            {\n                ref: r => {\n                    this.slider = r;\n                    this.resizeElementRef.current = r;\n                },\n                style: { position: 'relative' },\n                className: this.props.className + (this.props.disabled ? ' disabled' : ''),\n                onMouseDown: this.onSliderMouseDown,\n                onClick: this.onSliderClick,\n            },\n            tracks,\n            thumbs,\n            marks\n        );\n    }\n}\n\nexport default ReactSlider;\n"]},"metadata":{},"sourceType":"module"}