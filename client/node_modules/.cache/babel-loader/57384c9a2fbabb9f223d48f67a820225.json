{"ast":null,"code":"/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\nimport { PathPointType } from './figures/enum';\nimport { PdfGradientBrush } from './../../implementation/graphics/brushes/pdf-gradient-brush';\nimport { PdfTilingBrush } from './brushes/pdf-tiling-brush';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */function () {\n  function PdfGraphics(arg1, arg2, arg3) {\n    /**\n     * Represents the `Current color space`.\n     * @private\n     */\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    /**\n     * Stores `previous rendering mode`.\n     * @private\n     */\n    this.previousTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * Previous `character spacing` value or 0.\n     * @private\n     */\n    this.previousCharacterSpacing = 0.0;\n    /**\n     * Previous `word spacing` value or 0.\n     * @private\n     */\n    this.previousWordSpacing = 0.0;\n    /**\n     * The `previously used text scaling` value.\n     * @private\n     */\n    this.previousTextScaling = 100.0;\n    /**\n     * Instance of `ProcedureSets` class.\n     * @private\n     */\n    this.procedureSets = new ProcedureSets();\n    /**\n     * To check wihether it is a `direct text rendering`.\n     * @default true\n     * @private\n     */\n    this.isNormalRender = true;\n    /**\n     * check whether to `use font size` to calculate the shift.\n     * @default false\n     * @private\n     */\n    this.isUseFontSize = false;\n    /**\n     * check whether the font is in `italic type`.\n     * @default false\n     * @private\n     */\n    this.isItalic = false;\n    /**\n     * Check whether it is an `emf Text Matrix`.\n     * @default false\n     * @private\n     */\n    this.isEmfTextScaled = false;\n    /**\n     * Check whether it is an `emf` call.\n     * @default false\n     * @private\n     */\n    this.isEmf = false;\n    /**\n     * Check whether it is an `emf plus` call.\n     * @default false\n     * @private\n     */\n    this.isEmfPlus = false;\n    /**\n     * Check whether it is in `base line format`.\n     * @default true\n     * @private\n     */\n    this.isBaselineFormat = true;\n    /**\n     * Emf Text `Scaling Factor`.\n     * @private\n     */\n    this.emfScalingFactor = new SizeF(0, 0);\n    /**\n     * To check whether the `last color space` of document and garphics is saved.\n     * @private\n     */\n    this.colorSpaceChanged = false;\n    /**\n     * Stores an instance of `DictionaryProperties`.\n     * @private\n     */\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n    this.isOverloadWithPosition = false;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n    this.isPointOverload = false;\n    /**\n     * Current colorspaces.\n     * @hidden\n     * @private\n     */\n    this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n    /**\n     * Checks the current image `is optimized` or not.\n     * @default false.\n     * @private\n     */\n    this.isImageOptimized = false;\n    /**\n     * Stores the `graphics states`.\n     * @private\n     */\n    this.graphicsState = [];\n    /**\n     * Indicates whether the object `had trasparency`.\n     * @default false\n     * @private\n     */\n    this.istransparencySet = false;\n    /**\n     * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n     * @default null\n     * @private\n     */\n    this.internalAutomaticFields = null;\n    /**\n     * Stores the index of the start line that should draw with in the next page.\n     * @private\n     */\n    this.startCutIndex = -1;\n    this.getResources = arg2;\n    this.canvasSize = arg1;\n    if (arg3 instanceof PdfStreamWriter) {\n      this.pdfStreamWriter = arg3;\n    } else {\n      this.pdfStreamWriter = new PdfStreamWriter(arg3);\n    }\n    this.initialize();\n  }\n  Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n    //  Properties\n    /**\n     * Returns the `result` after drawing string.\n     * @private\n     */\n    get: function () {\n      return this.pdfStringLayoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"size\", {\n    /**\n     * Gets the `size` of the canvas.\n     * @private\n     */\n    get: function () {\n      return this.canvasSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n    /**\n     * Gets and Sets the value of `MediaBox upper right bound`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n        this.internalMediaBoxUpperRightBound = 0;\n      }\n      return this.internalMediaBoxUpperRightBound;\n    },\n    set: function (value) {\n      this.internalMediaBoxUpperRightBound = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n    /**\n     * Gets the `size` of the canvas reduced by margins and page templates.\n     * @private\n     */\n    get: function () {\n      return new SizeF(this.clipBounds.width, this.clipBounds.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the current `color space` of the document\n     * @private\n     */\n    get: function () {\n      return this.currentColorSpace;\n    },\n    set: function (value) {\n      this.currentColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n    /**\n     * Gets the `stream writer`.\n     * @private\n     */\n    get: function () {\n      return this.pdfStreamWriter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n    /**\n     * Gets the `transformation matrix` reflecting current transformation.\n     * @private\n     */\n    get: function () {\n      if (this.transformationMatrix == null) {\n        this.transformationMatrix = new PdfTransformationMatrix();\n      }\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n    /**\n     * Gets the `layer` for the graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"page\", {\n    /**\n     * Gets the `page` for this graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer.page;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n    get: function () {\n      if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n        this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n      }\n      return this.internalAutomaticFields;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  /**\n   * `Initializes` this instance.\n   * @private\n   */\n  PdfGraphics.prototype.initialize = function () {\n    this.bStateSaved = false;\n    this.currentPen = null;\n    this.currentBrush = null;\n    this.currentFont = null;\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    this.bCSInitialized = false;\n    this.transformationMatrix = null;\n    this.previousTextRenderingMode = -1; //.Fill;\n    this.previousCharacterSpacing = -1.0;\n    this.previousWordSpacing = -1.0;\n    this.previousTextScaling = -100.0;\n    // this.m_trasparencies = null;\n    this.currentStringFormat = null;\n    this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n  };\n  PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n    if (typeof size === 'undefined') {\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n      this.drawPdfTemplate(template, location, template.size);\n    } else {\n      // let crossTable : PdfCrossTable = null;\n      // if (this.pageLayer != null) {\n      //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n      // }\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n      var scaleX = template.width > 0 ? size.width / template.width : 1;\n      var scaleY = template.height > 0 ? size.height / template.height : 1;\n      var bNeedScale = !(scaleX === 1 && scaleY === 1);\n      // Save state.\n      var state = this.save();\n      // Take into consideration that rect location is bottom/left.\n      var matrix = new PdfTransformationMatrix();\n      if (this.pageLayer != null) {\n        this.getTranslateTransform(location.x, location.y + size.height, matrix);\n      }\n      if (bNeedScale) {\n        this.getScaleTransform(scaleX, scaleY, matrix);\n      }\n      this.pdfStreamWriter.modifyCtm(matrix);\n      // Output template.\n      var resources = this.getResources.getResources();\n      var name_1 = resources.getName(template);\n      this.pdfStreamWriter.executeObject(name_1);\n      // Restore state.\n      this.restore(state);\n      //Transfer automatic fields from template.\n      var g = template.graphics;\n      if (g != null) {\n        for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n          var fieldInfo = g.automaticFields.automaticFields[index];\n          var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n          var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n          var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n          this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n          this.page.dictionary.modify();\n        }\n      }\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n    }\n  };\n  /* tslint:disable */\n  /**\n   * @public\n   */\n  PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n      this.isOverloadWithPosition = true;\n      this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n      var temparg7 = arg7;\n      var temparg8 = arg8;\n      var temparg9 = arg9;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n      if (!result.empty) {\n        var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n        if (temparg7 <= 0) {\n          temparg5 = rect.x;\n          temparg7 = rect.width;\n        }\n        if (temparg8 <= 0) {\n          temparg6 = rect.y;\n          temparg8 = rect.height;\n        }\n        this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n        this.isEmfTextScaled = false;\n        this.emfScalingFactor = new SizeF(0, 0);\n      }\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n      this.isNormalRender = true;\n      this.pdfStringLayoutResult = result;\n      this.isUseFontSize = false;\n    }\n  }; /* tslint:enable */\n  PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n    if (arg2 instanceof PointF) {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      this.stateControl(arg1, null, null);\n      var sw = this.streamWriter;\n      sw.beginPath(temparg2, temparg3);\n      sw.appendLineSegment(temparg4, temparg5);\n      sw.strokePath();\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    }\n  };\n  /* tslint:disable */\n  PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n    } else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n      if (arg2 instanceof PdfTilingBrush) {\n        this.bCSInitialized = false;\n        var xOffset = this.matrix.matrix.offsetX + temparg3;\n        var yOffset = void 0;\n        if (this.layer != null && this.layer.page != null) {\n          yOffset = this.layer.page.size.height - this.matrix.matrix.offsetY + temparg4;\n        } else {\n          yOffset = this.clientSize.height - this.matrix.matrix.offsetY + temparg4;\n        }\n        arg2.location = new PointF(xOffset, yOffset);\n        arg2.graphics.colorSpace = this.colorSpace;\n      } else if (arg2 instanceof PdfGradientBrush) {\n        arg2.colorSpace = this.colorSpace;\n      }\n      if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n        arg2 = null;\n      }\n      var temparg1 = arg1;\n      var temparg2 = arg2;\n      this.stateControl(temparg1, temparg2, null);\n      this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n      this.drawPathHelper(temparg1, temparg2, false);\n    }\n  };\n  PdfGraphics.prototype.drawPathHelper = function (arg1, arg2, arg3, arg4) {\n    if (typeof arg3 === 'boolean') {\n      var temparg3 = arg3;\n      this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var isPen = arg1 != null;\n      var isBrush = arg2 != null;\n      var isEvenOdd = temparg3 === PdfFillMode.Alternate;\n      if (isPen && isBrush) {\n        this.streamWriter.fillStrokePath(isEvenOdd);\n      } else if (!isPen && !isBrush) {\n        this.streamWriter.endPath();\n      } else if (isPen) {\n        this.streamWriter.strokePath();\n      } else {\n        this.streamWriter.fillPath(isEvenOdd);\n      }\n    }\n  };\n  /* tslint:disable */\n  PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n    if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      var size = arg1.physicalDimension;\n      this.drawImage(arg1, arg2, arg3, size.width, size.height);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      arg1.save();\n      var matrix = new PdfTransformationMatrix();\n      this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix);\n      this.getScaleTransform(arg4, arg5, matrix);\n      this.pdfStreamWriter.write('q');\n      this.pdfStreamWriter.modifyCtm(matrix);\n      // Output template.\n      var resources = this.getResources.getResources();\n      if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n        resources.document = this.page.document;\n      }\n      var name_2 = resources.getName(arg1);\n      if (typeof this.pageLayer !== 'undefined') {\n        this.page.setResources(resources);\n      }\n      this.pdfStreamWriter.executeObject(name_2);\n      this.pdfStreamWriter.write(Operators.restoreState);\n      this.pdfStreamWriter.write(Operators.newLine);\n      var resource = this.getResources.getResources();\n      resource.requireProcedureSet(this.procedureSets.imageB);\n      resource.requireProcedureSet(this.procedureSets.imageC);\n      resource.requireProcedureSet(this.procedureSets.imageI);\n      resource.requireProcedureSet(this.procedureSets.text);\n    }\n  };\n  //Implementation\n  /* tslint:disable */\n  /**\n   * Returns `bounds` of the line info.\n   * @private\n   */\n  PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n    var bounds;\n    if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n      var line = result.lines[lineIndex];\n      var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n      var y = vShift + layoutRectangle.y + result.lineHeight * lineIndex;\n      var lineWidth = line.width;\n      var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(line, format, layoutRectangle, lineIndex === 0);\n      hShift += !this.rightToLeft(format) ? lineIndent : 0;\n      var x = layoutRectangle.x + hShift;\n      /* tslint:disable */\n      var width = !this.shouldJustify(line, layoutRectangle.width, format) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent; /* tslint:enable */\n      var height = result.lineHeight;\n      bounds = new RectangleF(x, y, width, height);\n    } else {\n      bounds = new RectangleF(0, 0, 0, 0);\n    }\n    return bounds;\n  };\n  /**\n   * Creates `lay outed rectangle` depending on the text settings.\n   * @private\n   */\n  PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n    var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n    if (format != null) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          layoutedRectangle.x -= layoutedRectangle.width / 2;\n          break;\n        case PdfTextAlignment.Right:\n          layoutedRectangle.x -= layoutedRectangle.width;\n          break;\n      }\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          layoutedRectangle.y -= layoutedRectangle.height / 2;\n          break;\n        case PdfVerticalAlignment.Bottom:\n          layoutedRectangle.y -= layoutedRectangle.height;\n          break;\n      }\n    }\n    return layoutedRectangle;\n  };\n  /**\n   * Sets the `layer` for the graphics.\n   * @private\n   */\n  PdfGraphics.prototype.setLayer = function (layer) {\n    this.pageLayer = layer;\n    var page = layer.page;\n    if (page != null && typeof page !== 'undefined') {\n      page.beginSave = this.pageSave;\n    }\n  };\n  /**\n   * Adding page number field before page saving.\n   * @private\n   */\n  /* tslint:disable */\n  PdfGraphics.prototype.pageSave = function (page) {\n    if (page.graphics.automaticFields != null) {\n      for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n        var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n        fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n      }\n    }\n  };\n  /**\n   * `Draws a layout result`.\n   * @private\n   */\n  PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n    if (!result.empty) {\n      this.applyStringSettings(font, pen, brush, format, layoutRectangle);\n      // Set text scaling\n      var textScaling = format != null ? format.horizontalScalingFactor : 100.0;\n      if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.setTextScaling(textScaling);\n        this.previousTextScaling = textScaling;\n      }\n      var height = format == null || format.lineSpacing === 0 ? font.height : format.lineSpacing + font.height;\n      var subScript = format != null && format.subSuperScript === PdfSubSuperScript.SubScript;\n      var shift = 0;\n      shift = subScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format);\n      this.shift = shift;\n      this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n      this.pdfStreamWriter.setLeading(+height);\n      var resultHeight = 0;\n      var remainingString = '';\n      for (var i = 0; i < result.lines.length; i++) {\n        resultHeight += result.lineHeight;\n        if (layoutRectangle.y + resultHeight > this.clientSize.height) {\n          this.startCutIndex = i;\n          break;\n        }\n      }\n      for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) {\n        remainingString += result.lines[j].text;\n      }\n      var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n      this.drawLayoutResult(result, font, format, layoutRectangle);\n      this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n      this.isEmfPlus = false;\n      this.isUseFontSize = false;\n      if (this.startCutIndex !== -1) {\n        var page = this.getNextPage();\n        page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n      }\n    } else {\n      throw new Error('ArgumentNullException:result');\n    }\n  };\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n  PdfGraphics.prototype.getNextPage = function () {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n    return nextPage;\n  };\n  PdfGraphics.prototype.setClip = function (rectangle, mode) {\n    if (typeof mode === 'undefined') {\n      this.setClip(rectangle, PdfFillMode.Winding);\n    } else {\n      this.pdfStreamWriter.appendRectangle(rectangle);\n      this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate);\n    }\n  };\n  /**\n   * Applies all the `text settings`.\n   * @private\n   */\n  PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n    if (brush instanceof PdfTilingBrush) {\n      this.bCSInitialized = false;\n      brush.graphics.colorSpace = this.colorSpace;\n    } else if (brush instanceof PdfGradientBrush) {\n      this.bCSInitialized = false;\n      brush.colorSpace = this.colorSpace;\n    }\n    var setLineWidth = false;\n    var tm = this.getTextRenderingMode(pen, brush, format);\n    this.stateControl(pen, brush, font, format);\n    this.pdfStreamWriter.beginText();\n    if (tm !== this.previousTextRenderingMode) {\n      this.pdfStreamWriter.setTextRenderingMode(tm);\n      this.previousTextRenderingMode = tm;\n    }\n    // Set character spacing.\n    var cs = format != null ? format.characterSpacing : 0;\n    if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n      this.pdfStreamWriter.setCharacterSpacing(cs);\n      this.previousCharacterSpacing = cs;\n    }\n    // Set word spacing.\n    // NOTE: it works only if the space code is equal to 32 (0x20).\n    var ws = format != null ? format.wordSpacing : 0;\n    if (ws !== this.previousWordSpacing) {\n      this.pdfStreamWriter.setWordSpacing(ws);\n      this.previousWordSpacing = ws;\n    }\n  };\n  /**\n   * Calculates `shift value` if the text is vertically aligned.\n   * @private\n   */\n  PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n    var shift = 0;\n    if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          shift = (boundsHeight - textHeight) / 2;\n          break;\n        case PdfVerticalAlignment.Bottom:\n          shift = boundsHeight - textHeight;\n          break;\n      }\n    }\n    return shift;\n  };\n  /* tslint:disable */\n  /**\n   * `Draws layout result`.\n   * @private\n   */\n  PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n    var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, vAlignShift);\n    }\n    var ttfFont = font;\n    var unicode = ttfFont != null && ttfFont.isUnicode;\n    var embed = ttfFont != null && ttfFont.isEmbedFont;\n    var lines = result.lines;\n    for (var i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {\n      var lineInfo = lines[i];\n      var line = lineInfo.text;\n      var lineWidth = lineInfo.width;\n      var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n      hAlignShift += !this.rightToLeft(format) ? lineIndent : 0;\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n      }\n      if (unicode) {\n        this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n      } else {\n        this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n      }\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n      }\n      if (this.isOverloadWithPosition && lines.length > 1) {\n        this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0);\n        layoutRectangle.x = 0;\n        layoutRectangle.width = this.clientSize.width;\n        this.isOverloadWithPosition = false;\n        this.isPointOverload = true;\n      }\n    }\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n    }\n    this.pdfStreamWriter.endText();\n  };\n  /**\n   * `Draws Ascii line`.\n   * @private\n   */\n  PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n    this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var value = '';\n    if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n      for (var i = 0; i < lineInfo.text.length; i++) {\n        if (lineInfo.text[i] === '(') {\n          value += '\\\\\\(';\n        } else if (lineInfo.text[i] === ')') {\n          value += '\\\\\\)';\n        } else {\n          value += lineInfo.text[i];\n        }\n      }\n    }\n    if (value === '') {\n      value = lineInfo.text;\n    }\n    var line = '(' + value + ')';\n    this.pdfStreamWriter.showNextLineText(new PdfString(line));\n  };\n  /**\n   * Draws unicode line.\n   * @private\n   */\n  PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var rtl = format !== null && typeof format !== 'undefined' && format.rightToLeft;\n    var useWordSpace = format !== null && typeof format !== 'undefined' && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify);\n    var ttfFont = font;\n    var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var rtlRender = new RtlRenderer();\n    if (rtl || format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n      var blocks = null;\n      var rightAlign = format !== null && typeof format !== 'undefined' && format.alignment === PdfTextAlignment.Right;\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n        /* tslint:disable-next-line:max-line-length */\n        blocks = rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n      } else {\n        blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n      }\n      var words = null;\n      if (blocks.length > 1) {\n        if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n          /* tslint:disable-next-line:max-line-length */\n          words = rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n        } else {\n          words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n        }\n      } else {\n        words = [line];\n      }\n      this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n    } else {\n      if (useWordSpace) {\n        var result = this.breakUnicodeLine(line, ttfFont, null);\n        var blocks = result.tokens;\n        var words = result.words;\n        this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n      } else {\n        var token = this.convertToUnicode(line, ttfFont);\n        var value = this.getUnicodeString(token);\n        this.streamWriter.showNextLineText(value);\n      }\n    }\n  };\n  /**\n   * Draws array of unicode tokens.\n   */\n  /* tslint:disable */\n  PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n    /* tslint:enable */\n    if (blocks == null) {\n      throw new Error('Argument Null Exception : blocks');\n    }\n    if (words == null) {\n      throw new Error('Argument Null Exception : words');\n    }\n    if (font == null) {\n      throw new Error('Argument Null Exception : font');\n    }\n    this.streamWriter.startNextLine();\n    var x = 0;\n    var xShift = 0;\n    var firstLineIndent = 0;\n    var paragraphIndent = 0;\n    try {\n      if (format !== null && typeof format !== 'undefined') {\n        firstLineIndent = format.firstLineIndent;\n        paragraphIndent = format.paragraphIndent;\n        format.firstLineIndent = 0;\n        format.paragraphIndent = 0;\n      }\n      var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n      var characterSpacing = format != null ? format.characterSpacing : 0;\n      var wordSpace = format !== null && typeof format !== 'undefined' && wordSpacing === 0 ? format.wordSpacing : 0;\n      spaceWidth += characterSpacing + wordSpace;\n      for (var i = 0; i < blocks.length; i++) {\n        var token = blocks[i];\n        var word = words[i];\n        var tokenWidth = 0;\n        if (x !== 0) {\n          this.streamWriter.startNextLine(x, 0);\n        }\n        if (word.length > 0) {\n          tokenWidth += /*Utils.Round(*/font.measureString(word, format).width /*)*/;\n          tokenWidth += characterSpacing;\n          var val = this.getUnicodeString(token);\n          this.streamWriter.showText(val);\n        }\n        if (i !== blocks.length - 1) {\n          x = tokenWidth + spaceWidth;\n          xShift += x;\n        }\n      }\n      // Rolback current line position.\n      if (xShift > 0) {\n        this.streamWriter.startNextLine(-xShift, 0);\n      }\n    } finally {\n      if (format !== null && typeof format !== 'undefined') {\n        format.firstLineIndent = firstLineIndent;\n        format.paragraphIndent = paragraphIndent;\n      }\n    }\n  };\n  /**\n   * Breakes the unicode line to the words and converts symbols to glyphs.\n   */\n  PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n    if (line === null) {\n      throw new Error('Argument Null Exception : line');\n    }\n    words = line.split(null);\n    var tokens = [];\n    for (var i = 0; i < words.length; i++) {\n      // Reconvert string according to unicode standard.\n      var word = words[i];\n      var token = this.convertToUnicode(word, ttfFont);\n      tokens[i] = token;\n    }\n    return {\n      tokens: tokens,\n      words: words\n    };\n  };\n  /**\n   * Creates PdfString from the unicode text.\n   */\n  PdfGraphics.prototype.getUnicodeString = function (token) {\n    if (token === null) {\n      throw new Error('Argument Null Exception : token');\n    }\n    var val = new PdfString(token);\n    val.converted = true;\n    val.encode = InternalEnum.ForceEncoding.Ascii;\n    return val;\n  };\n  /**\n   * Converts to unicode format.\n   */\n  PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n    var token = null;\n    if (text == null) {\n      throw new Error('Argument Null Exception : text');\n    }\n    if (ttfFont == null) {\n      throw new Error('Argument Null Exception : ttfFont');\n    }\n    if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n      var ttfReader = ttfFont.fontInternal.ttfReader;\n      ttfFont.setSymbols(text);\n      token = ttfReader.convertString(text);\n      var bytes = PdfString.toUnicodeArray(token, false);\n      token = PdfString.byteToString(bytes);\n    }\n    return token;\n  };\n  /**\n   * `Justifies` the line if needed.\n   * @private\n   */\n  PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n    var hasWordSpacing = format != null && format.wordSpacing !== 0;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var wordSpace = 0;\n    if (shouldJustify) {\n      // Correct line width.\n      if (hasWordSpacing) {\n        lineWidth -= whitespacesCount * format.wordSpacing;\n      }\n      var difference = boundsWidth - lineWidth;\n      wordSpace = difference / whitespacesCount;\n      this.pdfStreamWriter.setWordSpacing(wordSpace);\n    } else {\n      // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n      if (hasWordSpacing) {\n        this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n      } else {\n        this.pdfStreamWriter.setWordSpacing(0);\n      }\n    }\n    return wordSpace;\n  };\n  /**\n   * `Reset` or reinitialize the current graphic value.\n   * @private\n   */\n  PdfGraphics.prototype.reset = function (size) {\n    this.canvasSize = size;\n    this.streamWriter.clear();\n    this.initialize();\n    this.initializeCoordinates();\n  };\n  /**\n   * Checks whether the line should be `justified`.\n   * @private\n   */\n  PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var justifyStyle = format != null && format.alignment === PdfTextAlignment.Justify;\n    var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var hasSpaces = whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace;\n    var goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0;\n    /* tslint:disable */\n    var shouldJustify = justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify); /* tslint:enable */\n    return shouldJustify;\n  };\n  /* tslint:disable */\n  /**\n   * Emulates `Underline, Strikeout` of the text if needed.\n   * @private\n   */\n  PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n    if (font.underline || font.strikeout) {\n      // Calculate line width.\n      var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n      if (linePen != null) {\n        // Approximate line positions.\n        var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        var underlineYOffset = 0;\n        underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n        var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n        var lines = result.lines;\n        // Run through the text and draw lines.\n        for (var i = 0, len = result.lineCount; i < len; i++) {\n          var lineInfo = lines[i];\n          var line = lineInfo.text;\n          var lineWidth = lineInfo.width;\n          var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n          var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n          hShift += !this.rightToLeft(format) ? lineIndent : 0;\n          var x1 = layoutRectangle.x + hShift;\n          /* tslint:disable */\n          var x2 = !this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n          /* tslint:enable */\n          if (font.underline) {\n            var y = underlineYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            underlineYOffset += result.lineHeight;\n          }\n          if (font.strikeout) {\n            var y = strikeoutYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            strikeoutYOffset += result.lineHeight;\n          }\n          if (this.isPointOverload && lines.length > 1) {\n            layoutRectangle.x = 0;\n            layoutRectangle.width = this.clientSize.width;\n          }\n        }\n        this.isPointOverload = false;\n      }\n    }\n  };\n  /**\n   * `Creates a pen` for drawing lines in the text.\n   * @private\n   */\n  PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n    // Calculate line width.\n    var lineWidth = font.metrics.getSize(format) / 20;\n    var linePen = null;\n    // Create a pen fo the lines.\n    if (pen != null) {\n      linePen = new PdfPen(pen.color, lineWidth);\n    } else if (brush != null) {\n      linePen = new PdfPen(brush, lineWidth);\n    }\n    return linePen;\n  };\n  /**\n   * Return `text rendering mode`.\n   * @private\n   */\n  PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n    var tm = TextRenderingMode.None;\n    if (pen != null && brush != null) {\n      tm = TextRenderingMode.FillStroke;\n    } else if (pen != null) {\n      tm = TextRenderingMode.Stroke;\n    } else {\n      tm = TextRenderingMode.Fill;\n    }\n    if (format != null && format.clipPath) {\n      tm |= TextRenderingMode.ClipFlag;\n    }\n    return tm;\n  };\n  /**\n   * Returns `line indent` for the line.\n   * @private\n   */\n  PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n    var lineIndent = 0;\n    var firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;\n    if (format != null && firstParagraphLine) {\n      lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;\n      lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n    }\n    return lineIndent;\n  };\n  /**\n   * Calculates shift value if the line is `horizontaly aligned`.\n   * @private\n   */\n  PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n    var shift = 0;\n    if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          shift = (boundsWidth - lineWidth) / 2;\n          break;\n        case PdfTextAlignment.Right:\n          shift = boundsWidth - lineWidth;\n          break;\n      }\n    }\n    return shift;\n  };\n  /**\n   * Gets or sets the value that indicates `text direction` mode.\n   * @private\n   */\n  PdfGraphics.prototype.rightToLeft = function (format) {\n    var rtl = format !== null && typeof format !== 'undefined' && format.rightToLeft;\n    if (format !== null && typeof format !== 'undefined') {\n      if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n        rtl = true;\n      }\n    }\n    return rtl;\n  };\n  PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n    if (typeof format === 'undefined') {\n      this.stateControl(pen, brush, font, null);\n    } else {\n      if (brush instanceof PdfGradientBrush) {\n        this.bCSInitialized = false;\n        brush.colorSpace = this.colorSpace;\n      }\n      if (brush instanceof PdfTilingBrush) {\n        this.bCSInitialized = false;\n        brush.graphics.colorSpace = this.colorSpace;\n      }\n      var saveState = false;\n      if (brush !== null) {\n        var solidBrush = brush;\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          if (this.colorSpaceChanged === false) {\n            this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n            this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n            this.colorSpace = this.pageLayer.page.document.colorSpace;\n            this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n            this.colorSpaceChanged = true;\n          }\n        }\n        this.initCurrentColorSpace(this.currentColorSpace);\n      } else if (pen != null) {\n        var pdfPen = pen;\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          /* tslint:disable */\n          this.colorSpace = this.pageLayer.page.document.colorSpace;\n          this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n        }\n        this.initCurrentColorSpace(this.currentColorSpace);\n      }\n      this.penControl(pen, saveState);\n      this.brushControl(brush, saveState);\n      this.fontControl(font, format, saveState);\n    }\n  };\n  /**\n   * Initializes the `current color space`.\n   * @private\n   */\n  PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n    var re = this.getResources.getResources();\n    if (!this.bCSInitialized) {\n      if (this.currentColorSpace != PdfColorSpace.GrayScale) {\n        this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n        this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n        this.bCSInitialized = true;\n      } else {\n        this.pdfStreamWriter.setColorSpace('DeviceGray', true);\n        this.pdfStreamWriter.setColorSpace('DeviceGray', false);\n        this.bCSInitialized = true;\n      }\n    }\n  };\n  /**\n   * Controls the `pen state`.\n   * @private\n   */\n  PdfGraphics.prototype.penControl = function (pen, saveState) {\n    if (pen != null) {\n      this.currentPen = pen;\n      /* tslint:disable */\n      pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n      /* tslint:enable */\n      this.currentPen = pen.clone();\n    }\n  };\n  /**\n   * Controls the `brush state`.\n   * @private\n   */\n  PdfGraphics.prototype.brushControl = function (brush, saveState) {\n    if (brush != null && typeof brush !== 'undefined') {\n      var b = brush.clone();\n      var lgb = b;\n      if (lgb !== null && typeof lgb !== 'undefined' && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {\n        var m = lgb.matrix;\n        var matrix = this.matrix.clone();\n        if (m != null) {\n          m.multiply(matrix);\n          matrix = m;\n        }\n        lgb.matrix = matrix;\n      }\n      this.currentBrush = lgb;\n      var br = brush;\n      /* tslint:disable */\n      b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n      /* tslint:enable */\n      this.currentBrush = brush;\n      brush = null;\n    }\n  };\n  /**\n   * Saves the font and other `font settings`.\n   * @private\n   */\n  PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n    if (font != null) {\n      var curSubSuper = format != null ? format.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:disable */\n      var prevSubSuper = this.currentStringFormat != null ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None; /* tslint:enable */\n      if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n        var resources = this.getResources.getResources();\n        this.currentFont = font;\n        this.currentStringFormat = format;\n        var size = font.metrics.getSize(format);\n        /* tslint:disable */\n        this.isEmfTextScaled = false;\n        var fontName = resources.getName(font);\n        this.pdfStreamWriter.setFont(font, fontName, size);\n      }\n    }\n  };\n  PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n    if (typeof arg2 === 'undefined') {\n      this.istransparencySet = true;\n      this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n    } else {\n      if (this.trasparencies == null) {\n        this.trasparencies = new TemporaryDictionary();\n      }\n      var transp = null;\n      var td = new TransparencyData(arg1, arg2, arg3);\n      if (this.trasparencies.containsKey(td)) {\n        transp = this.trasparencies.getValue(td);\n      }\n      if (transp == null) {\n        transp = new PdfTransparency(arg1, arg2, arg3);\n        this.trasparencies.setValue(td, transp);\n      }\n      var resources = this.getResources.getResources();\n      var name_3 = resources.getName(transp);\n      var sw = this.streamWriter;\n      sw.setGraphicsState(name_3);\n    }\n  };\n  PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n    if (x instanceof RectangleF && typeof y === 'undefined') {\n      this.clipBounds = x;\n      this.pdfStreamWriter.writeComment('Clip margins.');\n      this.pdfStreamWriter.appendRectangle(x);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n      this.translateTransform(x.x, x.y);\n    } else if (typeof x === 'number') {\n      var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n      this.clipBounds = clipArea;\n      this.pdfStreamWriter.writeComment(\"Clip margins.\");\n      this.pdfStreamWriter.appendRectangle(clipArea);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n      this.translateTransform(x, y);\n    }\n  };\n  /**\n   * `Updates y` co-ordinate.\n   * @private\n   */\n  PdfGraphics.prototype.updateY = function (y) {\n    return -y;\n  };\n  /**\n   * Used to `translate the transformation`.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set translate transform\n   * page1.graphics.translateTransform(100, 100);\n   * //\n   * // draw the rectangle after applying translate transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param offsetX The x-coordinate of the translation.\n   * @param offsetY The y-coordinate of the translation.\n   */\n  PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getTranslateTransform(offsetX, offsetY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Translates` coordinates of the input matrix.\n   * @private\n   */\n  PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n    input.translate(x, this.updateY(y));\n    return input;\n  };\n  /* tslint:disable */\n  /**\n   * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // apply scaling trasformation\n   * page1.graphics.scaleTransform(1.5, 2);\n   * //\n   * // draw the rectangle after applying scaling transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param scaleX Scale factor in the x direction.\n   * @param scaleY Scale factor in the y direction.\n   */\n  /* tslint:enable */\n  PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getScaleTransform(scaleX, scaleY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Scales` coordinates of the input matrix.\n   * @private\n   */\n  PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n    if (input == null) {\n      input = new PdfTransformationMatrix();\n    }\n    input.scale(x, y);\n    return input;\n  };\n  /**\n   * Applies the specified `rotation` to the transformation matrix of this Graphics.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set RotateTransform with 25 degree of angle\n   * page1.graphics.rotateTransform(25);\n   * //\n   * // draw the rectangle after RotateTransformation\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param angle Angle of rotation in degrees.\n   */\n  PdfGraphics.prototype.rotateTransform = function (angle) {\n    var matrix = new PdfTransformationMatrix();\n    this.getRotateTransform(angle, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Initializes coordinate system`.\n   * @private\n   */\n  PdfGraphics.prototype.initializeCoordinates = function () {\n    // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n    this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.');\n    // Translate co-ordinates only, don't flip.\n    if (this.mediaBoxUpperRightBound !== -this.size.height) {\n      if (this.cropBox == null) {\n        if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n          this.translateTransform(0, this.updateY(this.size.height));\n        } else {\n          this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n        }\n      }\n    }\n  };\n  /**\n   * `Rotates` coordinates of the input matrix.\n   * @private\n   */\n  PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n    if (input == null || typeof input === 'undefined') {\n      input = new PdfTransformationMatrix();\n    }\n    input.rotate(this.updateY(angle));\n    return input;\n  };\n  /**\n   * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // save the graphics state\n   * let state1 : PdfGraphicsState = page1.graphics.save();\n   * //\n   * page1.graphics.scaleTransform(1.5, 2);\n   * // draw the rectangle\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // restore the graphics state\n   * page1.graphics.restore(state1);\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.save = function () {\n    var state = new PdfGraphicsState(this, this.matrix.clone());\n    state.brush = this.currentBrush;\n    state.pen = this.currentPen;\n    state.font = this.currentFont;\n    state.colorSpace = this.currentColorSpace;\n    state.characterSpacing = this.previousCharacterSpacing;\n    state.wordSpacing = this.previousWordSpacing;\n    state.textScaling = this.previousTextScaling;\n    state.textRenderingMode = this.previousTextRenderingMode;\n    this.graphicsState.push(state);\n    this.pdfStreamWriter.saveGraphicsState();\n    return state;\n  };\n  PdfGraphics.prototype.restore = function (state) {\n    if (typeof state === 'undefined') {\n      if (this.graphicsState.length > 0) {\n        this.doRestoreState();\n      }\n    } else {\n      if (this.graphicsState.indexOf(state) !== -1) {\n        for (;;) {\n          if (this.graphicsState.length === 0) {\n            break;\n          }\n          var popState = this.doRestoreState();\n          if (popState === state) {\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * `Restores graphics state`.\n   * @private\n   */\n  PdfGraphics.prototype.doRestoreState = function () {\n    var state = this.graphicsState.pop();\n    this.transformationMatrix = state.matrix;\n    this.currentBrush = state.brush;\n    this.currentPen = state.pen;\n    this.currentFont = state.font;\n    this.currentColorSpace = state.colorSpace;\n    this.previousCharacterSpacing = state.characterSpacing;\n    this.previousWordSpacing = state.wordSpacing;\n    this.previousTextScaling = state.textScaling;\n    this.previousTextRenderingMode = state.textRenderingMode;\n    this.pdfStreamWriter.restoreGraphicsState();\n    return state;\n  };\n  /* tslint:enable */\n  /**\n   * `Draws the specified path`, using its original physical size, at the location specified by a coordinate pair.\n   * ```typescript\n   * // create a new PDF document.\n   * let document : PdfDocument = new PdfDocument();\n   * // add a page to the document.\n   * let page1 : PdfPage = document.pages.add();\n   * //Create new PDF path.\n   * let path : PdfPath = new PdfPath();\n   * //Add line path points.\n   * path.addLine(new PointF(10, 100), new PointF(10, 200));\n   * path.addLine(new PointF(100, 100), new PointF(100, 200));\n   * path.addLine(new PointF(100, 200), new PointF(55, 150));\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(255, 0, 0));\n   * // set brush\n   * let brush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n   * // draw the path\n   * page1.graphics.drawPath(pen, brush, path);\n   * //\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param pen Color of the text.\n   * @param brush Color of the text.\n   * @param path Draw path.\n   */\n  PdfGraphics.prototype.drawPath = function (pen, brush, path) {\n    if (brush instanceof PdfTilingBrush) {\n      this.bCSInitialized = false;\n      brush.graphics.colorSpace = this.colorSpace;\n    } else if (brush instanceof PdfGradientBrush) {\n      this.bCSInitialized = false;\n      brush.colorSpace = this.colorSpace;\n    }\n    this.stateControl(pen, brush, null);\n    this.buildUpPath(path.pathPoints, path.pathTypes);\n    this.drawPathHelper(pen, brush, path.fillMode, false);\n  };\n  /* tslint:disable-next-line:max-line-length */\n  PdfGraphics.prototype.drawArc = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n    if (arg2 instanceof RectangleF) {\n      this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);\n    } else {\n      if (arg7 !== 0) {\n        this.stateControl(arg1, null, null);\n        this.constructArcPath(arg2, arg3, arg2 + arg4, arg3 + arg5, arg6, arg7);\n        this.drawPathHelper(arg1, null, false);\n      }\n    }\n  };\n  /**\n   * Builds up the path.\n   * @private\n   */\n  PdfGraphics.prototype.buildUpPath = function (arg1, arg2) {\n    var cnt = arg1.length;\n    for (var i = 0; i < cnt; ++i) {\n      var typeValue = 0;\n      var point = arg1[i];\n      switch (arg2[i] & PdfGraphics.pathTypesValuesMask) {\n        case PathPointType.Start:\n          this.pdfStreamWriter.beginPath(point.x, point.y);\n          break;\n        case PathPointType.Bezier3:\n          var p2 = new PointF(0, 0);\n          var p3 = new PointF(0, 0);\n          var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);\n          this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);\n          i = result1.i;\n          break;\n        case PathPointType.Line:\n          this.pdfStreamWriter.appendLineSegment(point);\n          break;\n        default:\n          throw new Error('ArithmeticException - Incorrect path formation.');\n      }\n      typeValue = arg2[i];\n      this.checkFlags(typeValue);\n    }\n  };\n  /**\n   * Gets the bezier points from respective arrays.\n   * @private\n   */\n  /* tslint:disable-next-line:max-line-length */\n  PdfGraphics.prototype.getBezierPoints = function (points, types, i, p2, p3) {\n    var errorMsg = 'Malforming path.';\n    ++i;\n    if ((types[i] & PdfGraphics.pathTypesValuesMask) === PathPointType.Bezier3) {\n      p2 = points[i];\n      ++i;\n      if ((types[i] & PdfGraphics.pathTypesValuesMask) === PathPointType.Bezier3) {\n        p3 = points[i];\n      } else {\n        throw new Error('ArgumentException : errorMsg');\n      }\n    } else {\n      throw new Error('ArgumentException : errorMsg');\n    }\n    return {\n      i: i,\n      p2: p2,\n      p3: p3\n    };\n  };\n  /**\n   * Checks path point type flags.\n   * @private\n   */\n  PdfGraphics.prototype.checkFlags = function (type) {\n    if ((type & PathPointType.CloseSubpath) === PathPointType.CloseSubpath) {\n      this.pdfStreamWriter.closePath();\n    }\n  };\n  /**\n   * Constructs the arc path using Bezier curves.\n   * @private\n   */\n  PdfGraphics.prototype.constructArcPath = function (x1, y1, x2, y2, startAng, sweepAngle) {\n    var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);\n    if (points.length === 0) {\n      return;\n    }\n    var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n    this.pdfStreamWriter.beginPath(pt[0], pt[1]);\n    var i = 0;\n    for (i = 0; i < points.length; i = i + 8) {\n      pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];\n      this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);\n    }\n  };\n  /**\n   * Gets the bezier points for arc constructing.\n   * @private\n   */\n  PdfGraphics.prototype.getBezierArc = function (numX1, numY1, numX2, numY2, s1, e1) {\n    if (numX1 > numX2) {\n      var tmp = void 0;\n      tmp = numX1;\n      numX1 = numX2;\n      numX2 = tmp;\n    }\n    if (numY2 > numY1) {\n      var tmp = void 0;\n      tmp = numY1;\n      numY1 = numY2;\n      numY2 = tmp;\n    }\n    var fragAngle1;\n    var numFragments;\n    if (Math.abs(e1) <= 90) {\n      fragAngle1 = e1;\n      numFragments = 1;\n    } else {\n      numFragments = Math.ceil(Math.abs(e1) / 90);\n      fragAngle1 = e1 / numFragments;\n    }\n    var xcen = (numX1 + numX2) / 2;\n    var ycen = (numY1 + numY2) / 2;\n    var rx = (numX2 - numX1) / 2;\n    var ry = (numY2 - numY1) / 2;\n    var halfAng = fragAngle1 * (Math.PI / 360);\n    var kappa = Math.abs(4.0 / 3.0 * (1.0 - Math.cos(halfAng)) / Math.sin(halfAng));\n    var pointsList = [];\n    for (var i = 0; i < numFragments; i++) {\n      var thetaValue0 = (s1 + i * fragAngle1) * (Math.PI / 180);\n      var thetaValue1 = (s1 + (i + 1) * fragAngle1) * (Math.PI / 180);\n      var cos0 = Math.cos(thetaValue0);\n      var cos1 = Math.cos(thetaValue1);\n      var sin0 = Math.sin(thetaValue0);\n      var sin1 = Math.sin(thetaValue1);\n      if (fragAngle1 > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);\n      } else {\n        /* tslint:disable-next-line:max-line-length */\n        pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);\n      }\n    }\n    return pointsList;\n  };\n  // Constants\n  /**\n   * Specifies the mask of `path type values`.\n   * @private\n   */\n  PdfGraphics.pathTypesValuesMask = 0xf;\n  /**\n   * Checks whether the object is `transparencyObject`.\n   * @hidden\n   * @private\n   */\n  PdfGraphics.transparencyObject = false;\n  return PdfGraphics;\n}();\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\nvar GetResourceEventHandler = /** @class */function () {\n  /**\n   * Initialize instance of `GetResourceEventHandler` class.\n   * Alternate for event handlers and delegates.\n   * @private\n   */\n  function GetResourceEventHandler(sender) {\n    this.sender = sender;\n  }\n  /**\n   * Return the instance of `PdfResources` class.\n   * @private\n   */\n  GetResourceEventHandler.prototype.getResources = function () {\n    return this.sender.getResources();\n  };\n  return GetResourceEventHandler;\n}();\nexport { GetResourceEventHandler };\nvar PdfGraphicsState = /** @class */function () {\n  function PdfGraphicsState(graphics, matrix) {\n    /**\n     * Stores `previous rendering mode`.\n     * @default TextRenderingMode.Fill\n     * @private\n     */\n    this.internalTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * `Previous character spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n    this.internalCharacterSpacing = 0.0;\n    /**\n     * `Previous word spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n    this.internalWordSpacing = 0.0;\n    /**\n     * The previously used `text scaling value`.\n     * @default 100.0\n     * @private\n     */\n    this.internalTextScaling = 100.0;\n    /**\n     * `Current color space`.\n     * @default PdfColorSpace.Rgb\n     * @private\n     */\n    this.pdfColorSpace = PdfColorSpace.Rgb;\n    if (typeof graphics !== 'undefined') {\n      this.pdfGraphics = graphics;\n      this.transformationMatrix = matrix;\n    }\n  }\n  Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n    // Properties\n    /**\n     * Gets the parent `graphics object`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n    /**\n     * Gets the `current matrix`.\n     * @private\n     */\n    get: function () {\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets the `current character spacing`.\n     * @private\n     */\n    get: function () {\n      return this.internalCharacterSpacing;\n    },\n    set: function (value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets the `word spacing` value.\n     * @private\n     */\n    get: function () {\n      return this.internalWordSpacing;\n    },\n    set: function (value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n    /**\n     * Gets or sets the `text scaling` value.\n     * @private\n     */\n    get: function () {\n      return this.internalTextScaling;\n    },\n    set: function (value) {\n      this.internalTextScaling = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n    /**\n     * Gets or sets the `current pen` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfPen;\n    },\n    set: function (value) {\n      this.pdfPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n    /**\n     * Gets or sets the `brush`.\n     * @private\n     */\n    get: function () {\n      return this.pdfBrush;\n    },\n    set: function (value) {\n      this.pdfBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n    /**\n     * Gets or sets the `current font` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfFont;\n    },\n    set: function (value) {\n      this.pdfFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the `current color space` value.\n     * @private\n     */\n    get: function () {\n      return this.pdfColorSpace;\n    },\n    set: function (value) {\n      this.pdfColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n    /**\n     * Gets or sets the `text rendering mode`.\n     * @private\n     */\n    get: function () {\n      return this.internalTextRenderingMode;\n    },\n    set: function (value) {\n      this.internalTextRenderingMode = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGraphicsState;\n}();\nexport { PdfGraphicsState };\nvar TransparencyData = /** @class */function () {\n  // Constructors\n  /**\n   * Initializes a new instance of the `TransparencyData` class.\n   * @private\n   */\n  function TransparencyData(alphaPen, alphaBrush, blendMode) {\n    this.alphaPen = alphaPen;\n    this.alphaBrush = alphaBrush;\n    this.blendMode = blendMode;\n  }\n  return TransparencyData;\n}();","map":{"version":3,"names":["PdfColorSpace","TextRenderingMode","PdfFillMode","PdfTextAlignment","PdfVerticalAlignment","PdfBlendMode","PdfSubSuperScript","PdfStreamWriter","PdfPen","PdfBrush","PdfSolidBrush","PdfFont","PdfTransformationMatrix","PointF","SizeF","RectangleF","ProcedureSets","PdfString","PdfStringFormat","TemporaryDictionary","PdfTransparency","PdfStringLayouter","LineType","DictionaryProperties","StringTokenizer","PdfAutomaticFieldInfoCollection","PdfAutomaticFieldInfo","Operators","UnicodeTrueTypeFont","InternalEnum","RtlRenderer","PdfTextDirection","PathPointType","PdfGradientBrush","PdfTilingBrush","PdfGraphics","arg1","arg2","arg3","currentColorSpace","Rgb","previousTextRenderingMode","Fill","previousCharacterSpacing","previousWordSpacing","previousTextScaling","procedureSets","isNormalRender","isUseFontSize","isItalic","isEmfTextScaled","isEmf","isEmfPlus","isBaselineFormat","emfScalingFactor","colorSpaceChanged","dictionaryProperties","isOverloadWithPosition","isPointOverload","currentColorSpaces","isImageOptimized","graphicsState","istransparencySet","internalAutomaticFields","startCutIndex","getResources","canvasSize","pdfStreamWriter","initialize","Object","defineProperty","prototype","get","pdfStringLayoutResult","enumerable","configurable","internalMediaBoxUpperRightBound","set","value","clipBounds","width","height","transformationMatrix","pageLayer","page","bStateSaved","currentPen","currentBrush","currentFont","bCSInitialized","currentStringFormat","size","requireProcedureSet","pdf","drawPdfTemplate","template","location","Error","scaleX","scaleY","bNeedScale","state","save","matrix","getTranslateTransform","x","y","getScaleTransform","modifyCtm","resources","name_1","getName","executeObject","restore","g","graphics","index","automaticFields","length","fieldInfo","newLocation","scalingX","scalingY","add","field","dictionary","modify","imageB","imageC","imageI","text","drawString","arg4","arg5","arg6","arg7","arg8","arg9","clientSize","temparg3","temparg4","temparg5","temparg6","temparg7","temparg8","temparg9","layouter","result","layout","empty","rect","checkCorrectLayoutRectangle","actualSize","drawStringLayoutResult","drawLine","temparg2","stateControl","sw","streamWriter","beginPath","appendLineSegment","strokePath","drawRectangle","xOffset","offsetX","yOffset","layer","offsetY","colorSpace","color","isEmpty","temparg1","appendRectangle","drawPathHelper","Winding","isPen","isBrush","isEvenOdd","Alternate","fillStrokePath","endPath","fillPath","drawImage","physicalDimension","write","document","name_2","setResources","restoreState","newLine","resource","getLineBounds","lineIndex","font","layoutRectangle","format","bounds","lineCount","line","lines","vShift","getTextVerticalAlignShift","lineHeight","lineWidth","hShift","getHorizontalAlignShift","lineIndent","getLineIndent","rightToLeft","shouldJustify","textSize","layoutedRectangle","alignment","Center","Right","lineAlignment","Middle","Bottom","setLayer","beginSave","pageSave","i","performDraw","pen","brush","applyStringSettings","textScaling","horizontalScalingFactor","setTextScaling","lineSpacing","subScript","subSuperScript","SubScript","shift","metrics","getDescent","getAscent","startNextLine","setLeading","resultHeight","remainingString","j","drawLayoutResult","underlineStrikeoutText","getNextPage","section","currentPage","nextPage","indexOf","count","getPages","setClip","rectangle","mode","clipPath","setLineWidth","tm","getTextRenderingMode","beginText","setTextRenderingMode","cs","characterSpacing","setCharacterSpacing","ws","wordSpacing","setWordSpacing","textHeight","boundsHeight","Top","vAlignShift","ttfFont","unicode","isUnicode","embed","isEmbedFont","len","lineInfo","hAlignShift","drawUnicodeLine","drawAsciiLine","endText","justifyLine","showNextLineText","rtl","useWordSpace","Justify","rtlRender","textDirection","None","blocks","rightAlign","RightToLeft","words","splitLayout","drawUnicodeBlocks","breakUnicodeLine","tokens","token","convertToUnicode","getUnicodeString","xShift","firstLineIndent","paragraphIndent","spaceWidth","getCharWidth","whiteSpace","wordSpace","word","tokenWidth","measureString","val","showText","split","converted","encode","ForceEncoding","Ascii","fontInternal","ttfReader","setSymbols","convertString","bytes","toUnicodeArray","byteToString","boundsWidth","hasWordSpacing","symbols","spaces","whitespacesCount","getCharsCount","difference","reset","clear","initializeCoordinates","justifyStyle","goodWidth","hasSpaces","goodLineBreakStyle","lineType","LayoutBreak","underline","strikeout","linePen","createUnderlineStikeoutPen","underlineYOffset","strikeoutYOffset","getHeight","x1","x2","getSize","FillStroke","Stroke","ClipFlag","layoutBounds","firstLine","firstParagraphLine","FirstParagraphLine","Math","min","Left","saveState","solidBrush","lastDocumentCS","lastGraphicsCS","initCurrentColorSpace","pdfPen","penControl","brushControl","fontControl","colorspace","re","GrayScale","setColorSpace","monitorChanges","clone","b","lgb","m","multiply","br","curSubSuper","prevSubSuper","fontName","setFont","setTransparency","Normal","trasparencies","transp","td","TransparencyData","containsKey","getValue","setValue","name_3","setGraphicsState","clipTranslateMargins","left","top","right","bottom","writeComment","closePath","translateTransform","clipArea","updateY","input","translate","scaleTransform","scale","rotateTransform","angle","getRotateTransform","mediaBoxUpperRightBound","cropBox","rotate","PdfGraphicsState","textRenderingMode","push","saveGraphicsState","doRestoreState","popState","pop","restoreGraphicsState","drawPath","path","buildUpPath","pathPoints","pathTypes","fillMode","drawArc","constructArcPath","cnt","typeValue","point","pathTypesValuesMask","Start","Bezier3","p2","p3","result1","getBezierPoints","appendBezierSegment","Line","checkFlags","points","types","errorMsg","type","CloseSubpath","y1","y2","startAng","sweepAngle","getBezierArc","pt","numX1","numY1","numX2","numY2","s1","e1","tmp","fragAngle1","numFragments","abs","ceil","xcen","ycen","rx","ry","halfAng","PI","kappa","cos","sin","pointsList","thetaValue0","thetaValue1","cos0","cos1","sin0","sin1","transparencyObject","GetResourceEventHandler","sender","internalTextRenderingMode","internalCharacterSpacing","internalWordSpacing","internalTextScaling","pdfColorSpace","pdfGraphics","pdfBrush","pdfFont","alphaPen","alphaBrush","blendMode"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-graphics.js"],"sourcesContent":["/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\nimport { PathPointType } from './figures/enum';\nimport { PdfGradientBrush } from './../../implementation/graphics/brushes/pdf-gradient-brush';\nimport { PdfTilingBrush } from './brushes/pdf-tiling-brush';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */ (function () {\n    function PdfGraphics(arg1, arg2, arg3) {\n        /**\n         * Represents the `Current color space`.\n         * @private\n         */\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Stores `previous rendering mode`.\n         * @private\n         */\n        this.previousTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * Previous `character spacing` value or 0.\n         * @private\n         */\n        this.previousCharacterSpacing = 0.0;\n        /**\n         * Previous `word spacing` value or 0.\n         * @private\n         */\n        this.previousWordSpacing = 0.0;\n        /**\n         * The `previously used text scaling` value.\n         * @private\n         */\n        this.previousTextScaling = 100.0;\n        /**\n         * Instance of `ProcedureSets` class.\n         * @private\n         */\n        this.procedureSets = new ProcedureSets();\n        /**\n         * To check wihether it is a `direct text rendering`.\n         * @default true\n         * @private\n         */\n        this.isNormalRender = true;\n        /**\n         * check whether to `use font size` to calculate the shift.\n         * @default false\n         * @private\n         */\n        this.isUseFontSize = false;\n        /**\n         * check whether the font is in `italic type`.\n         * @default false\n         * @private\n         */\n        this.isItalic = false;\n        /**\n         * Check whether it is an `emf Text Matrix`.\n         * @default false\n         * @private\n         */\n        this.isEmfTextScaled = false;\n        /**\n         * Check whether it is an `emf` call.\n         * @default false\n         * @private\n         */\n        this.isEmf = false;\n        /**\n         * Check whether it is an `emf plus` call.\n         * @default false\n         * @private\n         */\n        this.isEmfPlus = false;\n        /**\n         * Check whether it is in `base line format`.\n         * @default true\n         * @private\n         */\n        this.isBaselineFormat = true;\n        /**\n         * Emf Text `Scaling Factor`.\n         * @private\n         */\n        this.emfScalingFactor = new SizeF(0, 0);\n        /**\n         * To check whether the `last color space` of document and garphics is saved.\n         * @private\n         */\n        this.colorSpaceChanged = false;\n        /**\n         * Stores an instance of `DictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isPointOverload = false;\n        /**\n         * Current colorspaces.\n         * @hidden\n         * @private\n         */\n        this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n        /**\n         * Checks the current image `is optimized` or not.\n         * @default false.\n         * @private\n         */\n        this.isImageOptimized = false;\n        /**\n         * Stores the `graphics states`.\n         * @private\n         */\n        this.graphicsState = [];\n        /**\n         * Indicates whether the object `had trasparency`.\n         * @default false\n         * @private\n         */\n        this.istransparencySet = false;\n        /**\n         * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n         * @default null\n         * @private\n         */\n        this.internalAutomaticFields = null;\n        /**\n         * Stores the index of the start line that should draw with in the next page.\n         * @private\n         */\n        this.startCutIndex = -1;\n        this.getResources = arg2;\n        this.canvasSize = arg1;\n        if (arg3 instanceof PdfStreamWriter) {\n            this.pdfStreamWriter = arg3;\n        }\n        else {\n            this.pdfStreamWriter = new PdfStreamWriter(arg3);\n        }\n        this.initialize();\n    }\n    Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n        //  Properties\n        /**\n         * Returns the `result` after drawing string.\n         * @private\n         */\n        get: function () {\n            return this.pdfStringLayoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"size\", {\n        /**\n         * Gets the `size` of the canvas.\n         * @private\n         */\n        get: function () {\n            return this.canvasSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n        /**\n         * Gets and Sets the value of `MediaBox upper right bound`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n                this.internalMediaBoxUpperRightBound = 0;\n            }\n            return this.internalMediaBoxUpperRightBound;\n        },\n        set: function (value) {\n            this.internalMediaBoxUpperRightBound = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n        /**\n         * Gets the `size` of the canvas reduced by margins and page templates.\n         * @private\n         */\n        get: function () {\n            return new SizeF(this.clipBounds.width, this.clipBounds.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the current `color space` of the document\n         * @private\n         */\n        get: function () {\n            return this.currentColorSpace;\n        },\n        set: function (value) {\n            this.currentColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n        /**\n         * Gets the `stream writer`.\n         * @private\n         */\n        get: function () {\n            return this.pdfStreamWriter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n        /**\n         * Gets the `transformation matrix` reflecting current transformation.\n         * @private\n         */\n        get: function () {\n            if (this.transformationMatrix == null) {\n                this.transformationMatrix = new PdfTransformationMatrix();\n            }\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n        /**\n         * Gets the `layer` for the graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"page\", {\n        /**\n         * Gets the `page` for this graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer.page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n        get: function () {\n            if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n                this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n            }\n            return this.internalAutomaticFields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Initializes` this instance.\n     * @private\n     */\n    PdfGraphics.prototype.initialize = function () {\n        this.bStateSaved = false;\n        this.currentPen = null;\n        this.currentBrush = null;\n        this.currentFont = null;\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        this.bCSInitialized = false;\n        this.transformationMatrix = null;\n        this.previousTextRenderingMode = (-1); //.Fill;\n        this.previousCharacterSpacing = -1.0;\n        this.previousWordSpacing = -1.0;\n        this.previousTextScaling = -100.0;\n        // this.m_trasparencies = null;\n        this.currentStringFormat = null;\n        this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    };\n    PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n        if (typeof size === 'undefined') {\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            this.drawPdfTemplate(template, location, template.size);\n        }\n        else {\n            // let crossTable : PdfCrossTable = null;\n            // if (this.pageLayer != null) {\n            //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n            // }\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            var scaleX = (template.width > 0) ? size.width / template.width : 1;\n            var scaleY = (template.height > 0) ? size.height / template.height : 1;\n            var bNeedScale = !(scaleX === 1 && scaleY === 1);\n            // Save state.\n            var state = this.save();\n            // Take into consideration that rect location is bottom/left.\n            var matrix = new PdfTransformationMatrix();\n            if (this.pageLayer != null) {\n                this.getTranslateTransform(location.x, location.y + size.height, matrix);\n            }\n            if (bNeedScale) {\n                this.getScaleTransform(scaleX, scaleY, matrix);\n            }\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            var name_1 = resources.getName(template);\n            this.pdfStreamWriter.executeObject(name_1);\n            // Restore state.\n            this.restore(state);\n            //Transfer automatic fields from template.\n            var g = template.graphics;\n            if (g != null) {\n                for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n                    var fieldInfo = g.automaticFields.automaticFields[index];\n                    var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n                    var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n                    var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n                    this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n                    this.page.dictionary.modify();\n                }\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    /* tslint:disable */\n    /**\n     * @public\n     */\n    PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n        if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n            this.isOverloadWithPosition = true;\n            this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, (this.clientSize.width - arg5), 0, arg7);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            var temparg7 = arg7;\n            var temparg8 = arg8;\n            var temparg9 = arg9;\n            var layouter = new PdfStringLayouter();\n            var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n            if (!result.empty) {\n                var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n                if (temparg7 <= 0) {\n                    temparg5 = rect.x;\n                    temparg7 = rect.width;\n                }\n                if (temparg8 <= 0) {\n                    temparg6 = rect.y;\n                    temparg8 = rect.height;\n                }\n                this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n                this.isEmfTextScaled = false;\n                this.emfScalingFactor = new SizeF(0, 0);\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n            this.isNormalRender = true;\n            this.pdfStringLayoutResult = result;\n            this.isUseFontSize = false;\n        }\n    }; /* tslint:enable */\n    PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n        if (arg2 instanceof PointF) {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            this.stateControl(arg1, null, null);\n            var sw = this.streamWriter;\n            sw.beginPath(temparg2, temparg3);\n            sw.appendLineSegment(temparg4, temparg5);\n            sw.strokePath();\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n        }\n        else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            if ((arg2 instanceof PdfTilingBrush)) {\n                this.bCSInitialized = false;\n                var xOffset = (this.matrix.matrix.offsetX + temparg3);\n                var yOffset = void 0;\n                if (((this.layer != null) && (this.layer.page != null))) {\n                    yOffset = ((this.layer.page.size.height - this.matrix.matrix.offsetY) + temparg4);\n                }\n                else {\n                    yOffset = ((this.clientSize.height - this.matrix.matrix.offsetY) + temparg4);\n                }\n                (arg2).location = new PointF(xOffset, yOffset);\n                (arg2).graphics.colorSpace = this.colorSpace;\n            }\n            else if ((arg2 instanceof PdfGradientBrush)) {\n                arg2.colorSpace = this.colorSpace;\n            }\n            if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n                arg2 = null;\n            }\n            var temparg1 = arg1;\n            var temparg2 = arg2;\n            this.stateControl(temparg1, temparg2, null);\n            this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n            this.drawPathHelper(temparg1, temparg2, false);\n        }\n    };\n    PdfGraphics.prototype.drawPathHelper = function (arg1, arg2, arg3, arg4) {\n        if (typeof arg3 === 'boolean') {\n            var temparg3 = arg3;\n            this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var isPen = arg1 != null;\n            var isBrush = arg2 != null;\n            var isEvenOdd = (temparg3 === PdfFillMode.Alternate);\n            if (isPen && isBrush) {\n                this.streamWriter.fillStrokePath(isEvenOdd);\n            }\n            else if (!isPen && !isBrush) {\n                this.streamWriter.endPath();\n            }\n            else if (isPen) {\n                this.streamWriter.strokePath();\n            }\n            else {\n                this.streamWriter.fillPath(isEvenOdd);\n            }\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n        if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            var size = arg1.physicalDimension;\n            this.drawImage(arg1, arg2, arg3, size.width, size.height);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            arg1.save();\n            var matrix = new PdfTransformationMatrix();\n            this.getTranslateTransform(temparg2, (temparg3 + temparg5), matrix);\n            this.getScaleTransform(arg4, arg5, matrix);\n            this.pdfStreamWriter.write('q');\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n                resources.document = this.page.document;\n            }\n            var name_2 = resources.getName(arg1);\n            if (typeof this.pageLayer !== 'undefined') {\n                this.page.setResources(resources);\n            }\n            this.pdfStreamWriter.executeObject(name_2);\n            this.pdfStreamWriter.write(Operators.restoreState);\n            this.pdfStreamWriter.write(Operators.newLine);\n            var resource = this.getResources.getResources();\n            resource.requireProcedureSet(this.procedureSets.imageB);\n            resource.requireProcedureSet(this.procedureSets.imageC);\n            resource.requireProcedureSet(this.procedureSets.imageI);\n            resource.requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    //Implementation\n    /* tslint:disable */\n    /**\n     * Returns `bounds` of the line info.\n     * @private\n     */\n    PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n        var bounds;\n        if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n            var line = result.lines[lineIndex];\n            var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n            var y = vShift + layoutRectangle.y + (result.lineHeight * lineIndex);\n            var lineWidth = line.width;\n            var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(line, format, layoutRectangle, (lineIndex === 0));\n            hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            var x = layoutRectangle.x + hShift;\n            /* tslint:disable */\n            var width = (!this.shouldJustify(line, layoutRectangle.width, format)) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent; /* tslint:enable */\n            var height = result.lineHeight;\n            bounds = new RectangleF(x, y, width, height);\n        }\n        else {\n            bounds = new RectangleF(0, 0, 0, 0);\n        }\n        return bounds;\n    };\n    /**\n     * Creates `lay outed rectangle` depending on the text settings.\n     * @private\n     */\n    PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n        var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n        if (format != null) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    layoutedRectangle.x -= layoutedRectangle.width / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    layoutedRectangle.x -= layoutedRectangle.width;\n                    break;\n            }\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    layoutedRectangle.y -= layoutedRectangle.height / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    layoutedRectangle.y -= layoutedRectangle.height;\n                    break;\n            }\n        }\n        return layoutedRectangle;\n    };\n    /**\n     * Sets the `layer` for the graphics.\n     * @private\n     */\n    PdfGraphics.prototype.setLayer = function (layer) {\n        this.pageLayer = layer;\n        var page = layer.page;\n        if (page != null && typeof page !== 'undefined') {\n            page.beginSave = this.pageSave;\n        }\n    };\n    /**\n     * Adding page number field before page saving.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.pageSave = function (page) {\n        if (page.graphics.automaticFields != null) {\n            for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n                var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n                fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n            }\n        }\n    };\n    /**\n     * `Draws a layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n        if (!result.empty) {\n            this.applyStringSettings(font, pen, brush, format, layoutRectangle);\n            // Set text scaling\n            var textScaling = (format != null) ? format.horizontalScalingFactor : 100.0;\n            if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.setTextScaling(textScaling);\n                this.previousTextScaling = textScaling;\n            }\n            var height = (format == null || format.lineSpacing === 0) ? font.height : format.lineSpacing + font.height;\n            var subScript = (format != null && format.subSuperScript === PdfSubSuperScript.SubScript);\n            var shift = 0;\n            shift = (subScript) ? height - (font.height + font.metrics.getDescent(format)) : (height - font.metrics.getAscent(format));\n            this.shift = shift;\n            this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n            this.pdfStreamWriter.setLeading(+height);\n            var resultHeight = 0;\n            var remainingString = '';\n            for (var i = 0; i < result.lines.length; i++) {\n                resultHeight += result.lineHeight;\n                if ((layoutRectangle.y + resultHeight) > this.clientSize.height) {\n                    this.startCutIndex = i;\n                    break;\n                }\n            }\n            for (var j = this.startCutIndex; (j < result.lines.length && j >= 0); j++) {\n                remainingString += result.lines[j].text;\n            }\n            var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n            this.drawLayoutResult(result, font, format, layoutRectangle);\n            this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n            this.isEmfPlus = false;\n            this.isUseFontSize = false;\n            if (this.startCutIndex !== -1) {\n                var page = this.getNextPage();\n                page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n            }\n        }\n        else {\n            throw new Error('ArgumentNullException:result');\n        }\n    };\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGraphics.prototype.getNextPage = function () {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        return nextPage;\n    };\n    PdfGraphics.prototype.setClip = function (rectangle, mode) {\n        if (typeof mode === 'undefined') {\n            this.setClip(rectangle, PdfFillMode.Winding);\n        }\n        else {\n            this.pdfStreamWriter.appendRectangle(rectangle);\n            this.pdfStreamWriter.clipPath((mode === PdfFillMode.Alternate));\n        }\n    };\n    /**\n     * Applies all the `text settings`.\n     * @private\n     */\n    PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n        if (brush instanceof PdfTilingBrush) {\n            this.bCSInitialized = false;\n            brush.graphics.colorSpace = this.colorSpace;\n        }\n        else if ((brush instanceof PdfGradientBrush)) {\n            this.bCSInitialized = false;\n            brush.colorSpace = this.colorSpace;\n        }\n        var setLineWidth = false;\n        var tm = this.getTextRenderingMode(pen, brush, format);\n        this.stateControl(pen, brush, font, format);\n        this.pdfStreamWriter.beginText();\n        if ((tm) !== this.previousTextRenderingMode) {\n            this.pdfStreamWriter.setTextRenderingMode(tm);\n            this.previousTextRenderingMode = tm;\n        }\n        // Set character spacing.\n        var cs = (format != null) ? format.characterSpacing : 0;\n        if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n            this.pdfStreamWriter.setCharacterSpacing(cs);\n            this.previousCharacterSpacing = cs;\n        }\n        // Set word spacing.\n        // NOTE: it works only if the space code is equal to 32 (0x20).\n        var ws = (format != null) ? format.wordSpacing : 0;\n        if (ws !== this.previousWordSpacing) {\n            this.pdfStreamWriter.setWordSpacing(ws);\n            this.previousWordSpacing = ws;\n        }\n    };\n    /**\n     * Calculates `shift value` if the text is vertically aligned.\n     * @private\n     */\n    PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n        var shift = 0;\n        if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    shift = (boundsHeight - textHeight) / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    shift = boundsHeight - textHeight;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /* tslint:disable */\n    /**\n     * `Draws layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n        var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, vAlignShift);\n        }\n        var ttfFont = font;\n        var unicode = (ttfFont != null && ttfFont.isUnicode);\n        var embed = (ttfFont != null && ttfFont.isEmbedFont);\n        var lines = result.lines;\n        for (var i = 0, len = lines.length; (i < len && i !== this.startCutIndex); i++) {\n            var lineInfo = lines[i];\n            var line = lineInfo.text;\n            var lineWidth = lineInfo.width;\n            var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n            hAlignShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n            }\n            if (unicode) {\n                this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n            }\n            else {\n                this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n            }\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n            }\n            if (this.isOverloadWithPosition && lines.length > 1) {\n                this.pdfStreamWriter.startNextLine(-(layoutRectangle.x), 0);\n                layoutRectangle.x = 0;\n                layoutRectangle.width = this.clientSize.width;\n                this.isOverloadWithPosition = false;\n                this.isPointOverload = true;\n            }\n        }\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n        }\n        this.pdfStreamWriter.endText();\n    };\n    /**\n     * `Draws Ascii line`.\n     * @private\n     */\n    PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n        this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var value = '';\n        if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n            for (var i = 0; i < lineInfo.text.length; i++) {\n                if (lineInfo.text[i] === '(') {\n                    value += '\\\\\\(';\n                }\n                else if (lineInfo.text[i] === ')') {\n                    value += '\\\\\\)';\n                }\n                else {\n                    value += lineInfo.text[i];\n                }\n            }\n        }\n        if (value === '') {\n            value = lineInfo.text;\n        }\n        var line = '(' + value + ')';\n        this.pdfStreamWriter.showNextLineText(new PdfString(line));\n    };\n    /**\n     * Draws unicode line.\n     * @private\n     */\n    PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var rtl = (format !== null && typeof format !== 'undefined' && format.rightToLeft);\n        var useWordSpace = (format !== null && typeof format !== 'undefined' && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify));\n        var ttfFont = font;\n        var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var rtlRender = new RtlRenderer();\n        if (rtl || (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None)) {\n            var blocks = null;\n            var rightAlign = (format !== null && typeof format !== 'undefined' && format.alignment === PdfTextAlignment.Right);\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n                /* tslint:disable-next-line:max-line-length */\n                blocks = rtlRender.layout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n            }\n            else {\n                blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n            }\n            var words = null;\n            if (blocks.length > 1) {\n                if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n                    /* tslint:disable-next-line:max-line-length */\n                    words = rtlRender.splitLayout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n                }\n                else {\n                    words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n                }\n            }\n            else {\n                words = [line];\n            }\n            this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n        }\n        else {\n            if (useWordSpace) {\n                var result = this.breakUnicodeLine(line, ttfFont, null);\n                var blocks = result.tokens;\n                var words = result.words;\n                this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n            }\n            else {\n                var token = this.convertToUnicode(line, ttfFont);\n                var value = this.getUnicodeString(token);\n                this.streamWriter.showNextLineText(value);\n            }\n        }\n    };\n    /**\n     * Draws array of unicode tokens.\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n        /* tslint:enable */\n        if (blocks == null) {\n            throw new Error('Argument Null Exception : blocks');\n        }\n        if (words == null) {\n            throw new Error('Argument Null Exception : words');\n        }\n        if (font == null) {\n            throw new Error('Argument Null Exception : font');\n        }\n        this.streamWriter.startNextLine();\n        var x = 0;\n        var xShift = 0;\n        var firstLineIndent = 0;\n        var paragraphIndent = 0;\n        try {\n            if (format !== null && typeof format !== 'undefined') {\n                firstLineIndent = format.firstLineIndent;\n                paragraphIndent = format.paragraphIndent;\n                format.firstLineIndent = 0;\n                format.paragraphIndent = 0;\n            }\n            var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n            var characterSpacing = (format != null) ? format.characterSpacing : 0;\n            var wordSpace = (format !== null && typeof format !== 'undefined' && wordSpacing === 0) ? format.wordSpacing : 0;\n            spaceWidth += characterSpacing + wordSpace;\n            for (var i = 0; i < blocks.length; i++) {\n                var token = blocks[i];\n                var word = words[i];\n                var tokenWidth = 0;\n                if (x !== 0) {\n                    this.streamWriter.startNextLine(x, 0);\n                }\n                if (word.length > 0) {\n                    tokenWidth += /*Utils.Round(*/ font.measureString(word, format).width /*)*/;\n                    tokenWidth += characterSpacing;\n                    var val = this.getUnicodeString(token);\n                    this.streamWriter.showText(val);\n                }\n                if (i !== blocks.length - 1) {\n                    x = tokenWidth + spaceWidth;\n                    xShift += x;\n                }\n            }\n            // Rolback current line position.\n            if (xShift > 0) {\n                this.streamWriter.startNextLine(-xShift, 0);\n            }\n        }\n        finally {\n            if (format !== null && typeof format !== 'undefined') {\n                format.firstLineIndent = firstLineIndent;\n                format.paragraphIndent = paragraphIndent;\n            }\n        }\n    };\n    /**\n     * Breakes the unicode line to the words and converts symbols to glyphs.\n     */\n    PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n        if (line === null) {\n            throw new Error('Argument Null Exception : line');\n        }\n        words = line.split(null);\n        var tokens = [];\n        for (var i = 0; i < words.length; i++) {\n            // Reconvert string according to unicode standard.\n            var word = words[i];\n            var token = this.convertToUnicode(word, ttfFont);\n            tokens[i] = token;\n        }\n        return { tokens: tokens, words: words };\n    };\n    /**\n     * Creates PdfString from the unicode text.\n     */\n    PdfGraphics.prototype.getUnicodeString = function (token) {\n        if (token === null) {\n            throw new Error('Argument Null Exception : token');\n        }\n        var val = new PdfString(token);\n        val.converted = true;\n        val.encode = InternalEnum.ForceEncoding.Ascii;\n        return val;\n    };\n    /**\n     * Converts to unicode format.\n     */\n    PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n        var token = null;\n        if (text == null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (ttfFont == null) {\n            throw new Error('Argument Null Exception : ttfFont');\n        }\n        if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n            var ttfReader = ttfFont.fontInternal.ttfReader;\n            ttfFont.setSymbols(text);\n            token = ttfReader.convertString(text);\n            var bytes = PdfString.toUnicodeArray(token, false);\n            token = PdfString.byteToString(bytes);\n        }\n        return token;\n    };\n    /**\n     * `Justifies` the line if needed.\n     * @private\n     */\n    PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n        var hasWordSpacing = (format != null && format.wordSpacing !== 0);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var wordSpace = 0;\n        if (shouldJustify) {\n            // Correct line width.\n            if (hasWordSpacing) {\n                lineWidth -= (whitespacesCount * format.wordSpacing);\n            }\n            var difference = boundsWidth - lineWidth;\n            wordSpace = difference / whitespacesCount;\n            this.pdfStreamWriter.setWordSpacing(wordSpace);\n        }\n        else {\n            // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n            if (hasWordSpacing) {\n                this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n            }\n            else {\n                this.pdfStreamWriter.setWordSpacing(0);\n            }\n        }\n        return wordSpace;\n    };\n    /**\n     * `Reset` or reinitialize the current graphic value.\n     * @private\n     */\n    PdfGraphics.prototype.reset = function (size) {\n        this.canvasSize = size;\n        this.streamWriter.clear();\n        this.initialize();\n        this.initializeCoordinates();\n    };\n    /**\n     * Checks whether the line should be `justified`.\n     * @private\n     */\n    PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var justifyStyle = (format != null && format.alignment === PdfTextAlignment.Justify);\n        var goodWidth = (boundsWidth >= 0 && lineWidth < boundsWidth);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var hasSpaces = (whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace);\n        var goodLineBreakStyle = ((lineInfo.lineType & LineType.LayoutBreak) > 0);\n        /* tslint:disable */\n        var shouldJustify = (justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify)); /* tslint:enable */\n        return shouldJustify;\n    };\n    /* tslint:disable */\n    /**\n     * Emulates `Underline, Strikeout` of the text if needed.\n     * @private\n     */\n    PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n        if (font.underline || font.strikeout) {\n            // Calculate line width.\n            var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n            if (linePen != null) {\n                // Approximate line positions.\n                var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n                var underlineYOffset = 0;\n                underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n                var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n                var lines = result.lines;\n                // Run through the text and draw lines.\n                for (var i = 0, len = result.lineCount; i < len; i++) {\n                    var lineInfo = lines[i];\n                    var line = lineInfo.text;\n                    var lineWidth = lineInfo.width;\n                    var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n                    var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n                    hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n                    var x1 = layoutRectangle.x + hShift;\n                    /* tslint:disable */\n                    var x2 = (!this.shouldJustify(lineInfo, layoutRectangle.width, format)) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n                    /* tslint:enable */\n                    if (font.underline) {\n                        var y = underlineYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        underlineYOffset += result.lineHeight;\n                    }\n                    if (font.strikeout) {\n                        var y = strikeoutYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        strikeoutYOffset += result.lineHeight;\n                    }\n                    if (this.isPointOverload && lines.length > 1) {\n                        layoutRectangle.x = 0;\n                        layoutRectangle.width = this.clientSize.width;\n                    }\n                }\n                this.isPointOverload = false;\n            }\n        }\n    };\n    /**\n     * `Creates a pen` for drawing lines in the text.\n     * @private\n     */\n    PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n        // Calculate line width.\n        var lineWidth = font.metrics.getSize(format) / 20;\n        var linePen = null;\n        // Create a pen fo the lines.\n        if (pen != null) {\n            linePen = new PdfPen(pen.color, lineWidth);\n        }\n        else if (brush != null) {\n            linePen = new PdfPen(brush, lineWidth);\n        }\n        return linePen;\n    };\n    /**\n     * Return `text rendering mode`.\n     * @private\n     */\n    PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n        var tm = TextRenderingMode.None;\n        if (pen != null && brush != null) {\n            tm = TextRenderingMode.FillStroke;\n        }\n        else if (pen != null) {\n            tm = TextRenderingMode.Stroke;\n        }\n        else {\n            tm = TextRenderingMode.Fill;\n        }\n        if (format != null && format.clipPath) {\n            tm |= TextRenderingMode.ClipFlag;\n        }\n        return tm;\n    };\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n        var lineIndent = 0;\n        var firstParagraphLine = ((lineInfo.lineType & LineType.FirstParagraphLine) > 0);\n        if (format != null && firstParagraphLine) {\n            lineIndent = (firstLine) ? format.firstLineIndent : format.paragraphIndent;\n            lineIndent = (layoutBounds.width > 0) ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    /**\n     * Calculates shift value if the line is `horizontaly aligned`.\n     * @private\n     */\n    PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n        var shift = 0;\n        if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    shift = (boundsWidth - lineWidth) / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    shift = boundsWidth - lineWidth;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /**\n     * Gets or sets the value that indicates `text direction` mode.\n     * @private\n     */\n    PdfGraphics.prototype.rightToLeft = function (format) {\n        var rtl = (format !== null && typeof format !== 'undefined' && format.rightToLeft);\n        if (format !== null && typeof format !== 'undefined') {\n            if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n                rtl = true;\n            }\n        }\n        return rtl;\n    };\n    PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n        if (typeof format === 'undefined') {\n            this.stateControl(pen, brush, font, null);\n        }\n        else {\n            if (brush instanceof PdfGradientBrush) {\n                this.bCSInitialized = false;\n                brush.colorSpace = this.colorSpace;\n            }\n            if (brush instanceof PdfTilingBrush) {\n                this.bCSInitialized = false;\n                brush.graphics.colorSpace = this.colorSpace;\n            }\n            var saveState = false;\n            if (brush !== null) {\n                var solidBrush = brush;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    if (this.colorSpaceChanged === false) {\n                        this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n                        this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n                        this.colorSpace = this.pageLayer.page.document.colorSpace;\n                        this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                        this.colorSpaceChanged = true;\n                    }\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            else if (pen != null) {\n                var pdfPen = pen;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    /* tslint:disable */\n                    this.colorSpace = this.pageLayer.page.document.colorSpace;\n                    this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            this.penControl(pen, saveState);\n            this.brushControl(brush, saveState);\n            this.fontControl(font, format, saveState);\n        }\n    };\n    /**\n     * Initializes the `current color space`.\n     * @private\n     */\n    PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n        var re = this.getResources.getResources();\n        if (!this.bCSInitialized) {\n            if (this.currentColorSpace != PdfColorSpace.GrayScale) {\n                this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n                this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n                this.bCSInitialized = true;\n            }\n            else {\n                this.pdfStreamWriter.setColorSpace('DeviceGray', true);\n                this.pdfStreamWriter.setColorSpace('DeviceGray', false);\n                this.bCSInitialized = true;\n            }\n        }\n    };\n    /**\n     * Controls the `pen state`.\n     * @private\n     */\n    PdfGraphics.prototype.penControl = function (pen, saveState) {\n        if (pen != null) {\n            this.currentPen = pen;\n            /* tslint:disable */\n            pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n            /* tslint:enable */\n            this.currentPen = pen.clone();\n        }\n    };\n    /**\n     * Controls the `brush state`.\n     * @private\n     */\n    PdfGraphics.prototype.brushControl = function (brush, saveState) {\n        if (brush != null && typeof brush !== 'undefined') {\n            var b = brush.clone();\n            var lgb = b;\n            if (lgb !== null && typeof lgb !== 'undefined' && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {\n                var m = lgb.matrix;\n                var matrix = this.matrix.clone();\n                if ((m != null)) {\n                    m.multiply(matrix);\n                    matrix = m;\n                }\n                lgb.matrix = matrix;\n            }\n            this.currentBrush = lgb;\n            var br = (brush);\n            /* tslint:disable */\n            b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n            /* tslint:enable */\n            this.currentBrush = brush;\n            brush = null;\n        }\n    };\n    /**\n     * Saves the font and other `font settings`.\n     * @private\n     */\n    PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n        if (font != null) {\n            var curSubSuper = (format != null) ? format.subSuperScript : PdfSubSuperScript.None;\n            /* tslint:disable */\n            var prevSubSuper = (this.currentStringFormat != null) ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None; /* tslint:enable */\n            if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n                var resources = this.getResources.getResources();\n                this.currentFont = font;\n                this.currentStringFormat = format;\n                var size = font.metrics.getSize(format);\n                /* tslint:disable */\n                this.isEmfTextScaled = false;\n                var fontName = resources.getName(font);\n                this.pdfStreamWriter.setFont(font, fontName, size);\n            }\n        }\n    };\n    PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            this.istransparencySet = true;\n            this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n        }\n        else {\n            if (this.trasparencies == null) {\n                this.trasparencies = new TemporaryDictionary();\n            }\n            var transp = null;\n            var td = new TransparencyData(arg1, arg2, arg3);\n            if (this.trasparencies.containsKey(td)) {\n                transp = this.trasparencies.getValue(td);\n            }\n            if (transp == null) {\n                transp = new PdfTransparency(arg1, arg2, arg3);\n                this.trasparencies.setValue(td, transp);\n            }\n            var resources = this.getResources.getResources();\n            var name_3 = resources.getName(transp);\n            var sw = this.streamWriter;\n            sw.setGraphicsState(name_3);\n        }\n    };\n    PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n        if (x instanceof RectangleF && typeof y === 'undefined') {\n            this.clipBounds = x;\n            this.pdfStreamWriter.writeComment('Clip margins.');\n            this.pdfStreamWriter.appendRectangle(x);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n            this.translateTransform(x.x, x.y);\n        }\n        else if (typeof x === 'number') {\n            var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n            this.clipBounds = clipArea;\n            this.pdfStreamWriter.writeComment(\"Clip margins.\");\n            this.pdfStreamWriter.appendRectangle(clipArea);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n            this.translateTransform(x, y);\n        }\n    };\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    PdfGraphics.prototype.updateY = function (y) {\n        return -y;\n    };\n    /**\n     * Used to `translate the transformation`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set translate transform\n     * page1.graphics.translateTransform(100, 100);\n     * //\n     * // draw the rectangle after applying translate transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param offsetX The x-coordinate of the translation.\n     * @param offsetY The y-coordinate of the translation.\n     */\n    PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getTranslateTransform(offsetX, offsetY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Translates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n        input.translate(x, this.updateY(y));\n        return input;\n    };\n    /* tslint:disable */\n    /**\n     * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // apply scaling trasformation\n     * page1.graphics.scaleTransform(1.5, 2);\n     * //\n     * // draw the rectangle after applying scaling transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param scaleX Scale factor in the x direction.\n     * @param scaleY Scale factor in the y direction.\n     */\n    /* tslint:enable */\n    PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getScaleTransform(scaleX, scaleY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Scales` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n        if (input == null) {\n            input = new PdfTransformationMatrix();\n        }\n        input.scale(x, y);\n        return input;\n    };\n    /**\n     * Applies the specified `rotation` to the transformation matrix of this Graphics.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set RotateTransform with 25 degree of angle\n     * page1.graphics.rotateTransform(25);\n     * //\n     * // draw the rectangle after RotateTransformation\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param angle Angle of rotation in degrees.\n     */\n    PdfGraphics.prototype.rotateTransform = function (angle) {\n        var matrix = new PdfTransformationMatrix();\n        this.getRotateTransform(angle, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Initializes coordinate system`.\n     * @private\n     */\n    PdfGraphics.prototype.initializeCoordinates = function () {\n        // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n        this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.');\n        // Translate co-ordinates only, don't flip.\n        if (this.mediaBoxUpperRightBound !== -(this.size.height)) {\n            if (this.cropBox == null) {\n                if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n                    this.translateTransform(0, this.updateY(this.size.height));\n                }\n                else {\n                    this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n                }\n            }\n        }\n    };\n    /**\n     * `Rotates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n        if (input == null || typeof input === 'undefined') {\n            input = new PdfTransformationMatrix();\n        }\n        input.rotate(this.updateY(angle));\n        return input;\n    };\n    /**\n     * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // save the graphics state\n     * let state1 : PdfGraphicsState = page1.graphics.save();\n     * //\n     * page1.graphics.scaleTransform(1.5, 2);\n     * // draw the rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // restore the graphics state\n     * page1.graphics.restore(state1);\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.save = function () {\n        var state = new PdfGraphicsState(this, this.matrix.clone());\n        state.brush = this.currentBrush;\n        state.pen = this.currentPen;\n        state.font = this.currentFont;\n        state.colorSpace = this.currentColorSpace;\n        state.characterSpacing = this.previousCharacterSpacing;\n        state.wordSpacing = this.previousWordSpacing;\n        state.textScaling = this.previousTextScaling;\n        state.textRenderingMode = this.previousTextRenderingMode;\n        this.graphicsState.push(state);\n        this.pdfStreamWriter.saveGraphicsState();\n        return state;\n    };\n    PdfGraphics.prototype.restore = function (state) {\n        if (typeof state === 'undefined') {\n            if (this.graphicsState.length > 0) {\n                this.doRestoreState();\n            }\n        }\n        else {\n            if (this.graphicsState.indexOf(state) !== -1) {\n                for (;;) {\n                    if (this.graphicsState.length === 0) {\n                        break;\n                    }\n                    var popState = this.doRestoreState();\n                    if (popState === state) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * `Restores graphics state`.\n     * @private\n     */\n    PdfGraphics.prototype.doRestoreState = function () {\n        var state = this.graphicsState.pop();\n        this.transformationMatrix = state.matrix;\n        this.currentBrush = state.brush;\n        this.currentPen = state.pen;\n        this.currentFont = state.font;\n        this.currentColorSpace = state.colorSpace;\n        this.previousCharacterSpacing = state.characterSpacing;\n        this.previousWordSpacing = state.wordSpacing;\n        this.previousTextScaling = state.textScaling;\n        this.previousTextRenderingMode = state.textRenderingMode;\n        this.pdfStreamWriter.restoreGraphicsState();\n        return state;\n    };\n    /* tslint:enable */\n    /**\n     * `Draws the specified path`, using its original physical size, at the location specified by a coordinate pair.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * //Create new PDF path.\n     * let path : PdfPath = new PdfPath();\n     * //Add line path points.\n     * path.addLine(new PointF(10, 100), new PointF(10, 200));\n     * path.addLine(new PointF(100, 100), new PointF(100, 200));\n     * path.addLine(new PointF(100, 200), new PointF(55, 150));\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(255, 0, 0));\n     * // set brush\n     * let brush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the path\n     * page1.graphics.drawPath(pen, brush, path);\n     * //\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param pen Color of the text.\n     * @param brush Color of the text.\n     * @param path Draw path.\n     */\n    PdfGraphics.prototype.drawPath = function (pen, brush, path) {\n        if (brush instanceof PdfTilingBrush) {\n            this.bCSInitialized = false;\n            brush.graphics.colorSpace = this.colorSpace;\n        }\n        else if (brush instanceof PdfGradientBrush) {\n            this.bCSInitialized = false;\n            brush.colorSpace = this.colorSpace;\n        }\n        this.stateControl(pen, brush, null);\n        this.buildUpPath(path.pathPoints, path.pathTypes);\n        this.drawPathHelper(pen, brush, path.fillMode, false);\n    };\n    /* tslint:disable-next-line:max-line-length */\n    PdfGraphics.prototype.drawArc = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n        if (arg2 instanceof RectangleF) {\n            this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);\n        }\n        else {\n            if ((arg7 !== 0)) {\n                this.stateControl(arg1, null, null);\n                this.constructArcPath(arg2, arg3, (arg2 + arg4), (arg3 + arg5), arg6, arg7);\n                this.drawPathHelper(arg1, null, false);\n            }\n        }\n    };\n    /**\n     * Builds up the path.\n     * @private\n     */\n    PdfGraphics.prototype.buildUpPath = function (arg1, arg2) {\n        var cnt = arg1.length;\n        for (var i = 0; i < cnt; ++i) {\n            var typeValue = 0;\n            var point = arg1[i];\n            switch (((arg2[i] & (PdfGraphics.pathTypesValuesMask)))) {\n                case PathPointType.Start:\n                    this.pdfStreamWriter.beginPath(point.x, point.y);\n                    break;\n                case PathPointType.Bezier3:\n                    var p2 = new PointF(0, 0);\n                    var p3 = new PointF(0, 0);\n                    var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);\n                    this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);\n                    i = result1.i;\n                    break;\n                case PathPointType.Line:\n                    this.pdfStreamWriter.appendLineSegment(point);\n                    break;\n                default:\n                    throw new Error('ArithmeticException - Incorrect path formation.');\n            }\n            typeValue = arg2[i];\n            this.checkFlags(typeValue);\n        }\n    };\n    /**\n     * Gets the bezier points from respective arrays.\n     * @private\n     */\n    /* tslint:disable-next-line:max-line-length */\n    PdfGraphics.prototype.getBezierPoints = function (points, types, i, p2, p3) {\n        var errorMsg = 'Malforming path.';\n        ++i;\n        if ((((types[i] & PdfGraphics.pathTypesValuesMask)) === PathPointType.Bezier3)) {\n            p2 = points[i];\n            ++i;\n            if ((((types[i] & PdfGraphics.pathTypesValuesMask)) === PathPointType.Bezier3)) {\n                p3 = points[i];\n            }\n            else {\n                throw new Error('ArgumentException : errorMsg');\n            }\n        }\n        else {\n            throw new Error('ArgumentException : errorMsg');\n        }\n        return { i: i, p2: p2, p3: p3 };\n    };\n    /**\n     * Checks path point type flags.\n     * @private\n     */\n    PdfGraphics.prototype.checkFlags = function (type) {\n        if ((((type & (PathPointType.CloseSubpath))) === PathPointType.CloseSubpath)) {\n            this.pdfStreamWriter.closePath();\n        }\n    };\n    /**\n     * Constructs the arc path using Bezier curves.\n     * @private\n     */\n    PdfGraphics.prototype.constructArcPath = function (x1, y1, x2, y2, startAng, sweepAngle) {\n        var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);\n        if ((points.length === 0)) {\n            return;\n        }\n        var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n        this.pdfStreamWriter.beginPath(pt[0], pt[1]);\n        var i = 0;\n        for (i = 0; i < points.length; i = i + 8) {\n            pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];\n            this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);\n        }\n    };\n    /**\n     * Gets the bezier points for arc constructing.\n     * @private\n     */\n    PdfGraphics.prototype.getBezierArc = function (numX1, numY1, numX2, numY2, s1, e1) {\n        if ((numX1 > numX2)) {\n            var tmp = void 0;\n            tmp = numX1;\n            numX1 = numX2;\n            numX2 = tmp;\n        }\n        if ((numY2 > numY1)) {\n            var tmp = void 0;\n            tmp = numY1;\n            numY1 = numY2;\n            numY2 = tmp;\n        }\n        var fragAngle1;\n        var numFragments;\n        if ((Math.abs(e1) <= 90)) {\n            fragAngle1 = e1;\n            numFragments = 1;\n        }\n        else {\n            numFragments = (Math.ceil((Math.abs(e1) / 90)));\n            fragAngle1 = (e1 / numFragments);\n        }\n        var xcen = ((numX1 + numX2) / 2);\n        var ycen = ((numY1 + numY2) / 2);\n        var rx = ((numX2 - numX1) / 2);\n        var ry = ((numY2 - numY1) / 2);\n        var halfAng = ((fragAngle1 * (Math.PI / 360)));\n        var kappa = (Math.abs(4.0 / 3.0 * (1.0 - Math.cos(halfAng)) / Math.sin(halfAng)));\n        var pointsList = [];\n        for (var i = 0; (i < numFragments); i++) {\n            var thetaValue0 = (((s1 + (i * fragAngle1)) * (Math.PI / 180)));\n            var thetaValue1 = (((s1 + ((i + 1) * fragAngle1)) * (Math.PI / 180)));\n            var cos0 = (Math.cos(thetaValue0));\n            var cos1 = (Math.cos(thetaValue1));\n            var sin0 = (Math.sin(thetaValue0));\n            var sin1 = (Math.sin(thetaValue1));\n            if ((fragAngle1 > 0)) {\n                /* tslint:disable-next-line:max-line-length */\n                pointsList.push((xcen + (rx * cos0)), (ycen - (ry * sin0)), (xcen + (rx * (cos0 - (kappa * sin0)))), (ycen - (ry * (sin0 + (kappa * cos0)))), (xcen + (rx * (cos1 + (kappa * sin1)))), (ycen - (ry * (sin1 - (kappa * cos1)))), (xcen + (rx * cos1)), (ycen - (ry * sin1)));\n            }\n            else {\n                /* tslint:disable-next-line:max-line-length */\n                pointsList.push((xcen + (rx * cos0)), (ycen - (ry * sin0)), (xcen + (rx * (cos0 + (kappa * sin0)))), (ycen - (ry * (sin0 - (kappa * cos0)))), (xcen + (rx * (cos1 - (kappa * sin1)))), (ycen - (ry * (sin1 + (kappa * cos1)))), (xcen + (rx * cos1)), (ycen - (ry * sin1)));\n            }\n        }\n        return pointsList;\n    };\n    // Constants\n    /**\n     * Specifies the mask of `path type values`.\n     * @private\n     */\n    PdfGraphics.pathTypesValuesMask = 0xf;\n    /**\n     * Checks whether the object is `transparencyObject`.\n     * @hidden\n     * @private\n     */\n    PdfGraphics.transparencyObject = false;\n    return PdfGraphics;\n}());\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\nvar GetResourceEventHandler = /** @class */ (function () {\n    /**\n     * Initialize instance of `GetResourceEventHandler` class.\n     * Alternate for event handlers and delegates.\n     * @private\n     */\n    function GetResourceEventHandler(sender) {\n        this.sender = sender;\n    }\n    /**\n     * Return the instance of `PdfResources` class.\n     * @private\n     */\n    GetResourceEventHandler.prototype.getResources = function () {\n        return this.sender.getResources();\n    };\n    return GetResourceEventHandler;\n}());\nexport { GetResourceEventHandler };\nvar PdfGraphicsState = /** @class */ (function () {\n    function PdfGraphicsState(graphics, matrix) {\n        /**\n         * Stores `previous rendering mode`.\n         * @default TextRenderingMode.Fill\n         * @private\n         */\n        this.internalTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * `Previous character spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalCharacterSpacing = 0.0;\n        /**\n         * `Previous word spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalWordSpacing = 0.0;\n        /**\n         * The previously used `text scaling value`.\n         * @default 100.0\n         * @private\n         */\n        this.internalTextScaling = 100.0;\n        /**\n         * `Current color space`.\n         * @default PdfColorSpace.Rgb\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        if (typeof graphics !== 'undefined') {\n            this.pdfGraphics = graphics;\n            this.transformationMatrix = matrix;\n        }\n    }\n    Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n        // Properties\n        /**\n         * Gets the parent `graphics object`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n        /**\n         * Gets the `current matrix`.\n         * @private\n         */\n        get: function () {\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets the `current character spacing`.\n         * @private\n         */\n        get: function () {\n            return this.internalCharacterSpacing;\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets the `word spacing` value.\n         * @private\n         */\n        get: function () {\n            return this.internalWordSpacing;\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n        /**\n         * Gets or sets the `text scaling` value.\n         * @private\n         */\n        get: function () {\n            return this.internalTextScaling;\n        },\n        set: function (value) {\n            this.internalTextScaling = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n        /**\n         * Gets or sets the `current pen` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfPen;\n        },\n        set: function (value) {\n            this.pdfPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n        /**\n         * Gets or sets the `brush`.\n         * @private\n         */\n        get: function () {\n            return this.pdfBrush;\n        },\n        set: function (value) {\n            this.pdfBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n        /**\n         * Gets or sets the `current font` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfFont;\n        },\n        set: function (value) {\n            this.pdfFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the `current color space` value.\n         * @private\n         */\n        get: function () {\n            return this.pdfColorSpace;\n        },\n        set: function (value) {\n            this.pdfColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n        /**\n         * Gets or sets the `text rendering mode`.\n         * @private\n         */\n        get: function () {\n            return this.internalTextRenderingMode;\n        },\n        set: function (value) {\n            this.internalTextRenderingMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGraphicsState;\n}());\nexport { PdfGraphicsState };\nvar TransparencyData = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `TransparencyData` class.\n     * @private\n     */\n    function TransparencyData(alphaPen, alphaBrush, blendMode) {\n        this.alphaPen = alphaPen;\n        this.alphaBrush = alphaBrush;\n        this.blendMode = blendMode;\n    }\n    return TransparencyData;\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}