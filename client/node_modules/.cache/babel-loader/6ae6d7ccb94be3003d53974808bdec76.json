{"ast":null,"code":"import { SizeF, RectangleF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfWordWrapType } from './enum';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Class `lay outing the text`.\n */\nvar PdfStringLayouter = /** @class */function () {\n  // Constructors\n  /**\n   * Initializes a new instance of the `StringLayouter` class.\n   * @private\n   */\n  function PdfStringLayouter() {\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n    this.isOverloadWithPosition = false;\n    //\n  }\n\n  PdfStringLayouter.prototype.layout = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n    if (arg4 instanceof RectangleF) {\n      this.initialize(arg1, arg2, arg3, arg4, arg5);\n      this.isOverloadWithPosition = arg6;\n      this.clientSize = arg7;\n      var result = this.doLayout();\n      this.clear();\n      return result;\n    } else {\n      this.initialize(arg1, arg2, arg3, arg4);\n      this.isOverloadWithPosition = arg5;\n      this.clientSize = arg6;\n      var result = this.doLayout();\n      this.clear();\n      return result;\n    }\n  };\n  PdfStringLayouter.prototype.initialize = function (text, font, format, rectSize, pageHeight) {\n    if (typeof pageHeight === 'number') {\n      if (text == null) {\n        throw new Error('ArgumentNullException:text');\n      }\n      if (font == null) {\n        throw new Error('ArgumentNullException:font');\n      }\n      this.text = text;\n      this.font = font;\n      this.format = format;\n      this.size = new SizeF(rectSize.width, rectSize.height);\n      this.rectangle = rectSize;\n      this.pageHeight = pageHeight;\n      this.reader = new StringTokenizer(text);\n    } else {\n      this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);\n    }\n  };\n  /**\n   * `Clear` all resources.\n   * @private\n   */\n  PdfStringLayouter.prototype.clear = function () {\n    this.font = null;\n    this.format = null;\n    this.reader.close();\n    this.reader = null;\n    this.text = null;\n  };\n  /**\n   * `Layouts` the text.\n   * @private\n   */\n  PdfStringLayouter.prototype.doLayout = function () {\n    var result = new PdfStringLayoutResult();\n    var lineResult = new PdfStringLayoutResult();\n    var lines = [];\n    var line = this.reader.peekLine();\n    var lineIndent = this.getLineIndent(true);\n    while (line != null) {\n      lineResult = this.layoutLine(line, lineIndent);\n      if (lineResult !== null || typeof lineResult !== 'undefined') {\n        var numSymbolsInserted = 0;\n        /* tslint:disable */\n        var returnedValue = this.copyToResult(result, lineResult, lines, /*out*/numSymbolsInserted);\n        /* tslint:enable */\n        var success = returnedValue.success;\n        numSymbolsInserted = returnedValue.numInserted;\n        if (!success) {\n          this.reader.read(numSymbolsInserted);\n          break;\n        }\n      }\n      // if (lineResult.textRemainder != null && lineResult.textRemainder.length > 0 ) {\n      //     break;\n      // }\n      this.reader.readLine();\n      line = this.reader.peekLine();\n      lineIndent = this.getLineIndent(false);\n    }\n    this.finalizeResult(result, lines);\n    return result;\n  };\n  /**\n   * Returns `line indent` for the line.\n   * @private\n   */\n  PdfStringLayouter.prototype.getLineIndent = function (firstLine) {\n    var lineIndent = 0;\n    if (this.format != null) {\n      lineIndent = firstLine ? this.format.firstLineIndent : this.format.paragraphIndent;\n      lineIndent = this.size.width > 0 ? Math.min(this.size.width, lineIndent) : lineIndent;\n    }\n    return lineIndent;\n  };\n  /**\n   * Calculates `height` of the line.\n   * @private\n   */\n  PdfStringLayouter.prototype.getLineHeight = function () {\n    var height = this.font.height;\n    if (this.format != null && this.format.lineSpacing !== 0) {\n      height = this.format.lineSpacing + this.font.height;\n    }\n    return height;\n  };\n  /**\n   * Calculates `width` of the line.\n   * @private\n   */\n  PdfStringLayouter.prototype.getLineWidth = function (line) {\n    var width = this.font.getLineWidth(line, this.format);\n    return width;\n  };\n  // tslint:disable\n  /**\n   * `Layouts` line.\n   * @private\n   */\n  PdfStringLayouter.prototype.layoutLine = function (line, lineIndent) {\n    var lineResult = new PdfStringLayoutResult();\n    lineResult.layoutLineHeight = this.getLineHeight();\n    var lines = [];\n    var maxWidth = this.size.width;\n    var lineWidth = this.getLineWidth(line) + lineIndent;\n    var lineType = LineType.FirstParagraphLine;\n    var readWord = true;\n    // line is in bounds.\n    if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n      this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);\n    } else {\n      var builder = '';\n      var curLine = '';\n      lineWidth = lineIndent;\n      var curIndent = lineIndent;\n      var reader = new StringTokenizer(line);\n      var word = reader.peekWord();\n      var isSingleWord = false;\n      if (word.length !== reader.length) {\n        if (word === ' ') {\n          curLine = curLine + word;\n          builder = builder + word;\n          reader.position += 1;\n          word = reader.peekWord();\n        }\n      }\n      while (word != null) {\n        curLine = curLine + word;\n        var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent /*)*/;\n        if (curLine.toString() === ' ') {\n          curLine = '';\n          curLineWidth = 0;\n        }\n        if (curLineWidth > maxWidth) {\n          if (this.getWrapType() === PdfWordWrapType.None) {\n            break;\n          }\n          if (curLine.length === word.length) {\n            //  Character wrap is disabled or one symbol is greater than bounds.\n            if (this.getWrapType() === PdfWordWrapType.WordOnly) {\n              lineResult.textRemainder = line.substring(reader.position);\n              break;\n            } else if (curLine.length === 1) {\n              builder = builder + word;\n              break;\n            } else {\n              readWord = false;\n              curLine = '';\n              word = reader.peek().toString();\n              continue;\n            }\n          } else {\n            if (this.getLineWidth(word.toString()) > maxWidth) {\n              this.format.wordWrap = PdfWordWrapType.Character;\n            } else {\n              if (typeof this.format !== 'undefined' && this.format !== null) {\n                this.format.wordWrap = PdfWordWrapType.Word;\n              }\n            }\n            if (this.getWrapType() !== PdfWordWrapType.Character || !readWord) {\n              var ln = builder.toString();\n              // if (ln.indexOf(' ') === -1) {\n              //     isSingleWord = true;\n              //     this.addToLineResult(lineResult, lines, curLine, lineWidth, LineType.LayoutBreak | lineType);\n              // } else {\n              //     this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n              // }                          \n              if (ln !== ' ') {\n                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n              }\n              if (this.isOverloadWithPosition) {\n                maxWidth = this.clientSize.width;\n              }\n              curLine = '';\n              builder = '';\n              lineWidth = 0;\n              curIndent = 0;\n              curLineWidth = 0;\n              lineType = LineType.None;\n              // if (isSingleWord) {\n              //     reader.readWord();\n              //     readWord = false;\n              // }\n              word = readWord ? word : reader.peekWord();\n              //isSingleWord = false;\n              readWord = true;\n            } else {\n              readWord = false;\n              curLine = '';\n              curLine = curLine + builder.toString();\n              word = reader.peek().toString();\n            }\n            continue;\n          }\n        }\n        /*tslint:disable:max-func-body-length */\n        builder = builder + word;\n        lineWidth = curLineWidth;\n        if (readWord) {\n          reader.readWord();\n          word = reader.peekWord();\n          //isSingleWord = false;\n        } else {\n          reader.read();\n          word = reader.peek().toString();\n        }\n      }\n      if (builder.length > 0) {\n        var ln = builder.toString();\n        this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);\n      }\n      reader.close();\n    }\n    lineResult.layoutLines = [];\n    for (var index = 0; index < lines.length; index++) {\n      lineResult.layoutLines.push(lines[index]);\n    }\n    lines = [];\n    return lineResult;\n  };\n  /**\n   * `Adds` line to line result.\n   * @private\n   */\n  PdfStringLayouter.prototype.addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {\n    var info = new LineInfo();\n    info.text = line;\n    info.width = lineWidth;\n    info.lineType = breakType;\n    lines.push(info);\n    var size = lineResult.actualSize;\n    size.height += this.getLineHeight();\n    size.width = Math.max(size.width, lineWidth);\n    lineResult.size = size;\n  };\n  /**\n   * `Copies` layout result from line result to entire result. Checks whether we can proceed lay outing or not.\n   * @private\n   */\n  PdfStringLayouter.prototype.copyToResult = function (result, lineResult, lines, /*out*/numInserted) {\n    var success = true;\n    var allowPartialLines = this.format != null && !this.format.lineLimit;\n    var height = result.actualSize.height;\n    var maxHeight = this.size.height;\n    if (this.pageHeight > 0 && maxHeight + this.rectangle.y > this.pageHeight) {\n      maxHeight = this.rectangle.y - this.pageHeight;\n      maxHeight = Math.max(maxHeight, -maxHeight);\n    }\n    numInserted = 0;\n    if (lineResult.lines != null) {\n      for (var i = 0, len = lineResult.lines.length; i < len; i++) {\n        var expHeight = height + lineResult.lineHeight;\n        if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {\n          var info = lineResult.lines[i];\n          numInserted += info.text.length;\n          info = this.trimLine(info, lines.length === 0);\n          lines.push(info);\n          // Update width.\n          var size = result.actualSize;\n          size.width = Math.max(size.width, info.width);\n          result.size = size;\n          // The part of the line fits only and it's allowed to use partial lines.\n          // if (expHeight >= maxHeight && maxHeight > 0 && allowPartialLines)\n          // {\n          //     let shouldClip : boolean = (this.format == null || !this.format.noClip);\n          //     if (shouldClip)\n          //     {\n          //         let exceededHeight : number = expHeight - maxHeight;\n          //         let fitHeight : number  = /*Utils.Round(*/ lineResult.lineHeight - exceededHeight /*)*/;\n          //         height = /*Utils.Round(*/ height + fitHeight /*)*/;\n          //     }\n          //     else\n          //     {\n          //         height = expHeight;\n          //     }\n          //     success = false;\n          //     break;\n          // } else {\n          height = expHeight;\n          // }\n        } else {\n          success = false;\n          break;\n        }\n      }\n    }\n    if (height != result.size.height) {\n      var size1 = result.actualSize;\n      size1.height = height;\n      result.size = size1;\n    }\n    return {\n      success: success,\n      numInserted: numInserted\n    };\n  };\n  /**\n   * `Finalizes` final result.\n   * @private\n   */\n  PdfStringLayouter.prototype.finalizeResult = function (result, lines) {\n    result.layoutLines = [];\n    for (var index = 0; index < lines.length; index++) {\n      result.layoutLines.push(lines[index]);\n    }\n    result.layoutLineHeight = this.getLineHeight();\n    if (!this.reader.end) {\n      result.textRemainder = this.reader.readToEnd();\n    }\n    lines = [];\n  };\n  /**\n   * `Trims` whitespaces at the line.\n   * @private\n   */\n  PdfStringLayouter.prototype.trimLine = function (info, firstLine) {\n    var line = info.text;\n    var lineWidth = info.width;\n    // Trim start whitespaces if the line is not a start of the paragraph only.\n    var trimStartSpaces = (info.lineType & LineType.FirstParagraphLine) === 0;\n    var start = this.format == null || !this.format.rightToLeft;\n    var spaces = StringTokenizer.spaces;\n    line = start ? line.trim() : line.trim();\n    // Recalculate line width.\n    if (line.length !== info.text.length) {\n      lineWidth = this.getLineWidth(line);\n      if ((info.lineType & LineType.FirstParagraphLine) > 0) {\n        lineWidth += this.getLineIndent(firstLine);\n      }\n    }\n    info.text = line;\n    info.width = lineWidth;\n    return info;\n  };\n  /**\n   * Returns `wrap` type.\n   * @private\n   */\n  PdfStringLayouter.prototype.getWrapType = function () {\n    var wrapType = this.format != null ? this.format.wordWrap : PdfWordWrapType.Word;\n    return wrapType;\n  };\n  return PdfStringLayouter;\n}();\nexport { PdfStringLayouter };\n//Internal declaration\nvar PdfStringLayoutResult = /** @class */function () {\n  function PdfStringLayoutResult() {}\n  Object.defineProperty(PdfStringLayoutResult.prototype, \"remainder\", {\n    // Properties\n    /**\n     * Gets the `text` which is not lay outed.\n     * @private\n     */\n    get: function () {\n      return this.textRemainder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringLayoutResult.prototype, \"actualSize\", {\n    /**\n     * Gets the actual layout text `bounds`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.size === 'undefined') {\n        this.size = new SizeF(0, 0);\n      }\n      return this.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringLayoutResult.prototype, \"lines\", {\n    /**\n     * Gets layout `lines` information.\n     * @private\n     */\n    get: function () {\n      return this.layoutLines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringLayoutResult.prototype, \"lineHeight\", {\n    /**\n     * Gets the `height` of the line.\n     * @private\n     */\n    get: function () {\n      return this.layoutLineHeight;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringLayoutResult.prototype, \"empty\", {\n    /**\n     * Gets value that indicates whether any layout text [`empty`].\n     * @private\n     */\n    get: function () {\n      return this.layoutLines == null || this.layoutLines.length === 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringLayoutResult.prototype, \"lineCount\", {\n    /**\n     * Gets `number of` the layout lines.\n     * @private\n     */\n    get: function () {\n      var count = !this.empty ? this.layoutLines.length : 0;\n      return count;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfStringLayoutResult;\n}();\nexport { PdfStringLayoutResult };\nvar LineInfo = /** @class */function () {\n  function LineInfo() {}\n  Object.defineProperty(LineInfo.prototype, \"lineType\", {\n    //Properties\n    /**\n     * Gets the `type` of the line text.\n     * @private\n     */\n    get: function () {\n      return this.type;\n    },\n    set: function (value) {\n      this.type = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LineInfo.prototype, \"text\", {\n    /**\n     * Gets the line `text`.\n     * @private\n     */\n    get: function () {\n      return this.content;\n    },\n    set: function (value) {\n      this.content = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LineInfo.prototype, \"width\", {\n    /**\n     * Gets `width` of the line text.\n     * @private\n     */\n    get: function () {\n      return this.lineWidth;\n    },\n    set: function (value) {\n      this.lineWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LineInfo;\n}();\nexport { LineInfo };\n/**\n* Break type of the `line`.\n* @private\n*/\nexport var LineType;\n(function (LineType) {\n  /**\n   * Specifies the type of `None`.\n   * @private\n   */\n  LineType[LineType[\"None\"] = 0] = \"None\";\n  /**\n   * Specifies the type of `NewLineBreak`.\n   * @private\n   */\n  LineType[LineType[\"NewLineBreak\"] = 1] = \"NewLineBreak\";\n  /**\n   * Specifies the type of `LayoutBreak`.\n   * @private\n   */\n  LineType[LineType[\"LayoutBreak\"] = 2] = \"LayoutBreak\";\n  /**\n   * Specifies the type of `FirstParagraphLine`.\n   * @private\n   */\n  LineType[LineType[\"FirstParagraphLine\"] = 4] = \"FirstParagraphLine\";\n  /**\n   * Specifies the type of `LastParagraphLine`.\n   * @private\n   */\n  LineType[LineType[\"LastParagraphLine\"] = 8] = \"LastParagraphLine\";\n})(LineType || (LineType = {}));","map":{"version":3,"names":["SizeF","RectangleF","PointF","PdfWordWrapType","StringTokenizer","PdfStringLayouter","isOverloadWithPosition","prototype","layout","arg1","arg2","arg3","arg4","arg5","arg6","arg7","initialize","clientSize","result","doLayout","clear","text","font","format","rectSize","pageHeight","Error","size","width","height","rectangle","reader","close","PdfStringLayoutResult","lineResult","lines","line","peekLine","lineIndent","getLineIndent","layoutLine","numSymbolsInserted","returnedValue","copyToResult","success","numInserted","read","readLine","finalizeResult","firstLine","firstLineIndent","paragraphIndent","Math","min","getLineHeight","lineSpacing","getLineWidth","layoutLineHeight","maxWidth","lineWidth","lineType","LineType","FirstParagraphLine","readWord","round","addToLineResult","NewLineBreak","builder","curLine","curIndent","word","peekWord","isSingleWord","length","position","curLineWidth","toString","getWrapType","None","WordOnly","textRemainder","substring","peek","wordWrap","Character","Word","ln","LayoutBreak","LastParagraphLine","layoutLines","index","push","breakType","info","LineInfo","actualSize","max","allowPartialLines","lineLimit","maxHeight","y","i","len","expHeight","lineHeight","trimLine","size1","end","readToEnd","trimStartSpaces","start","rightToLeft","spaces","trim","wrapType","Object","defineProperty","get","enumerable","configurable","count","empty","type","set","value","content"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-layouter.js"],"sourcesContent":["import { SizeF, RectangleF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfWordWrapType } from './enum';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Class `lay outing the text`.\n */\nvar PdfStringLayouter = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    function PdfStringLayouter() {\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        //\n    }\n    PdfStringLayouter.prototype.layout = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n        if (arg4 instanceof RectangleF) {\n            this.initialize(arg1, arg2, arg3, arg4, arg5);\n            this.isOverloadWithPosition = arg6;\n            this.clientSize = arg7;\n            var result = this.doLayout();\n            this.clear();\n            return result;\n        }\n        else {\n            this.initialize(arg1, arg2, arg3, arg4);\n            this.isOverloadWithPosition = arg5;\n            this.clientSize = arg6;\n            var result = this.doLayout();\n            this.clear();\n            return result;\n        }\n    };\n    PdfStringLayouter.prototype.initialize = function (text, font, format, rectSize, pageHeight) {\n        if (typeof pageHeight === 'number') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (font == null) {\n                throw new Error('ArgumentNullException:font');\n            }\n            this.text = text;\n            this.font = font;\n            this.format = format;\n            this.size = new SizeF(rectSize.width, rectSize.height);\n            this.rectangle = rectSize;\n            this.pageHeight = pageHeight;\n            this.reader = new StringTokenizer(text);\n        }\n        else {\n            this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);\n        }\n    };\n    /**\n     * `Clear` all resources.\n     * @private\n     */\n    PdfStringLayouter.prototype.clear = function () {\n        this.font = null;\n        this.format = null;\n        this.reader.close();\n        this.reader = null;\n        this.text = null;\n    };\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    PdfStringLayouter.prototype.doLayout = function () {\n        var result = new PdfStringLayoutResult();\n        var lineResult = new PdfStringLayoutResult();\n        var lines = [];\n        var line = this.reader.peekLine();\n        var lineIndent = this.getLineIndent(true);\n        while (line != null) {\n            lineResult = this.layoutLine(line, lineIndent);\n            if (lineResult !== null || typeof lineResult !== 'undefined') {\n                var numSymbolsInserted = 0;\n                /* tslint:disable */\n                var returnedValue = this.copyToResult(result, lineResult, lines, /*out*/ numSymbolsInserted);\n                /* tslint:enable */\n                var success = returnedValue.success;\n                numSymbolsInserted = returnedValue.numInserted;\n                if (!success) {\n                    this.reader.read(numSymbolsInserted);\n                    break;\n                }\n            }\n            // if (lineResult.textRemainder != null && lineResult.textRemainder.length > 0 ) {\n            //     break;\n            // }\n            this.reader.readLine();\n            line = this.reader.peekLine();\n            lineIndent = this.getLineIndent(false);\n        }\n        this.finalizeResult(result, lines);\n        return result;\n    };\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.getLineIndent = function (firstLine) {\n        var lineIndent = 0;\n        if (this.format != null) {\n            lineIndent = (firstLine) ? this.format.firstLineIndent : this.format.paragraphIndent;\n            lineIndent = (this.size.width > 0) ? Math.min(this.size.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    /**\n     * Calculates `height` of the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.getLineHeight = function () {\n        var height = this.font.height;\n        if (this.format != null && this.format.lineSpacing !== 0) {\n            height = this.format.lineSpacing + this.font.height;\n        }\n        return height;\n    };\n    /**\n     * Calculates `width` of the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.getLineWidth = function (line) {\n        var width = this.font.getLineWidth(line, this.format);\n        return width;\n    };\n    // tslint:disable\n    /**\n     * `Layouts` line.\n     * @private\n     */\n    PdfStringLayouter.prototype.layoutLine = function (line, lineIndent) {\n        var lineResult = new PdfStringLayoutResult();\n        lineResult.layoutLineHeight = this.getLineHeight();\n        var lines = [];\n        var maxWidth = this.size.width;\n        var lineWidth = this.getLineWidth(line) + lineIndent;\n        var lineType = LineType.FirstParagraphLine;\n        var readWord = true;\n        // line is in bounds.\n        if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n            this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);\n        }\n        else {\n            var builder = '';\n            var curLine = '';\n            lineWidth = lineIndent;\n            var curIndent = lineIndent;\n            var reader = new StringTokenizer(line);\n            var word = reader.peekWord();\n            var isSingleWord = false;\n            if (word.length !== reader.length) {\n                if (word === ' ') {\n                    curLine = curLine + word;\n                    builder = builder + word;\n                    reader.position += 1;\n                    word = reader.peekWord();\n                }\n            }\n            while (word != null) {\n                curLine = curLine + word;\n                var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent /*)*/;\n                if (curLine.toString() === ' ') {\n                    curLine = '';\n                    curLineWidth = 0;\n                }\n                if (curLineWidth > maxWidth) {\n                    if (this.getWrapType() === PdfWordWrapType.None) {\n                        break;\n                    }\n                    if (curLine.length === word.length) {\n                        //  Character wrap is disabled or one symbol is greater than bounds.\n                        if (this.getWrapType() === PdfWordWrapType.WordOnly) {\n                            lineResult.textRemainder = line.substring(reader.position);\n                            break;\n                        }\n                        else if (curLine.length === 1) {\n                            builder = builder + word;\n                            break;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            word = reader.peek().toString();\n                            continue;\n                        }\n                    }\n                    else {\n                        if (this.getLineWidth(word.toString()) > maxWidth) {\n                            this.format.wordWrap = PdfWordWrapType.Character;\n                        }\n                        else {\n                            if (typeof this.format !== 'undefined' && this.format !== null) {\n                                this.format.wordWrap = PdfWordWrapType.Word;\n                            }\n                        }\n                        if (this.getWrapType() !== PdfWordWrapType.Character || !readWord) {\n                            var ln = builder.toString();\n                            // if (ln.indexOf(' ') === -1) {\n                            //     isSingleWord = true;\n                            //     this.addToLineResult(lineResult, lines, curLine, lineWidth, LineType.LayoutBreak | lineType);\n                            // } else {\n                            //     this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n                            // }                          \n                            if (ln !== ' ') {\n                                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n                            }\n                            if (this.isOverloadWithPosition) {\n                                maxWidth = this.clientSize.width;\n                            }\n                            curLine = '';\n                            builder = '';\n                            lineWidth = 0;\n                            curIndent = 0;\n                            curLineWidth = 0;\n                            lineType = LineType.None;\n                            // if (isSingleWord) {\n                            //     reader.readWord();\n                            //     readWord = false;\n                            // }\n                            word = (readWord) ? word : reader.peekWord();\n                            //isSingleWord = false;\n                            readWord = true;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            curLine = curLine + builder.toString();\n                            word = reader.peek().toString();\n                        }\n                        continue;\n                    }\n                }\n                /*tslint:disable:max-func-body-length */\n                builder = builder + word;\n                lineWidth = curLineWidth;\n                if (readWord) {\n                    reader.readWord();\n                    word = reader.peekWord();\n                    //isSingleWord = false;\n                }\n                else {\n                    reader.read();\n                    word = reader.peek().toString();\n                }\n            }\n            if (builder.length > 0) {\n                var ln = builder.toString();\n                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);\n            }\n            reader.close();\n        }\n        lineResult.layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            lineResult.layoutLines.push(lines[index]);\n        }\n        lines = [];\n        return lineResult;\n    };\n    /**\n     * `Adds` line to line result.\n     * @private\n     */\n    PdfStringLayouter.prototype.addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {\n        var info = new LineInfo();\n        info.text = line;\n        info.width = lineWidth;\n        info.lineType = breakType;\n        lines.push(info);\n        var size = lineResult.actualSize;\n        size.height += this.getLineHeight();\n        size.width = Math.max(size.width, lineWidth);\n        lineResult.size = size;\n    };\n    /**\n     * `Copies` layout result from line result to entire result. Checks whether we can proceed lay outing or not.\n     * @private\n     */\n    PdfStringLayouter.prototype.copyToResult = function (result, lineResult, lines, \n    /*out*/ numInserted) {\n        var success = true;\n        var allowPartialLines = (this.format != null && !this.format.lineLimit);\n        var height = result.actualSize.height;\n        var maxHeight = this.size.height;\n        if ((this.pageHeight > 0) && (maxHeight + this.rectangle.y > this.pageHeight)) {\n            maxHeight = this.rectangle.y - this.pageHeight;\n            maxHeight = Math.max(maxHeight, -maxHeight);\n        }\n        numInserted = 0;\n        if (lineResult.lines != null) {\n            for (var i = 0, len = lineResult.lines.length; i < len; i++) {\n                var expHeight = height + lineResult.lineHeight;\n                if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {\n                    var info = lineResult.lines[i];\n                    numInserted += info.text.length;\n                    info = this.trimLine(info, (lines.length === 0));\n                    lines.push(info);\n                    // Update width.\n                    var size = result.actualSize;\n                    size.width = Math.max(size.width, info.width);\n                    result.size = size;\n                    // The part of the line fits only and it's allowed to use partial lines.\n                    // if (expHeight >= maxHeight && maxHeight > 0 && allowPartialLines)\n                    // {\n                    //     let shouldClip : boolean = (this.format == null || !this.format.noClip);\n                    //     if (shouldClip)\n                    //     {\n                    //         let exceededHeight : number = expHeight - maxHeight;\n                    //         let fitHeight : number  = /*Utils.Round(*/ lineResult.lineHeight - exceededHeight /*)*/;\n                    //         height = /*Utils.Round(*/ height + fitHeight /*)*/;\n                    //     }\n                    //     else\n                    //     {\n                    //         height = expHeight;\n                    //     }\n                    //     success = false;\n                    //     break;\n                    // } else {\n                    height = expHeight;\n                    // }\n                }\n                else {\n                    success = false;\n                    break;\n                }\n            }\n        }\n        if (height != result.size.height) {\n            var size1 = result.actualSize;\n            size1.height = height;\n            result.size = size1;\n        }\n        return { success: success, numInserted: numInserted };\n    };\n    /**\n     * `Finalizes` final result.\n     * @private\n     */\n    PdfStringLayouter.prototype.finalizeResult = function (result, lines) {\n        result.layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            result.layoutLines.push(lines[index]);\n        }\n        result.layoutLineHeight = this.getLineHeight();\n        if (!this.reader.end) {\n            result.textRemainder = this.reader.readToEnd();\n        }\n        lines = [];\n    };\n    /**\n     * `Trims` whitespaces at the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.trimLine = function (info, firstLine) {\n        var line = info.text;\n        var lineWidth = info.width;\n        // Trim start whitespaces if the line is not a start of the paragraph only.\n        var trimStartSpaces = ((info.lineType & LineType.FirstParagraphLine) === 0);\n        var start = (this.format == null || !this.format.rightToLeft);\n        var spaces = StringTokenizer.spaces;\n        line = (start) ? line.trim() : line.trim();\n        // Recalculate line width.\n        if (line.length !== info.text.length) {\n            lineWidth = this.getLineWidth(line);\n            if ((info.lineType & LineType.FirstParagraphLine) > 0) {\n                lineWidth += this.getLineIndent(firstLine);\n            }\n        }\n        info.text = line;\n        info.width = lineWidth;\n        return info;\n    };\n    /**\n     * Returns `wrap` type.\n     * @private\n     */\n    PdfStringLayouter.prototype.getWrapType = function () {\n        var wrapType = (this.format != null) ? this.format.wordWrap : PdfWordWrapType.Word;\n        return wrapType;\n    };\n    return PdfStringLayouter;\n}());\nexport { PdfStringLayouter };\n//Internal declaration\nvar PdfStringLayoutResult = /** @class */ (function () {\n    function PdfStringLayoutResult() {\n    }\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"remainder\", {\n        // Properties\n        /**\n         * Gets the `text` which is not lay outed.\n         * @private\n         */\n        get: function () {\n            return this.textRemainder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"actualSize\", {\n        /**\n         * Gets the actual layout text `bounds`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.size === 'undefined') {\n                this.size = new SizeF(0, 0);\n            }\n            return this.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"lines\", {\n        /**\n         * Gets layout `lines` information.\n         * @private\n         */\n        get: function () {\n            return this.layoutLines;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"lineHeight\", {\n        /**\n         * Gets the `height` of the line.\n         * @private\n         */\n        get: function () {\n            return this.layoutLineHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"empty\", {\n        /**\n         * Gets value that indicates whether any layout text [`empty`].\n         * @private\n         */\n        get: function () {\n            return (this.layoutLines == null || this.layoutLines.length === 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"lineCount\", {\n        /**\n         * Gets `number of` the layout lines.\n         * @private\n         */\n        get: function () {\n            var count = (!this.empty) ? this.layoutLines.length : 0;\n            return count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfStringLayoutResult;\n}());\nexport { PdfStringLayoutResult };\nvar LineInfo = /** @class */ (function () {\n    function LineInfo() {\n    }\n    Object.defineProperty(LineInfo.prototype, \"lineType\", {\n        //Properties\n        /**\n         * Gets the `type` of the line text.\n         * @private\n         */\n        get: function () {\n            return this.type;\n        },\n        set: function (value) {\n            this.type = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineInfo.prototype, \"text\", {\n        /**\n         * Gets the line `text`.\n         * @private\n         */\n        get: function () {\n            return this.content;\n        },\n        set: function (value) {\n            this.content = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineInfo.prototype, \"width\", {\n        /**\n         * Gets `width` of the line text.\n         * @private\n         */\n        get: function () {\n            return this.lineWidth;\n        },\n        set: function (value) {\n            this.lineWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LineInfo;\n}());\nexport { LineInfo };\n/**\n* Break type of the `line`.\n* @private\n*/\nexport var LineType;\n(function (LineType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    LineType[LineType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `NewLineBreak`.\n     * @private\n     */\n    LineType[LineType[\"NewLineBreak\"] = 1] = \"NewLineBreak\";\n    /**\n     * Specifies the type of `LayoutBreak`.\n     * @private\n     */\n    LineType[LineType[\"LayoutBreak\"] = 2] = \"LayoutBreak\";\n    /**\n     * Specifies the type of `FirstParagraphLine`.\n     * @private\n     */\n    LineType[LineType[\"FirstParagraphLine\"] = 4] = \"FirstParagraphLine\";\n    /**\n     * Specifies the type of `LastParagraphLine`.\n     * @private\n     */\n    LineType[LineType[\"LastParagraphLine\"] = 8] = \"LastParagraphLine\";\n})(LineType || (LineType = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}