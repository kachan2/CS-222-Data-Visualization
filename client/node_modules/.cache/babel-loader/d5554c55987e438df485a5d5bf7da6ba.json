{"ast":null,"code":"import { CompressedStreamWriter } from './compression-writer';\nimport { Save } from '@syncfusion/ej2-file-utils';\nvar CRC32TABLE = [];\n/**\n * class provide compression library\n * ```typescript\n * let archive = new ZipArchive();\n * archive.compressionLevel = 'Normal';\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * archive.addItem(archiveItem);\n * archive.save(fileName.zip);\n * ```\n */\nvar ZipArchive = /** @class */function () {\n  /**\n   * constructor for creating ZipArchive instance\n   */\n  function ZipArchive() {\n    if (CRC32TABLE.length === 0) {\n      ZipArchive.initCrc32Table();\n    }\n    this.files = [];\n    this.level = 'Normal';\n    Save.isMicrosoftBrowser = !!navigator.msSaveBlob;\n  }\n  Object.defineProperty(ZipArchive.prototype, \"compressionLevel\", {\n    /**\n     * gets compression level\n     */\n    get: function () {\n      return this.level;\n    },\n    /**\n     * sets compression level\n     */\n    set: function (level) {\n      this.level = level;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ZipArchive.prototype, \"length\", {\n    /**\n     * gets items count\n     */\n    get: function () {\n      if (this.files === undefined) {\n        return 0;\n      }\n      return this.files.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * add new item to archive\n   * @param {ZipArchiveItem} item - item to be added\n   * @returns {void}\n   */\n  ZipArchive.prototype.addItem = function (item) {\n    if (item === null || item === undefined) {\n      throw new Error('ArgumentException: item cannot be null or undefined');\n    }\n    for (var i = 0; i < this.files.length; i++) {\n      var file = this.files[i];\n      if (file instanceof ZipArchiveItem) {\n        if (file.name === item.name) {\n          throw new Error('item with same name already exist');\n        }\n      }\n    }\n    this.files.push(item);\n  };\n  /**\n   * add new directory to archive\n   * @param directoryName directoryName to be created\n   * @returns {void}\n   */\n  ZipArchive.prototype.addDirectory = function (directoryName) {\n    if (directoryName === null || directoryName === undefined) {\n      throw new Error('ArgumentException: string cannot be null or undefined');\n    }\n    if (directoryName.length === 0) {\n      throw new Error('ArgumentException: string cannot be empty');\n    }\n    if (directoryName.slice(-1) !== '/') {\n      directoryName += '/';\n    }\n    if (this.files.indexOf(directoryName) !== -1) {\n      throw new Error('item with same name already exist');\n    }\n    this.files.push(directoryName);\n  };\n  /**\n   * gets item at specified index\n   * @param {number} index - item index\n   * @returns {ZipArchiveItem}\n   */\n  ZipArchive.prototype.getItem = function (index) {\n    if (index >= 0 && index < this.files.length) {\n      return this.files[index];\n    }\n    return undefined;\n  };\n  /**\n   * determines whether an element is in the collection\n   * @param {string | ZipArchiveItem} item - item to search\n   * @returns {boolean}\n   */\n  ZipArchive.prototype.contains = function (item) {\n    return this.files.indexOf(item) !== -1 ? true : false;\n  };\n  /**\n   * save archive with specified file name\n   * @param {string} fileName save archive with specified file name\n   * @returns {Promise<ZipArchive>}\n   */\n  ZipArchive.prototype.save = function (fileName) {\n    if (fileName === null || fileName === undefined || fileName.length === 0) {\n      throw new Error('ArgumentException: fileName cannot be null or undefined');\n    }\n    if (this.files.length === 0) {\n      throw new Error('InvalidOperation');\n    }\n    var zipArchive = this;\n    var promise;\n    return promise = new Promise(function (resolve, reject) {\n      zipArchive.saveInternal(fileName, false).then(function () {\n        resolve(zipArchive);\n      });\n    });\n  };\n  /**\n   * Save archive as blob\n   * @return {Promise<Blob>}\n   */\n  ZipArchive.prototype.saveAsBlob = function () {\n    var zipArchive = this;\n    var promise;\n    return promise = new Promise(function (resolve, reject) {\n      zipArchive.saveInternal('', true).then(function (blob) {\n        resolve(blob);\n      });\n    });\n  };\n  ZipArchive.prototype.saveInternal = function (fileName, skipFileSave) {\n    var _this = this;\n    var zipArchive = this;\n    var promise;\n    return promise = new Promise(function (resolve, reject) {\n      var zipData = [];\n      var dirLength = 0;\n      for (var i = 0; i < zipArchive.files.length; i++) {\n        var compressedObject = _this.getCompressedData(_this.files[i]);\n        compressedObject.then(function (data) {\n          dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);\n          if (zipData.length === zipArchive.files.length) {\n            var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);\n            resolve(blob);\n          }\n        });\n      }\n    });\n  };\n  /**\n   * release allocated un-managed resource\n   * @returns {void}\n   */\n  ZipArchive.prototype.destroy = function () {\n    if (this.files !== undefined && this.files.length > 0) {\n      for (var i = 0; i < this.files.length; i++) {\n        var file = this.files[i];\n        if (file instanceof ZipArchiveItem) {\n          file.destroy();\n        }\n        file = undefined;\n      }\n      this.files = [];\n    }\n    this.files = undefined;\n    this.level = undefined;\n  };\n  ZipArchive.prototype.getCompressedData = function (item) {\n    var zipArchive = this;\n    var promise = new Promise(function (resolve, reject) {\n      if (item instanceof ZipArchiveItem) {\n        var reader_1 = new FileReader();\n        reader_1.onload = function () {\n          var input = new Uint8Array(reader_1.result);\n          var data = {\n            fileName: item.name,\n            crc32Value: 0,\n            compressedData: [],\n            compressedSize: undefined,\n            uncompressedDataSize: input.length,\n            compressionType: undefined,\n            isDirectory: false\n          };\n          if (zipArchive.level === 'Normal') {\n            zipArchive.compressData(input, data, CRC32TABLE);\n            var length_1 = 0;\n            for (var i = 0; i < data.compressedData.length; i++) {\n              length_1 += data.compressedData[i].length;\n            }\n            data.compressedSize = length_1;\n            data.compressionType = '\\x08\\x00'; //Deflated = 8\n          } else {\n            data.compressedSize = input.length;\n            data.crc32Value = zipArchive.calculateCrc32Value(0, input, CRC32TABLE);\n            data.compressionType = '\\x00\\x00'; // Stored = 0\n            data.compressedData.push(input);\n          }\n          resolve(data);\n        };\n        reader_1.readAsArrayBuffer(item.data);\n      } else {\n        var data = {\n          fileName: item,\n          crc32Value: 0,\n          compressedData: '',\n          compressedSize: 0,\n          uncompressedDataSize: 0,\n          compressionType: '\\x00\\x00',\n          isDirectory: true\n        };\n        resolve(data);\n      }\n    });\n    return promise;\n  };\n  ZipArchive.prototype.compressData = function (input, data, crc32Table) {\n    var compressor = new CompressedStreamWriter(true);\n    var currentIndex = 0;\n    var nextIndex = 0;\n    do {\n      if (currentIndex >= input.length) {\n        compressor.close();\n        break;\n      }\n      nextIndex = Math.min(input.length, currentIndex + 16384);\n      var subArray = input.subarray(currentIndex, nextIndex);\n      data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);\n      compressor.write(subArray, 0, nextIndex - currentIndex);\n      currentIndex = nextIndex;\n    } while (currentIndex <= input.length);\n    data.compressedData = compressor.compressedData;\n    compressor.destroy();\n  };\n  ZipArchive.prototype.constructZippedObject = function (zipParts, data, dirLength, isDirectory) {\n    var extFileAttr = 0;\n    var date = new Date();\n    if (isDirectory) {\n      extFileAttr = extFileAttr | 0x00010; // directory flag\n    }\n\n    extFileAttr = extFileAttr | 0 & 0x3F;\n    var header = this.writeHeader(data, date);\n    var localHeader = 'PK\\x03\\x04' + header + data.fileName;\n    var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);\n    zipParts.push({\n      localHeader: localHeader,\n      centralDir: centralDir,\n      compressedData: data\n    });\n    return dirLength + localHeader.length + data.compressedSize;\n  };\n  ZipArchive.prototype.writeHeader = function (data, date) {\n    var zipHeader = '';\n    zipHeader += '\\x0A\\x00' + '\\x00\\x00'; // version needed to extract & general purpose bit flag\n    zipHeader += data.compressionType; // compression method Deflate=8,Stored=0\n    zipHeader += this.getBytes(this.getModifiedTime(date), 2); // last modified Time\n    zipHeader += this.getBytes(this.getModifiedDate(date), 2); // last modified date\n    zipHeader += this.getBytes(data.crc32Value, 4); // crc-32 value\n    zipHeader += this.getBytes(data.compressedSize, 4); // compressed file size\n    zipHeader += this.getBytes(data.uncompressedDataSize, 4); // uncompressed file size\n    zipHeader += this.getBytes(data.fileName.length, 2); // file name length\n    zipHeader += this.getBytes(0, 2); // extra field length\n    return zipHeader;\n  };\n  ZipArchive.prototype.writeZippedContent = function (fileName, zipData, localDirLen, skipFileSave) {\n    var cenDirLen = 0;\n    var buffer = [];\n    for (var i = 0; i < zipData.length; i++) {\n      var item = zipData[i];\n      cenDirLen += item.centralDir.length;\n      buffer.push(this.getArrayBuffer(item.localHeader));\n      while (item.compressedData.compressedData.length) {\n        buffer.push(item.compressedData.compressedData.shift().buffer);\n      }\n    }\n    for (var i = 0; i < zipData.length; i++) {\n      buffer.push(this.getArrayBuffer(zipData[i].centralDir));\n    }\n    buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));\n    var blob = new Blob(buffer, {\n      type: 'application/zip'\n    });\n    if (!skipFileSave) {\n      Save.save(fileName, blob);\n    }\n    return blob;\n  };\n  ZipArchive.prototype.writeCentralDirectory = function (data, localHeader, offset, externalFileAttribute) {\n    var directoryHeader = 'PK\\x01\\x02' + this.getBytes(0x0014, 2) + localHeader +\n    // inherit from file header\n    this.getBytes(0, 2) +\n    // comment length\n    '\\x00\\x00' + '\\x00\\x00' +\n    // internal file attributes \n    this.getBytes(externalFileAttribute, 4) +\n    // external file attributes\n    this.getBytes(offset, 4) +\n    // local fileHeader relative offset\n    data.fileName;\n    return directoryHeader;\n  };\n  ZipArchive.prototype.writeFooter = function (zipData, centralLength, localLength) {\n    var dirEnd = 'PK\\x05\\x06' + '\\x00\\x00' + '\\x00\\x00' + this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) + this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) + this.getBytes(0, 2);\n    return dirEnd;\n  };\n  ZipArchive.prototype.getArrayBuffer = function (input) {\n    var a = new Uint8Array(input.length);\n    for (var j = 0; j < input.length; ++j) {\n      a[j] = input.charCodeAt(j) & 0xFF;\n    }\n    return a.buffer;\n  };\n  ZipArchive.prototype.getBytes = function (value, offset) {\n    var bytes = '';\n    for (var i = 0; i < offset; i++) {\n      bytes += String.fromCharCode(value & 0xff);\n      value = value >>> 8;\n    }\n    return bytes;\n  };\n  ZipArchive.prototype.getModifiedTime = function (date) {\n    var modTime = date.getHours();\n    modTime = modTime << 6;\n    modTime = modTime | date.getMinutes();\n    modTime = modTime << 5;\n    return modTime = modTime | date.getSeconds() / 2;\n  };\n  ZipArchive.prototype.getModifiedDate = function (date) {\n    var modiDate = date.getFullYear() - 1980;\n    modiDate = modiDate << 4;\n    modiDate = modiDate | date.getMonth() + 1;\n    modiDate = modiDate << 5;\n    return modiDate = modiDate | date.getDate();\n  };\n  ZipArchive.prototype.calculateCrc32Value = function (crc32Value, input, crc32Table) {\n    crc32Value ^= -1;\n    for (var i = 0; i < input.length; i++) {\n      crc32Value = crc32Value >>> 8 ^ crc32Table[(crc32Value ^ input[i]) & 0xFF];\n    }\n    return crc32Value ^ -1;\n  };\n  /**\n   * construct cyclic redundancy code table\n   * @private\n   */\n  ZipArchive.initCrc32Table = function () {\n    var i;\n    for (var j = 0; j < 256; j++) {\n      i = j;\n      for (var k = 0; k < 8; k++) {\n        i = i & 1 ? 0xEDB88320 ^ i >>> 1 : i >>> 1;\n      }\n      CRC32TABLE[j] = i;\n    }\n  };\n  return ZipArchive;\n}();\nexport { ZipArchive };\n/**\n * Class represent unique ZipArchive item\n * ```typescript\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * ```\n */\nvar ZipArchiveItem = /** @class */function () {\n  /**\n   * constructor for creating {ZipArchiveItem} instance\n   * @param {Blob|ArrayBuffer} data file data\n   * @param {itemName} itemName absolute file path\n   */\n  function ZipArchiveItem(data, itemName) {\n    if (data === null || data === undefined) {\n      throw new Error('ArgumentException: data cannot be null or undefined');\n    }\n    if (itemName === null || itemName === undefined) {\n      throw new Error('ArgumentException: string cannot be null or undefined');\n    }\n    if (itemName.length === 0) {\n      throw new Error('string cannot be empty');\n    }\n    this.data = data;\n    this.name = itemName;\n  }\n  Object.defineProperty(ZipArchiveItem.prototype, \"name\", {\n    /**\n     * Get the name of archive item\n     * @returns string\n     */\n    get: function () {\n      return this.fileName;\n    },\n    /**\n     * Set the name of archive item\n     * @param  {string} value\n     */\n    set: function (value) {\n      this.fileName = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * release allocated un-managed resource\n   * @returns {void}\n   */\n  ZipArchiveItem.prototype.destroy = function () {\n    this.fileName = undefined;\n    this.data = undefined;\n  };\n  return ZipArchiveItem;\n}();\nexport { ZipArchiveItem };","map":{"version":3,"names":["CompressedStreamWriter","Save","CRC32TABLE","ZipArchive","length","initCrc32Table","files","level","isMicrosoftBrowser","navigator","msSaveBlob","Object","defineProperty","prototype","get","set","enumerable","configurable","undefined","addItem","item","Error","i","file","ZipArchiveItem","name","push","addDirectory","directoryName","slice","indexOf","getItem","index","contains","save","fileName","zipArchive","promise","Promise","resolve","reject","saveInternal","then","saveAsBlob","blob","skipFileSave","_this","zipData","dirLength","compressedObject","getCompressedData","data","constructZippedObject","isDirectory","writeZippedContent","destroy","reader_1","FileReader","onload","input","Uint8Array","result","crc32Value","compressedData","compressedSize","uncompressedDataSize","compressionType","compressData","length_1","calculateCrc32Value","readAsArrayBuffer","crc32Table","compressor","currentIndex","nextIndex","close","Math","min","subArray","subarray","write","zipParts","extFileAttr","date","Date","header","writeHeader","localHeader","centralDir","writeCentralDirectory","zipHeader","getBytes","getModifiedTime","getModifiedDate","localDirLen","cenDirLen","buffer","getArrayBuffer","shift","writeFooter","Blob","type","offset","externalFileAttribute","directoryHeader","centralLength","localLength","dirEnd","a","j","charCodeAt","value","bytes","String","fromCharCode","modTime","getHours","getMinutes","getSeconds","modiDate","getFullYear","getMonth","getDate","k","itemName"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-compression/src/zip-archive.js"],"sourcesContent":["import { CompressedStreamWriter } from './compression-writer';\nimport { Save } from '@syncfusion/ej2-file-utils';\nvar CRC32TABLE = [];\n/**\n * class provide compression library\n * ```typescript\n * let archive = new ZipArchive();\n * archive.compressionLevel = 'Normal';\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * archive.addItem(archiveItem);\n * archive.save(fileName.zip);\n * ```\n */\nvar ZipArchive = /** @class */ (function () {\n    /**\n     * constructor for creating ZipArchive instance\n     */\n    function ZipArchive() {\n        if (CRC32TABLE.length === 0) {\n            ZipArchive.initCrc32Table();\n        }\n        this.files = [];\n        this.level = 'Normal';\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(ZipArchive.prototype, \"compressionLevel\", {\n        /**\n         * gets compression level\n         */\n        get: function () {\n            return this.level;\n        },\n        /**\n         * sets compression level\n         */\n        set: function (level) {\n            this.level = level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZipArchive.prototype, \"length\", {\n        /**\n         * gets items count\n         */\n        get: function () {\n            if (this.files === undefined) {\n                return 0;\n            }\n            return this.files.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * add new item to archive\n     * @param {ZipArchiveItem} item - item to be added\n     * @returns {void}\n     */\n    ZipArchive.prototype.addItem = function (item) {\n        if (item === null || item === undefined) {\n            throw new Error('ArgumentException: item cannot be null or undefined');\n        }\n        for (var i = 0; i < this.files.length; i++) {\n            var file = this.files[i];\n            if (file instanceof ZipArchiveItem) {\n                if (file.name === item.name) {\n                    throw new Error('item with same name already exist');\n                }\n            }\n        }\n        this.files.push(item);\n    };\n    /**\n     * add new directory to archive\n     * @param directoryName directoryName to be created\n     * @returns {void}\n     */\n    ZipArchive.prototype.addDirectory = function (directoryName) {\n        if (directoryName === null || directoryName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (directoryName.length === 0) {\n            throw new Error('ArgumentException: string cannot be empty');\n        }\n        if (directoryName.slice(-1) !== '/') {\n            directoryName += '/';\n        }\n        if (this.files.indexOf(directoryName) !== -1) {\n            throw new Error('item with same name already exist');\n        }\n        this.files.push(directoryName);\n    };\n    /**\n     * gets item at specified index\n     * @param {number} index - item index\n     * @returns {ZipArchiveItem}\n     */\n    ZipArchive.prototype.getItem = function (index) {\n        if (index >= 0 && index < this.files.length) {\n            return this.files[index];\n        }\n        return undefined;\n    };\n    /**\n     * determines whether an element is in the collection\n     * @param {string | ZipArchiveItem} item - item to search\n     * @returns {boolean}\n     */\n    ZipArchive.prototype.contains = function (item) {\n        return this.files.indexOf(item) !== -1 ? true : false;\n    };\n    /**\n     * save archive with specified file name\n     * @param {string} fileName save archive with specified file name\n     * @returns {Promise<ZipArchive>}\n     */\n    ZipArchive.prototype.save = function (fileName) {\n        if (fileName === null || fileName === undefined || fileName.length === 0) {\n            throw new Error('ArgumentException: fileName cannot be null or undefined');\n        }\n        if (this.files.length === 0) {\n            throw new Error('InvalidOperation');\n        }\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            zipArchive.saveInternal(fileName, false).then(function () {\n                resolve(zipArchive);\n            });\n        });\n    };\n    /**\n     * Save archive as blob\n     * @return {Promise<Blob>}\n     */\n    ZipArchive.prototype.saveAsBlob = function () {\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            zipArchive.saveInternal('', true).then(function (blob) {\n                resolve(blob);\n            });\n        });\n    };\n    ZipArchive.prototype.saveInternal = function (fileName, skipFileSave) {\n        var _this = this;\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            var zipData = [];\n            var dirLength = 0;\n            for (var i = 0; i < zipArchive.files.length; i++) {\n                var compressedObject = _this.getCompressedData(_this.files[i]);\n                compressedObject.then(function (data) {\n                    dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);\n                    if (zipData.length === zipArchive.files.length) {\n                        var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);\n                        resolve(blob);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    ZipArchive.prototype.destroy = function () {\n        if (this.files !== undefined && this.files.length > 0) {\n            for (var i = 0; i < this.files.length; i++) {\n                var file = this.files[i];\n                if (file instanceof ZipArchiveItem) {\n                    file.destroy();\n                }\n                file = undefined;\n            }\n            this.files = [];\n        }\n        this.files = undefined;\n        this.level = undefined;\n    };\n    ZipArchive.prototype.getCompressedData = function (item) {\n        var zipArchive = this;\n        var promise = new Promise(function (resolve, reject) {\n            if (item instanceof ZipArchiveItem) {\n                var reader_1 = new FileReader();\n                reader_1.onload = function () {\n                    var input = new Uint8Array(reader_1.result);\n                    var data = {\n                        fileName: item.name, crc32Value: 0, compressedData: [],\n                        compressedSize: undefined, uncompressedDataSize: input.length, compressionType: undefined,\n                        isDirectory: false\n                    };\n                    if (zipArchive.level === 'Normal') {\n                        zipArchive.compressData(input, data, CRC32TABLE);\n                        var length_1 = 0;\n                        for (var i = 0; i < data.compressedData.length; i++) {\n                            length_1 += data.compressedData[i].length;\n                        }\n                        data.compressedSize = length_1;\n                        data.compressionType = '\\x08\\x00'; //Deflated = 8\n                    }\n                    else {\n                        data.compressedSize = input.length;\n                        data.crc32Value = zipArchive.calculateCrc32Value(0, input, CRC32TABLE);\n                        data.compressionType = '\\x00\\x00'; // Stored = 0\n                        data.compressedData.push(input);\n                    }\n                    resolve(data);\n                };\n                reader_1.readAsArrayBuffer(item.data);\n            }\n            else {\n                var data = {\n                    fileName: item, crc32Value: 0, compressedData: '', compressedSize: 0, uncompressedDataSize: 0,\n                    compressionType: '\\x00\\x00', isDirectory: true\n                };\n                resolve(data);\n            }\n        });\n        return promise;\n    };\n    ZipArchive.prototype.compressData = function (input, data, crc32Table) {\n        var compressor = new CompressedStreamWriter(true);\n        var currentIndex = 0;\n        var nextIndex = 0;\n        do {\n            if (currentIndex >= input.length) {\n                compressor.close();\n                break;\n            }\n            nextIndex = Math.min(input.length, currentIndex + 16384);\n            var subArray = input.subarray(currentIndex, nextIndex);\n            data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);\n            compressor.write(subArray, 0, nextIndex - currentIndex);\n            currentIndex = nextIndex;\n        } while (currentIndex <= input.length);\n        data.compressedData = compressor.compressedData;\n        compressor.destroy();\n    };\n    ZipArchive.prototype.constructZippedObject = function (zipParts, data, dirLength, isDirectory) {\n        var extFileAttr = 0;\n        var date = new Date();\n        if (isDirectory) {\n            extFileAttr = extFileAttr | 0x00010; // directory flag\n        }\n        extFileAttr = extFileAttr | (0 & 0x3F);\n        var header = this.writeHeader(data, date);\n        var localHeader = 'PK\\x03\\x04' + header + data.fileName;\n        var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);\n        zipParts.push({ localHeader: localHeader, centralDir: centralDir, compressedData: data });\n        return dirLength + localHeader.length + data.compressedSize;\n    };\n    ZipArchive.prototype.writeHeader = function (data, date) {\n        var zipHeader = '';\n        zipHeader += '\\x0A\\x00' + '\\x00\\x00'; // version needed to extract & general purpose bit flag\n        zipHeader += data.compressionType; // compression method Deflate=8,Stored=0\n        zipHeader += this.getBytes(this.getModifiedTime(date), 2); // last modified Time\n        zipHeader += this.getBytes(this.getModifiedDate(date), 2); // last modified date\n        zipHeader += this.getBytes(data.crc32Value, 4); // crc-32 value\n        zipHeader += this.getBytes(data.compressedSize, 4); // compressed file size\n        zipHeader += this.getBytes(data.uncompressedDataSize, 4); // uncompressed file size\n        zipHeader += this.getBytes(data.fileName.length, 2); // file name length\n        zipHeader += this.getBytes(0, 2); // extra field length\n        return zipHeader;\n    };\n    ZipArchive.prototype.writeZippedContent = function (fileName, zipData, localDirLen, skipFileSave) {\n        var cenDirLen = 0;\n        var buffer = [];\n        for (var i = 0; i < zipData.length; i++) {\n            var item = zipData[i];\n            cenDirLen += item.centralDir.length;\n            buffer.push(this.getArrayBuffer(item.localHeader));\n            while (item.compressedData.compressedData.length) {\n                buffer.push(item.compressedData.compressedData.shift().buffer);\n            }\n        }\n        for (var i = 0; i < zipData.length; i++) {\n            buffer.push(this.getArrayBuffer(zipData[i].centralDir));\n        }\n        buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));\n        var blob = new Blob(buffer, { type: 'application/zip' });\n        if (!skipFileSave) {\n            Save.save(fileName, blob);\n        }\n        return blob;\n    };\n    ZipArchive.prototype.writeCentralDirectory = function (data, localHeader, offset, externalFileAttribute) {\n        var directoryHeader = 'PK\\x01\\x02' +\n            this.getBytes(0x0014, 2) + localHeader + // inherit from file header\n            this.getBytes(0, 2) + // comment length\n            '\\x00\\x00' + '\\x00\\x00' + // internal file attributes \n            this.getBytes(externalFileAttribute, 4) + // external file attributes\n            this.getBytes(offset, 4) + // local fileHeader relative offset\n            data.fileName;\n        return directoryHeader;\n    };\n    ZipArchive.prototype.writeFooter = function (zipData, centralLength, localLength) {\n        var dirEnd = 'PK\\x05\\x06' + '\\x00\\x00' + '\\x00\\x00' +\n            this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) +\n            this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) +\n            this.getBytes(0, 2);\n        return dirEnd;\n    };\n    ZipArchive.prototype.getArrayBuffer = function (input) {\n        var a = new Uint8Array(input.length);\n        for (var j = 0; j < input.length; ++j) {\n            a[j] = input.charCodeAt(j) & 0xFF;\n        }\n        return a.buffer;\n    };\n    ZipArchive.prototype.getBytes = function (value, offset) {\n        var bytes = '';\n        for (var i = 0; i < offset; i++) {\n            bytes += String.fromCharCode(value & 0xff);\n            value = value >>> 8;\n        }\n        return bytes;\n    };\n    ZipArchive.prototype.getModifiedTime = function (date) {\n        var modTime = date.getHours();\n        modTime = modTime << 6;\n        modTime = modTime | date.getMinutes();\n        modTime = modTime << 5;\n        return modTime = modTime | date.getSeconds() / 2;\n    };\n    ZipArchive.prototype.getModifiedDate = function (date) {\n        var modiDate = date.getFullYear() - 1980;\n        modiDate = modiDate << 4;\n        modiDate = modiDate | (date.getMonth() + 1);\n        modiDate = modiDate << 5;\n        return modiDate = modiDate | date.getDate();\n    };\n    ZipArchive.prototype.calculateCrc32Value = function (crc32Value, input, crc32Table) {\n        crc32Value ^= -1;\n        for (var i = 0; i < input.length; i++) {\n            crc32Value = (crc32Value >>> 8) ^ crc32Table[(crc32Value ^ input[i]) & 0xFF];\n        }\n        return (crc32Value ^ (-1));\n    };\n    /**\n     * construct cyclic redundancy code table\n     * @private\n     */\n    ZipArchive.initCrc32Table = function () {\n        var i;\n        for (var j = 0; j < 256; j++) {\n            i = j;\n            for (var k = 0; k < 8; k++) {\n                i = ((i & 1) ? (0xEDB88320 ^ (i >>> 1)) : (i >>> 1));\n            }\n            CRC32TABLE[j] = i;\n        }\n    };\n    return ZipArchive;\n}());\nexport { ZipArchive };\n/**\n * Class represent unique ZipArchive item\n * ```typescript\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * ```\n */\nvar ZipArchiveItem = /** @class */ (function () {\n    /**\n     * constructor for creating {ZipArchiveItem} instance\n     * @param {Blob|ArrayBuffer} data file data\n     * @param {itemName} itemName absolute file path\n     */\n    function ZipArchiveItem(data, itemName) {\n        if (data === null || data === undefined) {\n            throw new Error('ArgumentException: data cannot be null or undefined');\n        }\n        if (itemName === null || itemName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (itemName.length === 0) {\n            throw new Error('string cannot be empty');\n        }\n        this.data = data;\n        this.name = itemName;\n    }\n    Object.defineProperty(ZipArchiveItem.prototype, \"name\", {\n        /**\n         * Get the name of archive item\n         * @returns string\n         */\n        get: function () {\n            return this.fileName;\n        },\n        /**\n         * Set the name of archive item\n         * @param  {string} value\n         */\n        set: function (value) {\n            this.fileName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    ZipArchiveItem.prototype.destroy = function () {\n        this.fileName = undefined;\n        this.data = undefined;\n    };\n    return ZipArchiveItem;\n}());\nexport { ZipArchiveItem };\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,sBAAsB;AAC7D,SAASC,IAAI,QAAQ,4BAA4B;AACjD,IAAIC,UAAU,GAAG,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC;AACJ;AACA;EACI,SAASA,UAAU,GAAG;IAClB,IAAID,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MACzBD,UAAU,CAACE,cAAc,EAAE;IAC/B;IACA,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,KAAK,GAAG,QAAQ;IACrBN,IAAI,CAACO,kBAAkB,GAAG,CAAE,CAACC,SAAS,CAACC,UAAW;EACtD;EACAC,MAAM,CAACC,cAAc,CAACT,UAAU,CAACU,SAAS,EAAE,kBAAkB,EAAE;IAC5D;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACP,KAAK;IACrB,CAAC;IACD;AACR;AACA;IACQQ,GAAG,EAAE,UAAUR,KAAK,EAAE;MAClB,IAAI,CAACA,KAAK,GAAGA,KAAK;IACtB,CAAC;IACDS,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFN,MAAM,CAACC,cAAc,CAACT,UAAU,CAACU,SAAS,EAAE,QAAQ,EAAE;IAClD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,IAAI,IAAI,CAACR,KAAK,KAAKY,SAAS,EAAE;QAC1B,OAAO,CAAC;MACZ;MACA,OAAO,IAAI,CAACZ,KAAK,CAACF,MAAM;IAC5B,CAAC;IACDY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;EACId,UAAU,CAACU,SAAS,CAACM,OAAO,GAAG,UAAUC,IAAI,EAAE;IAC3C,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKF,SAAS,EAAE;MACrC,MAAM,IAAIG,KAAK,CAAC,qDAAqD,CAAC;IAC1E;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChB,KAAK,CAACF,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACxC,IAAIC,IAAI,GAAG,IAAI,CAACjB,KAAK,CAACgB,CAAC,CAAC;MACxB,IAAIC,IAAI,YAAYC,cAAc,EAAE;QAChC,IAAID,IAAI,CAACE,IAAI,KAAKL,IAAI,CAACK,IAAI,EAAE;UACzB,MAAM,IAAIJ,KAAK,CAAC,mCAAmC,CAAC;QACxD;MACJ;IACJ;IACA,IAAI,CAACf,KAAK,CAACoB,IAAI,CAACN,IAAI,CAAC;EACzB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjB,UAAU,CAACU,SAAS,CAACc,YAAY,GAAG,UAAUC,aAAa,EAAE;IACzD,IAAIA,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAKV,SAAS,EAAE;MACvD,MAAM,IAAIG,KAAK,CAAC,uDAAuD,CAAC;IAC5E;IACA,IAAIO,aAAa,CAACxB,MAAM,KAAK,CAAC,EAAE;MAC5B,MAAM,IAAIiB,KAAK,CAAC,2CAA2C,CAAC;IAChE;IACA,IAAIO,aAAa,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACjCD,aAAa,IAAI,GAAG;IACxB;IACA,IAAI,IAAI,CAACtB,KAAK,CAACwB,OAAO,CAACF,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1C,MAAM,IAAIP,KAAK,CAAC,mCAAmC,CAAC;IACxD;IACA,IAAI,CAACf,KAAK,CAACoB,IAAI,CAACE,aAAa,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIzB,UAAU,CAACU,SAAS,CAACkB,OAAO,GAAG,UAAUC,KAAK,EAAE;IAC5C,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,IAAI,CAAC1B,KAAK,CAACF,MAAM,EAAE;MACzC,OAAO,IAAI,CAACE,KAAK,CAAC0B,KAAK,CAAC;IAC5B;IACA,OAAOd,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIf,UAAU,CAACU,SAAS,CAACoB,QAAQ,GAAG,UAAUb,IAAI,EAAE;IAC5C,OAAO,IAAI,CAACd,KAAK,CAACwB,OAAO,CAACV,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK;EACzD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjB,UAAU,CAACU,SAAS,CAACqB,IAAI,GAAG,UAAUC,QAAQ,EAAE;IAC5C,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKjB,SAAS,IAAIiB,QAAQ,CAAC/B,MAAM,KAAK,CAAC,EAAE;MACtE,MAAM,IAAIiB,KAAK,CAAC,yDAAyD,CAAC;IAC9E;IACA,IAAI,IAAI,CAACf,KAAK,CAACF,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM,IAAIiB,KAAK,CAAC,kBAAkB,CAAC;IACvC;IACA,IAAIe,UAAU,GAAG,IAAI;IACrB,IAAIC,OAAO;IACX,OAAOA,OAAO,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACpDJ,UAAU,CAACK,YAAY,CAACN,QAAQ,EAAE,KAAK,CAAC,CAACO,IAAI,CAAC,YAAY;QACtDH,OAAO,CAACH,UAAU,CAAC;MACvB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIjC,UAAU,CAACU,SAAS,CAAC8B,UAAU,GAAG,YAAY;IAC1C,IAAIP,UAAU,GAAG,IAAI;IACrB,IAAIC,OAAO;IACX,OAAOA,OAAO,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACpDJ,UAAU,CAACK,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAACC,IAAI,CAAC,UAAUE,IAAI,EAAE;QACnDL,OAAO,CAACK,IAAI,CAAC;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDzC,UAAU,CAACU,SAAS,CAAC4B,YAAY,GAAG,UAAUN,QAAQ,EAAEU,YAAY,EAAE;IAClE,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIV,UAAU,GAAG,IAAI;IACrB,IAAIC,OAAO;IACX,OAAOA,OAAO,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACpD,IAAIO,OAAO,GAAG,EAAE;MAChB,IAAIC,SAAS,GAAG,CAAC;MACjB,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,UAAU,CAAC9B,KAAK,CAACF,MAAM,EAAEkB,CAAC,EAAE,EAAE;QAC9C,IAAI2B,gBAAgB,GAAGH,KAAK,CAACI,iBAAiB,CAACJ,KAAK,CAACxC,KAAK,CAACgB,CAAC,CAAC,CAAC;QAC9D2B,gBAAgB,CAACP,IAAI,CAAC,UAAUS,IAAI,EAAE;UAClCH,SAAS,GAAGZ,UAAU,CAACgB,qBAAqB,CAACL,OAAO,EAAEI,IAAI,EAAEH,SAAS,EAAEG,IAAI,CAACE,WAAW,CAAC;UACxF,IAAIN,OAAO,CAAC3C,MAAM,KAAKgC,UAAU,CAAC9B,KAAK,CAACF,MAAM,EAAE;YAC5C,IAAIwC,IAAI,GAAGR,UAAU,CAACkB,kBAAkB,CAACnB,QAAQ,EAAEY,OAAO,EAAEC,SAAS,EAAEH,YAAY,CAAC;YACpFN,OAAO,CAACK,IAAI,CAAC;UACjB;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIzC,UAAU,CAACU,SAAS,CAAC0C,OAAO,GAAG,YAAY;IACvC,IAAI,IAAI,CAACjD,KAAK,KAAKY,SAAS,IAAI,IAAI,CAACZ,KAAK,CAACF,MAAM,GAAG,CAAC,EAAE;MACnD,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChB,KAAK,CAACF,MAAM,EAAEkB,CAAC,EAAE,EAAE;QACxC,IAAIC,IAAI,GAAG,IAAI,CAACjB,KAAK,CAACgB,CAAC,CAAC;QACxB,IAAIC,IAAI,YAAYC,cAAc,EAAE;UAChCD,IAAI,CAACgC,OAAO,EAAE;QAClB;QACAhC,IAAI,GAAGL,SAAS;MACpB;MACA,IAAI,CAACZ,KAAK,GAAG,EAAE;IACnB;IACA,IAAI,CAACA,KAAK,GAAGY,SAAS;IACtB,IAAI,CAACX,KAAK,GAAGW,SAAS;EAC1B,CAAC;EACDf,UAAU,CAACU,SAAS,CAACqC,iBAAiB,GAAG,UAAU9B,IAAI,EAAE;IACrD,IAAIgB,UAAU,GAAG,IAAI;IACrB,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACjD,IAAIpB,IAAI,YAAYI,cAAc,EAAE;QAChC,IAAIgC,QAAQ,GAAG,IAAIC,UAAU,EAAE;QAC/BD,QAAQ,CAACE,MAAM,GAAG,YAAY;UAC1B,IAAIC,KAAK,GAAG,IAAIC,UAAU,CAACJ,QAAQ,CAACK,MAAM,CAAC;UAC3C,IAAIV,IAAI,GAAG;YACPhB,QAAQ,EAAEf,IAAI,CAACK,IAAI;YAAEqC,UAAU,EAAE,CAAC;YAAEC,cAAc,EAAE,EAAE;YACtDC,cAAc,EAAE9C,SAAS;YAAE+C,oBAAoB,EAAEN,KAAK,CAACvD,MAAM;YAAE8D,eAAe,EAAEhD,SAAS;YACzFmC,WAAW,EAAE;UACjB,CAAC;UACD,IAAIjB,UAAU,CAAC7B,KAAK,KAAK,QAAQ,EAAE;YAC/B6B,UAAU,CAAC+B,YAAY,CAACR,KAAK,EAAER,IAAI,EAAEjD,UAAU,CAAC;YAChD,IAAIkE,QAAQ,GAAG,CAAC;YAChB,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,IAAI,CAACY,cAAc,CAAC3D,MAAM,EAAEkB,CAAC,EAAE,EAAE;cACjD8C,QAAQ,IAAIjB,IAAI,CAACY,cAAc,CAACzC,CAAC,CAAC,CAAClB,MAAM;YAC7C;YACA+C,IAAI,CAACa,cAAc,GAAGI,QAAQ;YAC9BjB,IAAI,CAACe,eAAe,GAAG,UAAU,CAAC,CAAC;UACvC,CAAC,MACI;YACDf,IAAI,CAACa,cAAc,GAAGL,KAAK,CAACvD,MAAM;YAClC+C,IAAI,CAACW,UAAU,GAAG1B,UAAU,CAACiC,mBAAmB,CAAC,CAAC,EAAEV,KAAK,EAAEzD,UAAU,CAAC;YACtEiD,IAAI,CAACe,eAAe,GAAG,UAAU,CAAC,CAAC;YACnCf,IAAI,CAACY,cAAc,CAACrC,IAAI,CAACiC,KAAK,CAAC;UACnC;UACApB,OAAO,CAACY,IAAI,CAAC;QACjB,CAAC;QACDK,QAAQ,CAACc,iBAAiB,CAAClD,IAAI,CAAC+B,IAAI,CAAC;MACzC,CAAC,MACI;QACD,IAAIA,IAAI,GAAG;UACPhB,QAAQ,EAAEf,IAAI;UAAE0C,UAAU,EAAE,CAAC;UAAEC,cAAc,EAAE,EAAE;UAAEC,cAAc,EAAE,CAAC;UAAEC,oBAAoB,EAAE,CAAC;UAC7FC,eAAe,EAAE,UAAU;UAAEb,WAAW,EAAE;QAC9C,CAAC;QACDd,OAAO,CAACY,IAAI,CAAC;MACjB;IACJ,CAAC,CAAC;IACF,OAAOd,OAAO;EAClB,CAAC;EACDlC,UAAU,CAACU,SAAS,CAACsD,YAAY,GAAG,UAAUR,KAAK,EAAER,IAAI,EAAEoB,UAAU,EAAE;IACnE,IAAIC,UAAU,GAAG,IAAIxE,sBAAsB,CAAC,IAAI,CAAC;IACjD,IAAIyE,YAAY,GAAG,CAAC;IACpB,IAAIC,SAAS,GAAG,CAAC;IACjB,GAAG;MACC,IAAID,YAAY,IAAId,KAAK,CAACvD,MAAM,EAAE;QAC9BoE,UAAU,CAACG,KAAK,EAAE;QAClB;MACJ;MACAD,SAAS,GAAGE,IAAI,CAACC,GAAG,CAAClB,KAAK,CAACvD,MAAM,EAAEqE,YAAY,GAAG,KAAK,CAAC;MACxD,IAAIK,QAAQ,GAAGnB,KAAK,CAACoB,QAAQ,CAACN,YAAY,EAAEC,SAAS,CAAC;MACtDvB,IAAI,CAACW,UAAU,GAAG,IAAI,CAACO,mBAAmB,CAAClB,IAAI,CAACW,UAAU,EAAEgB,QAAQ,EAAEP,UAAU,CAAC;MACjFC,UAAU,CAACQ,KAAK,CAACF,QAAQ,EAAE,CAAC,EAAEJ,SAAS,GAAGD,YAAY,CAAC;MACvDA,YAAY,GAAGC,SAAS;IAC5B,CAAC,QAAQD,YAAY,IAAId,KAAK,CAACvD,MAAM;IACrC+C,IAAI,CAACY,cAAc,GAAGS,UAAU,CAACT,cAAc;IAC/CS,UAAU,CAACjB,OAAO,EAAE;EACxB,CAAC;EACDpD,UAAU,CAACU,SAAS,CAACuC,qBAAqB,GAAG,UAAU6B,QAAQ,EAAE9B,IAAI,EAAEH,SAAS,EAAEK,WAAW,EAAE;IAC3F,IAAI6B,WAAW,GAAG,CAAC;IACnB,IAAIC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACrB,IAAI/B,WAAW,EAAE;MACb6B,WAAW,GAAGA,WAAW,GAAG,OAAO,CAAC,CAAC;IACzC;;IACAA,WAAW,GAAGA,WAAW,GAAI,CAAC,GAAG,IAAK;IACtC,IAAIG,MAAM,GAAG,IAAI,CAACC,WAAW,CAACnC,IAAI,EAAEgC,IAAI,CAAC;IACzC,IAAII,WAAW,GAAG,YAAY,GAAGF,MAAM,GAAGlC,IAAI,CAAChB,QAAQ;IACvD,IAAIqD,UAAU,GAAG,IAAI,CAACC,qBAAqB,CAACtC,IAAI,EAAEkC,MAAM,EAAErC,SAAS,EAAEkC,WAAW,CAAC;IACjFD,QAAQ,CAACvD,IAAI,CAAC;MAAE6D,WAAW,EAAEA,WAAW;MAAEC,UAAU,EAAEA,UAAU;MAAEzB,cAAc,EAAEZ;IAAK,CAAC,CAAC;IACzF,OAAOH,SAAS,GAAGuC,WAAW,CAACnF,MAAM,GAAG+C,IAAI,CAACa,cAAc;EAC/D,CAAC;EACD7D,UAAU,CAACU,SAAS,CAACyE,WAAW,GAAG,UAAUnC,IAAI,EAAEgC,IAAI,EAAE;IACrD,IAAIO,SAAS,GAAG,EAAE;IAClBA,SAAS,IAAI,UAAU,GAAG,UAAU,CAAC,CAAC;IACtCA,SAAS,IAAIvC,IAAI,CAACe,eAAe,CAAC,CAAC;IACnCwB,SAAS,IAAI,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACC,eAAe,CAACT,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3DO,SAAS,IAAI,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACE,eAAe,CAACV,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3DO,SAAS,IAAI,IAAI,CAACC,QAAQ,CAACxC,IAAI,CAACW,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;IAChD4B,SAAS,IAAI,IAAI,CAACC,QAAQ,CAACxC,IAAI,CAACa,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IACpD0B,SAAS,IAAI,IAAI,CAACC,QAAQ,CAACxC,IAAI,CAACc,oBAAoB,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1DyB,SAAS,IAAI,IAAI,CAACC,QAAQ,CAACxC,IAAI,CAAChB,QAAQ,CAAC/B,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;IACrDsF,SAAS,IAAI,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,OAAOD,SAAS;EACpB,CAAC;EACDvF,UAAU,CAACU,SAAS,CAACyC,kBAAkB,GAAG,UAAUnB,QAAQ,EAAEY,OAAO,EAAE+C,WAAW,EAAEjD,YAAY,EAAE;IAC9F,IAAIkD,SAAS,GAAG,CAAC;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,OAAO,CAAC3C,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACrC,IAAIF,IAAI,GAAG2B,OAAO,CAACzB,CAAC,CAAC;MACrByE,SAAS,IAAI3E,IAAI,CAACoE,UAAU,CAACpF,MAAM;MACnC4F,MAAM,CAACtE,IAAI,CAAC,IAAI,CAACuE,cAAc,CAAC7E,IAAI,CAACmE,WAAW,CAAC,CAAC;MAClD,OAAOnE,IAAI,CAAC2C,cAAc,CAACA,cAAc,CAAC3D,MAAM,EAAE;QAC9C4F,MAAM,CAACtE,IAAI,CAACN,IAAI,CAAC2C,cAAc,CAACA,cAAc,CAACmC,KAAK,EAAE,CAACF,MAAM,CAAC;MAClE;IACJ;IACA,KAAK,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,OAAO,CAAC3C,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACrC0E,MAAM,CAACtE,IAAI,CAAC,IAAI,CAACuE,cAAc,CAAClD,OAAO,CAACzB,CAAC,CAAC,CAACkE,UAAU,CAAC,CAAC;IAC3D;IACAQ,MAAM,CAACtE,IAAI,CAAC,IAAI,CAACuE,cAAc,CAAC,IAAI,CAACE,WAAW,CAACpD,OAAO,EAAEgD,SAAS,EAAED,WAAW,CAAC,CAAC,CAAC;IACnF,IAAIlD,IAAI,GAAG,IAAIwD,IAAI,CAACJ,MAAM,EAAE;MAAEK,IAAI,EAAE;IAAkB,CAAC,CAAC;IACxD,IAAI,CAACxD,YAAY,EAAE;MACf5C,IAAI,CAACiC,IAAI,CAACC,QAAQ,EAAES,IAAI,CAAC;IAC7B;IACA,OAAOA,IAAI;EACf,CAAC;EACDzC,UAAU,CAACU,SAAS,CAAC4E,qBAAqB,GAAG,UAAUtC,IAAI,EAAEoC,WAAW,EAAEe,MAAM,EAAEC,qBAAqB,EAAE;IACrG,IAAIC,eAAe,GAAG,YAAY,GAC9B,IAAI,CAACb,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,GAAGJ,WAAW;IAAG;IACzC,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAAG;IACtB,UAAU,GAAG,UAAU;IAAG;IAC1B,IAAI,CAACA,QAAQ,CAACY,qBAAqB,EAAE,CAAC,CAAC;IAAG;IAC1C,IAAI,CAACZ,QAAQ,CAACW,MAAM,EAAE,CAAC,CAAC;IAAG;IAC3BnD,IAAI,CAAChB,QAAQ;IACjB,OAAOqE,eAAe;EAC1B,CAAC;EACDrG,UAAU,CAACU,SAAS,CAACsF,WAAW,GAAG,UAAUpD,OAAO,EAAE0D,aAAa,EAAEC,WAAW,EAAE;IAC9E,IAAIC,MAAM,GAAG,YAAY,GAAG,UAAU,GAAG,UAAU,GAC/C,IAAI,CAAChB,QAAQ,CAAC5C,OAAO,CAAC3C,MAAM,EAAE,CAAC,CAAC,GAAG,IAAI,CAACuF,QAAQ,CAAC5C,OAAO,CAAC3C,MAAM,EAAE,CAAC,CAAC,GACnE,IAAI,CAACuF,QAAQ,CAACc,aAAa,EAAE,CAAC,CAAC,GAAG,IAAI,CAACd,QAAQ,CAACe,WAAW,EAAE,CAAC,CAAC,GAC/D,IAAI,CAACf,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACvB,OAAOgB,MAAM;EACjB,CAAC;EACDxG,UAAU,CAACU,SAAS,CAACoF,cAAc,GAAG,UAAUtC,KAAK,EAAE;IACnD,IAAIiD,CAAC,GAAG,IAAIhD,UAAU,CAACD,KAAK,CAACvD,MAAM,CAAC;IACpC,KAAK,IAAIyG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,KAAK,CAACvD,MAAM,EAAE,EAAEyG,CAAC,EAAE;MACnCD,CAAC,CAACC,CAAC,CAAC,GAAGlD,KAAK,CAACmD,UAAU,CAACD,CAAC,CAAC,GAAG,IAAI;IACrC;IACA,OAAOD,CAAC,CAACZ,MAAM;EACnB,CAAC;EACD7F,UAAU,CAACU,SAAS,CAAC8E,QAAQ,GAAG,UAAUoB,KAAK,EAAET,MAAM,EAAE;IACrD,IAAIU,KAAK,GAAG,EAAE;IACd,KAAK,IAAI1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgF,MAAM,EAAEhF,CAAC,EAAE,EAAE;MAC7B0F,KAAK,IAAIC,MAAM,CAACC,YAAY,CAACH,KAAK,GAAG,IAAI,CAAC;MAC1CA,KAAK,GAAGA,KAAK,KAAK,CAAC;IACvB;IACA,OAAOC,KAAK;EAChB,CAAC;EACD7G,UAAU,CAACU,SAAS,CAAC+E,eAAe,GAAG,UAAUT,IAAI,EAAE;IACnD,IAAIgC,OAAO,GAAGhC,IAAI,CAACiC,QAAQ,EAAE;IAC7BD,OAAO,GAAGA,OAAO,IAAI,CAAC;IACtBA,OAAO,GAAGA,OAAO,GAAGhC,IAAI,CAACkC,UAAU,EAAE;IACrCF,OAAO,GAAGA,OAAO,IAAI,CAAC;IACtB,OAAOA,OAAO,GAAGA,OAAO,GAAGhC,IAAI,CAACmC,UAAU,EAAE,GAAG,CAAC;EACpD,CAAC;EACDnH,UAAU,CAACU,SAAS,CAACgF,eAAe,GAAG,UAAUV,IAAI,EAAE;IACnD,IAAIoC,QAAQ,GAAGpC,IAAI,CAACqC,WAAW,EAAE,GAAG,IAAI;IACxCD,QAAQ,GAAGA,QAAQ,IAAI,CAAC;IACxBA,QAAQ,GAAGA,QAAQ,GAAIpC,IAAI,CAACsC,QAAQ,EAAE,GAAG,CAAE;IAC3CF,QAAQ,GAAGA,QAAQ,IAAI,CAAC;IACxB,OAAOA,QAAQ,GAAGA,QAAQ,GAAGpC,IAAI,CAACuC,OAAO,EAAE;EAC/C,CAAC;EACDvH,UAAU,CAACU,SAAS,CAACwD,mBAAmB,GAAG,UAAUP,UAAU,EAAEH,KAAK,EAAEY,UAAU,EAAE;IAChFT,UAAU,IAAI,CAAC,CAAC;IAChB,KAAK,IAAIxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqC,KAAK,CAACvD,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACnCwC,UAAU,GAAIA,UAAU,KAAK,CAAC,GAAIS,UAAU,CAAC,CAACT,UAAU,GAAGH,KAAK,CAACrC,CAAC,CAAC,IAAI,IAAI,CAAC;IAChF;IACA,OAAQwC,UAAU,GAAI,CAAC,CAAE;EAC7B,CAAC;EACD;AACJ;AACA;AACA;EACI3D,UAAU,CAACE,cAAc,GAAG,YAAY;IACpC,IAAIiB,CAAC;IACL,KAAK,IAAIuF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC1BvF,CAAC,GAAGuF,CAAC;MACL,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxBrG,CAAC,GAAKA,CAAC,GAAG,CAAC,GAAK,UAAU,GAAIA,CAAC,KAAK,CAAE,GAAKA,CAAC,KAAK,CAAG;MACxD;MACApB,UAAU,CAAC2G,CAAC,CAAC,GAAGvF,CAAC;IACrB;EACJ,CAAC;EACD,OAAOnB,UAAU;AACrB,CAAC,EAAG;AACJ,SAASA,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,IAAIqB,cAAc,GAAG,aAAe,YAAY;EAC5C;AACJ;AACA;AACA;AACA;EACI,SAASA,cAAc,CAAC2B,IAAI,EAAEyE,QAAQ,EAAE;IACpC,IAAIzE,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKjC,SAAS,EAAE;MACrC,MAAM,IAAIG,KAAK,CAAC,qDAAqD,CAAC;IAC1E;IACA,IAAIuG,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK1G,SAAS,EAAE;MAC7C,MAAM,IAAIG,KAAK,CAAC,uDAAuD,CAAC;IAC5E;IACA,IAAIuG,QAAQ,CAACxH,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIiB,KAAK,CAAC,wBAAwB,CAAC;IAC7C;IACA,IAAI,CAAC8B,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC1B,IAAI,GAAGmG,QAAQ;EACxB;EACAjH,MAAM,CAACC,cAAc,CAACY,cAAc,CAACX,SAAS,EAAE,MAAM,EAAE;IACpD;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACqB,QAAQ;IACxB,CAAC;IACD;AACR;AACA;AACA;IACQpB,GAAG,EAAE,UAAUgG,KAAK,EAAE;MAClB,IAAI,CAAC5E,QAAQ,GAAG4E,KAAK;IACzB,CAAC;IACD/F,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;EACIO,cAAc,CAACX,SAAS,CAAC0C,OAAO,GAAG,YAAY;IAC3C,IAAI,CAACpB,QAAQ,GAAGjB,SAAS;IACzB,IAAI,CAACiC,IAAI,GAAGjC,SAAS;EACzB,CAAC;EACD,OAAOM,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc"},"metadata":{},"sourceType":"module"}