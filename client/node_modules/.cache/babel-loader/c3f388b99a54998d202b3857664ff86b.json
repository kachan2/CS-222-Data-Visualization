{"ast":null,"code":"import { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\nvar PdfArray = /** @class */function () {\n  function PdfArray(array) {\n    //Fields\n    /**\n     * `startMark` - '['\n     * @private\n     */\n    this.startMark = '[';\n    /**\n     * `endMark` - ']'.\n     * @private\n     */\n    this.endMark = ']';\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n    this.position9 = -1;\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n    this.clonedObject9 = null;\n    /**\n     * Represents the Font dictionary.\n     * @hidden\n     * @private\n     */\n    this.isFont = false;\n    if (typeof array === 'undefined') {\n      this.internalElements = [];\n    } else {\n      if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n        var tempNumberArray = array;\n        for (var index = 0; index < tempNumberArray.length; index++) {\n          var pdfNumber = new PdfNumber(tempNumberArray[index]);\n          this.add(pdfNumber);\n        }\n        // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n      } else {\n        var tempArray = array;\n        // if (tempArray.Elements.length > 0) {\n        this.internalElements = [];\n        for (var index = 0; index < tempArray.elements.length; index++) {\n          this.internalElements.push(tempArray.elements[index]);\n        }\n        // }\n      }\n    }\n  }\n  //property\n  /**\n   * Gets the `IPdfSavable` at the specified index.\n   * @private\n   */\n  PdfArray.prototype.items = function (index) {\n    // if (index < 0 || index >= this.Count) {\n    //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n    // }\n    return this.internalElements[index];\n  };\n  Object.defineProperty(PdfArray.prototype, \"count\", {\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get: function () {\n      return this.internalElements.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status9;\n    },\n    set: function (value) {\n      this.status9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving9;\n    },\n    set: function (value) {\n      this.isSaving9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return this.clonedObject9;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position9;\n    },\n    set: function (value) {\n      this.position9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index9;\n    },\n    set: function (value) {\n      this.index9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"CrossTable\", {\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get: function () {\n      return this.pdfCrossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"elements\", {\n    /**\n     * Gets the `elements` of the Pdf Array.\n     * @private\n     */\n    get: function () {\n      return this.internalElements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Adds` the specified element to the PDF array.\n   * @private\n   */\n  PdfArray.prototype.add = function (element) {\n    // if (element === null) {\n    //     throw new Error('ArgumentNullException : obj');\n    // }\n    if (typeof this.internalElements === 'undefined') {\n      this.internalElements = [];\n    }\n    this.internalElements.push(element);\n    this.markedChange();\n  };\n  /**\n   * `Marks` the object changed.\n   * @private\n   */\n  PdfArray.prototype.markedChange = function () {\n    this.bChanged = true;\n  };\n  /**\n   * `Determines` whether the specified element is within the array.\n   * @private\n   */\n  PdfArray.prototype.contains = function (element) {\n    var returnValue = false;\n    for (var index = 0; index < this.internalElements.length; index++) {\n      var tempElement = this.internalElements[index];\n      var inputElement = element;\n      if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n        if (tempElement.value === inputElement.value) {\n          return true;\n        }\n      }\n      // if (this.internalElements[index] === element) {\n      //     returnValue = true;\n      // }\n    }\n\n    return returnValue;\n  };\n  /**\n   * Returns the `primitive object` of input index.\n   * @private\n   */\n  PdfArray.prototype.getItems = function (index) {\n    // if (index < 0 || index >= this.Count) {\n    //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n    // }\n    return this.internalElements[index];\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n  PdfArray.prototype.save = function (writer) {\n    // if (writer === null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    writer.write(this.startMark);\n    for (var i = 0, len = this.count; i < len; i++) {\n      this.getItems(i).save(writer);\n      if (i + 1 !== len) {\n        writer.write(Operators.whiteSpace);\n      }\n    }\n    writer.write(this.endMark);\n  };\n  /**\n   * Creates a `copy of PdfArray`.\n   * @private\n   */\n  PdfArray.prototype.clone = function (crossTable) {\n    // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n    //     return this.clonedObject9;\n    // } else {\n    this.clonedObject9 = null;\n    // Else clone the object.\n    var newArray = new PdfArray();\n    for (var index = 0; index < this.internalElements.length; index++) {\n      var obj = this.internalElements[index];\n      newArray.add(obj.clone(crossTable));\n    }\n    newArray.pdfCrossTable = crossTable;\n    this.clonedObject9 = newArray;\n    return newArray;\n  };\n  /**\n   * Creates filled PDF array `from the rectangle`.\n   * @private\n   */\n  PdfArray.fromRectangle = function (bounds) {\n    var values = [bounds.x, bounds.y, bounds.width, bounds.height];\n    var array = new PdfArray(values);\n    return array;\n  };\n  // /**\n  //  * Creates the rectangle from filled PDF array.\n  //  * @private\n  //  */\n  // public ToRectangle() : RectangleF {\n  //     if (this.Count < 4) {\n  //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n  //     }\n  //     let x1 : number;\n  //     let x2 : number;\n  //     let y1 : number;\n  //     let y2 : number;\n  //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n  //     x1 = num.IntValue;\n  //     num = this.getItems(1) as PdfNumber;\n  //     y1 = num.IntValue;\n  //     num = this.getItems(2) as PdfNumber;\n  //     x2 = num.IntValue;\n  //     num = this.getItems(3) as PdfNumber;\n  //     y2 = num.IntValue;\n  //     let x : number = Math.min(x1, x2);\n  //     let y : number = Math.min(y1, y2);\n  //     let width : number = Math.abs(x1 - x2);\n  //     let height : number = Math.abs(y1 - y2);\n  //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n  //     return rect;\n  // }\n  /**\n   * `Inserts` the element into the array.\n   * @private\n   */\n  PdfArray.prototype.insert = function (index, element) {\n    if (index < this.internalElements.length && index > 0) {\n      var tempElements = [];\n      for (var i = 0; i < index; i++) {\n        tempElements.push(this.internalElements[i]);\n      }\n      tempElements.push(element);\n      for (var i = index; i < this.internalElements.length; i++) {\n        tempElements.push(this.internalElements[i]);\n      }\n      this.internalElements = tempElements;\n    } else {\n      this.internalElements.push(element);\n    }\n    this.markChanged();\n  };\n  /**\n   * `Checks whether array contains the element`.\n   * @private\n   */\n  PdfArray.prototype.indexOf = function (element) {\n    return this.internalElements.indexOf(element);\n  };\n  /**\n   * `Removes` element from the array.\n   * @private\n   */\n  PdfArray.prototype.remove = function (element) {\n    // if (element === null) {\n    //     throw new Error('ArgumentNullException : element');\n    // }\n    var index = this.internalElements.indexOf(element);\n    // if (index >= 0 && index < this.internalElements.length) {\n    this.internalElements[index] = null;\n    // }\n    this.markChanged();\n  };\n  /**\n   * `Remove` the element from the array by its index.\n   * @private\n   */\n  PdfArray.prototype.removeAt = function (index) {\n    // this.internalElements.RemoveAt(index);\n    if (this.internalElements.length > index) {\n      var tempArray = [];\n      for (var i = 0; i < index; i++) {\n        tempArray.push(this.internalElements[i]);\n      }\n      for (var i = index + 1; i < this.internalElements.length; i++) {\n        tempArray.push(this.internalElements[i]);\n      }\n      this.internalElements = tempArray;\n    }\n    this.markChanged();\n  };\n  /**\n   * `Clear` the array.\n   * @private\n   */\n  PdfArray.prototype.clear = function () {\n    this.internalElements = [];\n    this.markChanged();\n  };\n  /**\n   * `Marks` the object changed.\n   * @private\n   */\n  PdfArray.prototype.markChanged = function () {\n    this.bChanged = true;\n  };\n  return PdfArray;\n}();\nexport { PdfArray };","map":{"version":3,"names":["PdfNumber","Operators","PdfArray","array","startMark","endMark","position9","clonedObject9","isFont","internalElements","tempNumberArray","index","length","pdfNumber","add","tempArray","elements","push","prototype","items","Object","defineProperty","get","enumerable","configurable","status9","set","value","isSaving9","index9","pdfCrossTable","element","markedChange","bChanged","contains","returnValue","tempElement","inputElement","getItems","save","writer","write","i","len","count","whiteSpace","clone","crossTable","newArray","obj","fromRectangle","bounds","values","x","y","width","height","insert","tempElements","markChanged","indexOf","remove","removeAt","clear"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-array.js"],"sourcesContent":["import { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\nvar PdfArray = /** @class */ (function () {\n    function PdfArray(array) {\n        //Fields\n        /**\n         * `startMark` - '['\n         * @private\n         */\n        this.startMark = '[';\n        /**\n         * `endMark` - ']'.\n         * @private\n         */\n        this.endMark = ']';\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position9 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject9 = null;\n        /**\n         * Represents the Font dictionary.\n         * @hidden\n         * @private\n         */\n        this.isFont = false;\n        if (typeof array === 'undefined') {\n            this.internalElements = [];\n        }\n        else {\n            if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n                var tempNumberArray = array;\n                for (var index = 0; index < tempNumberArray.length; index++) {\n                    var pdfNumber = new PdfNumber(tempNumberArray[index]);\n                    this.add(pdfNumber);\n                }\n                // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n            }\n            else {\n                var tempArray = array;\n                // if (tempArray.Elements.length > 0) {\n                this.internalElements = [];\n                for (var index = 0; index < tempArray.elements.length; index++) {\n                    this.internalElements.push(tempArray.elements[index]);\n                }\n                // }\n            }\n        }\n    }\n    //property\n    /**\n     * Gets the `IPdfSavable` at the specified index.\n     * @private\n     */\n    PdfArray.prototype.items = function (index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    };\n    Object.defineProperty(PdfArray.prototype, \"count\", {\n        /**\n         * Gets the `count`.\n         * @private\n         */\n        get: function () {\n            return this.internalElements.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status9;\n        },\n        set: function (value) {\n            this.status9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving9;\n        },\n        set: function (value) {\n            this.isSaving9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.clonedObject9;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position9;\n        },\n        set: function (value) {\n            this.position9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index9;\n        },\n        set: function (value) {\n            this.index9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"CrossTable\", {\n        /**\n         * Returns `PdfCrossTable` associated with the object.\n         * @private\n         */\n        get: function () {\n            return this.pdfCrossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"elements\", {\n        /**\n         * Gets the `elements` of the Pdf Array.\n         * @private\n         */\n        get: function () {\n            return this.internalElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Adds` the specified element to the PDF array.\n     * @private\n     */\n    PdfArray.prototype.add = function (element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : obj');\n        // }\n        if (typeof this.internalElements === 'undefined') {\n            this.internalElements = [];\n        }\n        this.internalElements.push(element);\n        this.markedChange();\n    };\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    PdfArray.prototype.markedChange = function () {\n        this.bChanged = true;\n    };\n    /**\n     * `Determines` whether the specified element is within the array.\n     * @private\n     */\n    PdfArray.prototype.contains = function (element) {\n        var returnValue = false;\n        for (var index = 0; index < this.internalElements.length; index++) {\n            var tempElement = this.internalElements[index];\n            var inputElement = element;\n            if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n                if (tempElement.value === inputElement.value) {\n                    return true;\n                }\n            }\n            // if (this.internalElements[index] === element) {\n            //     returnValue = true;\n            // }\n        }\n        return returnValue;\n    };\n    /**\n     * Returns the `primitive object` of input index.\n     * @private\n     */\n    PdfArray.prototype.getItems = function (index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfArray.prototype.save = function (writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.startMark);\n        for (var i = 0, len = this.count; i < len; i++) {\n            this.getItems(i).save(writer);\n            if (i + 1 !== len) {\n                writer.write(Operators.whiteSpace);\n            }\n        }\n        writer.write(this.endMark);\n    };\n    /**\n     * Creates a `copy of PdfArray`.\n     * @private\n     */\n    PdfArray.prototype.clone = function (crossTable) {\n        // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n        //     return this.clonedObject9;\n        // } else {\n        this.clonedObject9 = null;\n        // Else clone the object.\n        var newArray = new PdfArray();\n        for (var index = 0; index < this.internalElements.length; index++) {\n            var obj = this.internalElements[index];\n            newArray.add(obj.clone(crossTable));\n        }\n        newArray.pdfCrossTable = crossTable;\n        this.clonedObject9 = newArray;\n        return newArray;\n    };\n    /**\n     * Creates filled PDF array `from the rectangle`.\n     * @private\n     */\n    PdfArray.fromRectangle = function (bounds) {\n        var values = [bounds.x, bounds.y, bounds.width, bounds.height];\n        var array = new PdfArray(values);\n        return array;\n    };\n    // /**\n    //  * Creates the rectangle from filled PDF array.\n    //  * @private\n    //  */\n    // public ToRectangle() : RectangleF {\n    //     if (this.Count < 4) {\n    //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n    //     }\n    //     let x1 : number;\n    //     let x2 : number;\n    //     let y1 : number;\n    //     let y2 : number;\n    //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n    //     x1 = num.IntValue;\n    //     num = this.getItems(1) as PdfNumber;\n    //     y1 = num.IntValue;\n    //     num = this.getItems(2) as PdfNumber;\n    //     x2 = num.IntValue;\n    //     num = this.getItems(3) as PdfNumber;\n    //     y2 = num.IntValue;\n    //     let x : number = Math.min(x1, x2);\n    //     let y : number = Math.min(y1, y2);\n    //     let width : number = Math.abs(x1 - x2);\n    //     let height : number = Math.abs(y1 - y2);\n    //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n    //     return rect;\n    // }\n    /**\n     * `Inserts` the element into the array.\n     * @private\n     */\n    PdfArray.prototype.insert = function (index, element) {\n        if (index < this.internalElements.length && index > 0) {\n            var tempElements = [];\n            for (var i = 0; i < index; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            tempElements.push(element);\n            for (var i = index; i < this.internalElements.length; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            this.internalElements = tempElements;\n        }\n        else {\n            this.internalElements.push(element);\n        }\n        this.markChanged();\n    };\n    /**\n     * `Checks whether array contains the element`.\n     * @private\n     */\n    PdfArray.prototype.indexOf = function (element) {\n        return this.internalElements.indexOf(element);\n    };\n    /**\n     * `Removes` element from the array.\n     * @private\n     */\n    PdfArray.prototype.remove = function (element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : element');\n        // }\n        var index = this.internalElements.indexOf(element);\n        // if (index >= 0 && index < this.internalElements.length) {\n        this.internalElements[index] = null;\n        // }\n        this.markChanged();\n    };\n    /**\n     * `Remove` the element from the array by its index.\n     * @private\n     */\n    PdfArray.prototype.removeAt = function (index) {\n        // this.internalElements.RemoveAt(index);\n        if (this.internalElements.length > index) {\n            var tempArray = [];\n            for (var i = 0; i < index; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            for (var i = index + 1; i < this.internalElements.length; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            this.internalElements = tempArray;\n        }\n        this.markChanged();\n    };\n    /**\n     * `Clear` the array.\n     * @private\n     */\n    PdfArray.prototype.clear = function () {\n        this.internalElements = [];\n        this.markChanged();\n    };\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    PdfArray.prototype.markChanged = function () {\n        this.bChanged = true;\n    };\n    return PdfArray;\n}());\nexport { PdfArray };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}