{"ast":null,"code":"/**\n * PdfPen.ts class for EJ2-PDF\n */\nimport { PdfColor } from './pdf-color';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfDashStyle, PdfColorSpace } from './enum';\nimport { PdfBrush } from './brushes/pdf-brush';\n/**\n * `PdfPen` class defining settings for drawing operations, that determines the color,\n * width, and style of the drawing elements.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // create a new page\n * let page1 : PdfPage = document.pages.add();\n * // set pen\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n * // draw rectangle\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPen = /** @class */function () {\n  function PdfPen(arg1, arg2) {\n    //Fields\n    /**\n     * Specifies the `color of the pen`.\n     * @default new PdfColor()\n     * @private\n     */\n    this.pdfColor = new PdfColor(0, 0, 0);\n    /**\n     * Specifies the `dash offset of the pen`.\n     * @default 0\n     * @private\n     */\n    this.dashOffsetValue = 0;\n    /**\n     * Specifies the `dash pattern of the pen`.\n     * @default [0]\n     * @private\n     */\n    this.penDashPattern = [0];\n    /**\n     * Specifies the `dash style of the pen`.\n     * @default Solid\n     * @private\n     */\n    this.pdfDashStyle = PdfDashStyle.Solid;\n    /**\n     * Specifies the `line cap of the pen`.\n     * @default 0\n     * @private\n     */\n    this.pdfLineCap = 0;\n    /**\n     * Specifies the `line join of the pen`.\n     * @default 0\n     * @private\n     */\n    this.pdfLineJoin = 0;\n    /**\n     * Specifies the `width of the pen`.\n     * @default 1.0\n     * @private\n     */\n    this.penWidth = 1.0;\n    /**\n     * Specifies the `mitter limit of the pen`.\n     * @default 0.0\n     * @private\n     */\n    this.internalMiterLimit = 0.0;\n    /**\n     * Stores the `colorspace` value.\n     * @default Rgb\n     * @private\n     */\n    this.colorSpace = PdfColorSpace.Rgb;\n    if (arg1 instanceof PdfBrush) {\n      this.setBrush(arg1);\n    } else if (arg1 instanceof PdfColor) {\n      this.color = arg1;\n    }\n    if (typeof arg2 === 'number') {\n      this.width = arg2;\n    }\n  }\n  Object.defineProperty(PdfPen.prototype, \"color\", {\n    //Properties\n    /**\n     * Gets or sets the `color of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\n    /**\n     * Gets or sets the `dash offset of the pen`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n        return 0;\n      } else {\n        return this.dashOffsetValue;\n      }\n    },\n    set: function (value) {\n      this.dashOffsetValue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\n    /**\n     * Gets or sets the `dash pattern of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.penDashPattern;\n    },\n    set: function (value) {\n      this.penDashPattern = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\n    /**\n     * Gets or sets the `dash style of the pen`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set pen style\n     * pen.dashStyle = PdfDashStyle.DashDot;\n     * // get pen style\n     * let style : PdfDashStyle = pen.dashStyle;\n     * //\n     * // draw rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.pdfDashStyle;\n    },\n    set: function (value) {\n      if (this.pdfDashStyle !== value) {\n        this.pdfDashStyle = value;\n        switch (this.pdfDashStyle) {\n          case PdfDashStyle.Custom:\n            break;\n          case PdfDashStyle.Dash:\n            this.penDashPattern = [3, 1];\n            break;\n          case PdfDashStyle.Dot:\n            this.penDashPattern = [1, 1];\n            break;\n          case PdfDashStyle.DashDot:\n            this.penDashPattern = [3, 1, 1, 1];\n            break;\n          case PdfDashStyle.DashDotDot:\n            this.penDashPattern = [3, 1, 1, 1, 1, 1];\n            break;\n          case PdfDashStyle.Solid:\n            break;\n          default:\n            this.pdfDashStyle = PdfDashStyle.Solid;\n            this.penDashPattern = [0];\n            break;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineCap\", {\n    /**\n     * Gets or sets the `line cap of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.pdfLineCap;\n    },\n    set: function (value) {\n      this.pdfLineCap = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\n    /**\n     * Gets or sets the `line join style of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.pdfLineJoin;\n    },\n    set: function (value) {\n      this.pdfLineJoin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\n    /**\n     * Gets or sets the `miter limit`.\n     * @private\n     */\n    get: function () {\n      return this.internalMiterLimit;\n    },\n    set: function (value) {\n      this.internalMiterLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"width\", {\n    /**\n     * Gets or sets the `width of the pen`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set pen width\n     * pen.width = 2;\n     * //\n     * // draw rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.penWidth;\n    },\n    set: function (value) {\n      this.penWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Helper\n  /**\n   * `Clones` this instance of PdfPen class.\n   * @private\n   */\n  PdfPen.prototype.clone = function () {\n    var pen = this;\n    return pen;\n  };\n  /**\n   * `Sets the brush`.\n   * @private\n   */\n  PdfPen.prototype.setBrush = function (brush) {\n    var sBrush = brush;\n    if (sBrush != null && sBrush instanceof PdfSolidBrush) {\n      this.color = sBrush.color;\n      this.pdfBrush = sBrush;\n    }\n    this.color = sBrush.color;\n    this.pdfBrush = sBrush;\n  };\n  /**\n   * `Monitors the changes`.\n   * @private\n   */\n  PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n    var diff = false;\n    saveState = true;\n    if (currentPen == null) {\n      diff = true;\n    }\n    diff = this.dashControl(currentPen, saveState, streamWriter);\n    streamWriter.setLineWidth(this.width);\n    streamWriter.setLineJoin(this.lineJoin);\n    streamWriter.setLineCap(this.lineCap);\n    var miterLimit = this.miterLimit;\n    if (miterLimit > 0) {\n      streamWriter.setMiterLimit(miterLimit);\n      diff = true;\n    }\n    var brush = this.pdfBrush;\n    streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n    diff = true;\n    return diff;\n  };\n  /**\n   * `Controls the dash style` and behaviour of each line.\n   * @private\n   */\n  PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\n    saveState = true;\n    var lineWidth = this.width;\n    var pattern = this.getPattern();\n    streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n    return saveState;\n  };\n  /**\n   * `Gets the pattern` of PdfPen.\n   * @private\n   */\n  PdfPen.prototype.getPattern = function () {\n    var pattern = this.dashPattern;\n    for (var i = 0; i < pattern.length; ++i) {\n      pattern[i] *= this.width;\n    }\n    return pattern;\n  };\n  return PdfPen;\n}();\nexport { PdfPen };","map":{"version":3,"names":["PdfColor","PdfSolidBrush","PdfDashStyle","PdfColorSpace","PdfBrush","PdfPen","arg1","arg2","pdfColor","dashOffsetValue","penDashPattern","pdfDashStyle","Solid","pdfLineCap","pdfLineJoin","penWidth","internalMiterLimit","colorSpace","Rgb","setBrush","color","width","Object","defineProperty","prototype","get","set","value","enumerable","configurable","Custom","Dash","Dot","DashDot","DashDotDot","clone","pen","brush","sBrush","pdfBrush","monitorChanges","currentPen","streamWriter","getResources","saveState","currentColorSpace","matrix","diff","dashControl","setLineWidth","setLineJoin","lineJoin","setLineCap","lineCap","miterLimit","setMiterLimit","setColorAndSpace","lineWidth","pattern","getPattern","setLineDashPattern","dashOffset","dashPattern","i","length"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-pen.js"],"sourcesContent":["/**\n * PdfPen.ts class for EJ2-PDF\n */\nimport { PdfColor } from './pdf-color';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfDashStyle, PdfColorSpace } from './enum';\nimport { PdfBrush } from './brushes/pdf-brush';\n/**\n * `PdfPen` class defining settings for drawing operations, that determines the color,\n * width, and style of the drawing elements.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // create a new page\n * let page1 : PdfPage = document.pages.add();\n * // set pen\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n * // draw rectangle\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPen = /** @class */ (function () {\n    function PdfPen(arg1, arg2) {\n        //Fields\n        /**\n         * Specifies the `color of the pen`.\n         * @default new PdfColor()\n         * @private\n         */\n        this.pdfColor = new PdfColor(0, 0, 0);\n        /**\n         * Specifies the `dash offset of the pen`.\n         * @default 0\n         * @private\n         */\n        this.dashOffsetValue = 0;\n        /**\n         * Specifies the `dash pattern of the pen`.\n         * @default [0]\n         * @private\n         */\n        this.penDashPattern = [0];\n        /**\n         * Specifies the `dash style of the pen`.\n         * @default Solid\n         * @private\n         */\n        this.pdfDashStyle = PdfDashStyle.Solid;\n        /**\n         * Specifies the `line cap of the pen`.\n         * @default 0\n         * @private\n         */\n        this.pdfLineCap = 0;\n        /**\n         * Specifies the `line join of the pen`.\n         * @default 0\n         * @private\n         */\n        this.pdfLineJoin = 0;\n        /**\n         * Specifies the `width of the pen`.\n         * @default 1.0\n         * @private\n         */\n        this.penWidth = 1.0;\n        /**\n         * Specifies the `mitter limit of the pen`.\n         * @default 0.0\n         * @private\n         */\n        this.internalMiterLimit = 0.0;\n        /**\n         * Stores the `colorspace` value.\n         * @default Rgb\n         * @private\n         */\n        this.colorSpace = PdfColorSpace.Rgb;\n        if (arg1 instanceof PdfBrush) {\n            this.setBrush(arg1);\n        }\n        else if (arg1 instanceof PdfColor) {\n            this.color = arg1;\n        }\n        if (typeof arg2 === 'number') {\n            this.width = arg2;\n        }\n    }\n    Object.defineProperty(PdfPen.prototype, \"color\", {\n        //Properties\n        /**\n         * Gets or sets the `color of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.pdfColor;\n        },\n        set: function (value) {\n            this.pdfColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\n        /**\n         * Gets or sets the `dash offset of the pen`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n                return 0;\n            }\n            else {\n                return this.dashOffsetValue;\n            }\n        },\n        set: function (value) {\n            this.dashOffsetValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\n        /**\n         * Gets or sets the `dash pattern of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.penDashPattern;\n        },\n        set: function (value) {\n            this.penDashPattern = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\n        /**\n         * Gets or sets the `dash style of the pen`.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // create a new page\n         * let page1 : PdfPage = document.pages.add();\n         * // set pen\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n         * //\n         * // set pen style\n         * pen.dashStyle = PdfDashStyle.DashDot;\n         * // get pen style\n         * let style : PdfDashStyle = pen.dashStyle;\n         * //\n         * // draw rectangle\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.pdfDashStyle;\n        },\n        set: function (value) {\n            if (this.pdfDashStyle !== value) {\n                this.pdfDashStyle = value;\n                switch (this.pdfDashStyle) {\n                    case PdfDashStyle.Custom:\n                        break;\n                    case PdfDashStyle.Dash:\n                        this.penDashPattern = [3, 1];\n                        break;\n                    case PdfDashStyle.Dot:\n                        this.penDashPattern = [1, 1];\n                        break;\n                    case PdfDashStyle.DashDot:\n                        this.penDashPattern = [3, 1, 1, 1];\n                        break;\n                    case PdfDashStyle.DashDotDot:\n                        this.penDashPattern = [3, 1, 1, 1, 1, 1];\n                        break;\n                    case PdfDashStyle.Solid:\n                        break;\n                    default:\n                        this.pdfDashStyle = PdfDashStyle.Solid;\n                        this.penDashPattern = [0];\n                        break;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"lineCap\", {\n        /**\n         * Gets or sets the `line cap of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.pdfLineCap;\n        },\n        set: function (value) {\n            this.pdfLineCap = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\n        /**\n         * Gets or sets the `line join style of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.pdfLineJoin;\n        },\n        set: function (value) {\n            this.pdfLineJoin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\n        /**\n         * Gets or sets the `miter limit`.\n         * @private\n         */\n        get: function () {\n            return this.internalMiterLimit;\n        },\n        set: function (value) {\n            this.internalMiterLimit = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"width\", {\n        /**\n         * Gets or sets the `width of the pen`.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // create a new page\n         * let page1 : PdfPage = document.pages.add();\n         * // set pen\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n         * //\n         * // set pen width\n         * pen.width = 2;\n         * //\n         * // draw rectangle\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.penWidth;\n        },\n        set: function (value) {\n            this.penWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Helper\n    /**\n     * `Clones` this instance of PdfPen class.\n     * @private\n     */\n    PdfPen.prototype.clone = function () {\n        var pen = this;\n        return pen;\n    };\n    /**\n     * `Sets the brush`.\n     * @private\n     */\n    PdfPen.prototype.setBrush = function (brush) {\n        var sBrush = brush;\n        if ((sBrush != null && sBrush instanceof PdfSolidBrush)) {\n            this.color = sBrush.color;\n            this.pdfBrush = sBrush;\n        }\n        this.color = sBrush.color;\n        this.pdfBrush = sBrush;\n    };\n    /**\n     * `Monitors the changes`.\n     * @private\n     */\n    PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n        var diff = false;\n        saveState = true;\n        if (currentPen == null) {\n            diff = true;\n        }\n        diff = this.dashControl(currentPen, saveState, streamWriter);\n        streamWriter.setLineWidth(this.width);\n        streamWriter.setLineJoin(this.lineJoin);\n        streamWriter.setLineCap(this.lineCap);\n        var miterLimit = this.miterLimit;\n        if (miterLimit > 0) {\n            streamWriter.setMiterLimit(miterLimit);\n            diff = true;\n        }\n        var brush = this.pdfBrush;\n        streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n        diff = true;\n        return diff;\n    };\n    /**\n     * `Controls the dash style` and behaviour of each line.\n     * @private\n     */\n    PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\n        saveState = true;\n        var lineWidth = this.width;\n        var pattern = this.getPattern();\n        streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n        return saveState;\n    };\n    /**\n     * `Gets the pattern` of PdfPen.\n     * @private\n     */\n    PdfPen.prototype.getPattern = function () {\n        var pattern = this.dashPattern;\n        for (var i = 0; i < pattern.length; ++i) {\n            pattern[i] *= this.width;\n        }\n        return pattern;\n    };\n    return PdfPen;\n}());\nexport { PdfPen };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}