{"ast":null,"code":"/**\n * StringTokenizer.ts class for EJ2-PDF\n * Utility class for working with strings.\n * @private\n */\nvar StringTokenizer = /** @class */function () {\n  // Constructors\n  /**\n   * Initializes a new instance of the `StringTokenizer` class.\n   * @private\n   */\n  function StringTokenizer(textValue) {\n    /**\n     * Current `position`.\n     * @private\n     */\n    this.currentPosition = 0;\n    if (textValue == null) {\n      throw new Error('ArgumentNullException:text');\n    }\n    this.text = textValue;\n  }\n  Object.defineProperty(StringTokenizer.prototype, \"length\", {\n    // Properties\n    /**\n     * Gets text `length`.\n     * @private\n     */\n    get: function () {\n      return this.text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StringTokenizer.prototype, \"end\", {\n    get: function () {\n      return this.currentPosition === this.text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StringTokenizer.prototype, \"position\", {\n    /**\n     * Gets or sets the position.\n     * @private\n     */\n    get: function () {\n      return this.currentPosition;\n    },\n    set: function (value) {\n      this.currentPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  StringTokenizer.getCharsCount = function (text, symbols) {\n    if (typeof symbols === 'string') {\n      if (text == null) {\n        throw new Error('ArgumentNullException:wholeText');\n      }\n      var numSymbols = 0;\n      var curIndex = 0;\n      for (;;) {\n        curIndex = text.indexOf(symbols, curIndex);\n        if (curIndex === -1) {\n          break;\n        } else {\n          numSymbols++;\n          curIndex++;\n        }\n      }\n      return numSymbols;\n    } else {\n      if (text == null) {\n        throw new Error('ArgumentNullException:text');\n      }\n      if (symbols == null) {\n        throw new Error('ArgumentNullException:symbols');\n      }\n      var count = 0;\n      for (var i = 0, len = text.length; i < len; i++) {\n        var ch = text[i];\n        if (this.contains(symbols, ch)) {\n          count++;\n        }\n      }\n      return count;\n    }\n  };\n  /**\n   * Reads line of the text.\n   * @private\n   */\n  StringTokenizer.prototype.readLine = function () {\n    var pos = this.currentPosition;\n    while (pos < this.length) {\n      var ch = this.text[pos];\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          {\n            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos + 1;\n            if (ch === '\\r' && this.currentPosition < this.length && this.text[this.currentPosition] === '\\n') {\n              this.currentPosition++;\n            }\n            return text;\n          }\n      }\n      pos++;\n    }\n    // The remaining text.\n    if (pos > this.currentPosition) {\n      var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n      this.currentPosition = pos;\n      return text2;\n    }\n    return null;\n  };\n  /**\n   * Reads line of the text.\n   * @private\n   */\n  StringTokenizer.prototype.peekLine = function () {\n    var pos = this.currentPosition;\n    var line = this.readLine();\n    this.currentPosition = pos;\n    return line;\n  };\n  /**\n   * Reads a word from the text.\n   * @private\n   */\n  StringTokenizer.prototype.readWord = function () {\n    var pos = this.currentPosition;\n    while (pos < this.length) {\n      var ch = this.text[pos];\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n          this.currentPosition = pos + 1;\n          if (ch === '\\r' && this.currentPosition < this.length && this.text[this.currentPosition] === '\\n') {\n            this.currentPosition++;\n          }\n          return textValue;\n        case ' ':\n        case '\\t':\n          {\n            if (pos === this.currentPosition) {\n              pos++;\n            }\n            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text;\n          }\n      }\n      pos++;\n    }\n    // The remaining text.\n    if (pos > this.currentPosition) {\n      var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n      this.currentPosition = pos;\n      return text2;\n    }\n    return null;\n  };\n  /**\n   * Peeks a word from the text.\n   * @private\n   */\n  StringTokenizer.prototype.peekWord = function () {\n    var pos = this.currentPosition;\n    var word = this.readWord();\n    this.currentPosition = pos;\n    return word;\n  };\n  StringTokenizer.prototype.read = function (count) {\n    if (typeof count === 'undefined') {\n      var ch = '0';\n      if (!this.end) {\n        ch = this.text[this.currentPosition];\n        this.currentPosition++;\n      }\n      return ch;\n    } else {\n      var num = 0;\n      var builder = '';\n      while (!this.end && num < count) {\n        var ch = this.read();\n        builder = builder + ch;\n        num++;\n      }\n      return builder;\n    }\n  };\n  /**\n   * Peeks char form the data.\n   * @private\n   */\n  StringTokenizer.prototype.peek = function () {\n    var ch = '0';\n    if (!this.end) {\n      ch = this.text[this.currentPosition];\n    }\n    return ch;\n  };\n  /**\n   * Closes a reader.\n   * @private\n   */\n  StringTokenizer.prototype.close = function () {\n    this.text = null;\n  };\n  StringTokenizer.prototype.readToEnd = function () {\n    var text;\n    if (this.currentPosition === 0) {\n      text = this.text;\n    } else {\n      text = this.text.substr(this.currentPosition, this.length - this.currentPosition);\n    }\n    this.currentPosition = this.length;\n    return text;\n  };\n  //Implementation\n  /**\n   * Checks whether array contains a symbol.\n   * @private\n   */\n  StringTokenizer.contains = function (array, symbol) {\n    var contains = false;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === symbol) {\n        contains = true;\n        break;\n      }\n    }\n    return contains;\n  };\n  // Constants\n  /**\n   * `Whitespace` symbol.\n   * @private\n   */\n  StringTokenizer.whiteSpace = ' ';\n  /**\n   * `tab` symbol.\n   * @private\n   */\n  StringTokenizer.tab = '\\t';\n  /**\n   * Array of `spaces`.\n   * @private\n   */\n  StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n  /**\n   * `Pattern` for WhiteSpace.\n   * @private\n   */\n  StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n  return StringTokenizer;\n}();\nexport { StringTokenizer };","map":{"version":3,"names":["StringTokenizer","textValue","currentPosition","Error","text","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","getCharsCount","symbols","numSymbols","curIndex","indexOf","count","i","len","ch","contains","readLine","pos","substr","text2","peekLine","line","readWord","peekWord","word","read","end","num","builder","peek","close","readToEnd","array","symbol","whiteSpace","tab","spaces","whiteSpacePattern"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-tokenizer.js"],"sourcesContent":["/**\n * StringTokenizer.ts class for EJ2-PDF\n * Utility class for working with strings.\n * @private\n */\nvar StringTokenizer = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringTokenizer` class.\n     * @private\n     */\n    function StringTokenizer(textValue) {\n        /**\n         * Current `position`.\n         * @private\n         */\n        this.currentPosition = 0;\n        if (textValue == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        this.text = textValue;\n    }\n    Object.defineProperty(StringTokenizer.prototype, \"length\", {\n        // Properties\n        /**\n         * Gets text `length`.\n         * @private\n         */\n        get: function () {\n            return this.text.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringTokenizer.prototype, \"end\", {\n        get: function () {\n            return (this.currentPosition === this.text.length);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringTokenizer.prototype, \"position\", {\n        /**\n         * Gets or sets the position.\n         * @private\n         */\n        get: function () {\n            return this.currentPosition;\n        },\n        set: function (value) {\n            this.currentPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StringTokenizer.getCharsCount = function (text, symbols) {\n        if (typeof symbols === 'string') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:wholeText');\n            }\n            var numSymbols = 0;\n            var curIndex = 0;\n            for (;;) {\n                curIndex = text.indexOf(symbols, curIndex);\n                if (curIndex === -1) {\n                    break;\n                }\n                else {\n                    numSymbols++;\n                    curIndex++;\n                }\n            }\n            return numSymbols;\n        }\n        else {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (symbols == null) {\n                throw new Error('ArgumentNullException:symbols');\n            }\n            var count = 0;\n            for (var i = 0, len = text.length; i < len; i++) {\n                var ch = text[i];\n                if (this.contains(symbols, ch)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    };\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    StringTokenizer.prototype.readLine = function () {\n        var pos = this.currentPosition;\n        while (pos < this.length) {\n            var ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n': {\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\n                        this.currentPosition++;\n                    }\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    };\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    StringTokenizer.prototype.peekLine = function () {\n        var pos = this.currentPosition;\n        var line = this.readLine();\n        this.currentPosition = pos;\n        return line;\n    };\n    /**\n     * Reads a word from the text.\n     * @private\n     */\n    StringTokenizer.prototype.readWord = function () {\n        var pos = this.currentPosition;\n        while (pos < this.length) {\n            var ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\n                        this.currentPosition++;\n                    }\n                    return textValue;\n                case ' ':\n                case '\\t': {\n                    if (pos === this.currentPosition) {\n                        pos++;\n                    }\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos;\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    };\n    /**\n     * Peeks a word from the text.\n     * @private\n     */\n    StringTokenizer.prototype.peekWord = function () {\n        var pos = this.currentPosition;\n        var word = this.readWord();\n        this.currentPosition = pos;\n        return word;\n    };\n    StringTokenizer.prototype.read = function (count) {\n        if (typeof count === 'undefined') {\n            var ch = '0';\n            if (!this.end) {\n                ch = this.text[this.currentPosition];\n                this.currentPosition++;\n            }\n            return ch;\n        }\n        else {\n            var num = 0;\n            var builder = '';\n            while (!this.end && num < count) {\n                var ch = this.read();\n                builder = builder + ch;\n                num++;\n            }\n            return builder;\n        }\n    };\n    /**\n     * Peeks char form the data.\n     * @private\n     */\n    StringTokenizer.prototype.peek = function () {\n        var ch = '0';\n        if (!this.end) {\n            ch = this.text[this.currentPosition];\n        }\n        return ch;\n    };\n    /**\n     * Closes a reader.\n     * @private\n     */\n    StringTokenizer.prototype.close = function () {\n        this.text = null;\n    };\n    StringTokenizer.prototype.readToEnd = function () {\n        var text;\n        if (this.currentPosition === 0) {\n            text = this.text;\n        }\n        else {\n            text = this.text.substr(this.currentPosition, this.length - this.currentPosition);\n        }\n        this.currentPosition = this.length;\n        return text;\n    };\n    //Implementation\n    /**\n     * Checks whether array contains a symbol.\n     * @private\n     */\n    StringTokenizer.contains = function (array, symbol) {\n        var contains = false;\n        for (var i = 0; i < array.length; i++) {\n            if (array[i] === symbol) {\n                contains = true;\n                break;\n            }\n        }\n        return contains;\n    };\n    // Constants\n    /**\n     * `Whitespace` symbol.\n     * @private\n     */\n    StringTokenizer.whiteSpace = ' ';\n    /**\n     * `tab` symbol.\n     * @private\n     */\n    StringTokenizer.tab = '\\t';\n    /**\n     * Array of `spaces`.\n     * @private\n     */\n    StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n    /**\n     * `Pattern` for WhiteSpace.\n     * @private\n     */\n    StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n    return StringTokenizer;\n}());\nexport { StringTokenizer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}