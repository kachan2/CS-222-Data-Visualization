{"ast":null,"code":"/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save = /** @class */function () {\n  /**\n   * Initialize new instance of {save}\n   */\n  function Save() {\n    // tslint:disable\n  }\n  /**\n   * Saves the file with specified name and sends the file to client browser\n   * @param  {string} fileName- file name to save.\n   * @param  {Blob} buffer- the content to write in file\n   * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n   * @returns {void}\n   */\n  Save.save = function (fileName, buffer) {\n    if (fileName === null || fileName === undefined || fileName === '') {\n      throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n    }\n    var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n    var mimeType = this.getMimeType(extension);\n    if (mimeType !== '') {\n      buffer = new Blob([buffer], {\n        type: mimeType\n      });\n    }\n    if (this.isMicrosoftBrowser) {\n      navigator.msSaveBlob(buffer, fileName);\n    } else {\n      var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n    }\n  };\n  Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n    if (hasDownloadAttribute) {\n      downloadLink.download = fileName;\n      var dataUrl_1 = window.URL.createObjectURL(buffer);\n      downloadLink.href = dataUrl_1;\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      downloadLink.dispatchEvent(event_1);\n      setTimeout(function () {\n        window.URL.revokeObjectURL(dataUrl_1);\n        dataUrl_1 = undefined;\n      });\n    } else {\n      if (extension !== 'docx' && extension !== 'xlsx') {\n        var url = window.URL.createObjectURL(buffer);\n        var isPopupBlocked = window.open(url, '_blank');\n        if (!isPopupBlocked) {\n          window.location.href = url;\n        }\n      } else {\n        var reader_1 = new FileReader();\n        reader_1.onloadend = function () {\n          var isPopupBlocked = window.open(reader_1.result, '_blank');\n          if (!isPopupBlocked) {\n            window.location.href = reader_1.result;\n          }\n        };\n        reader_1.readAsDataURL(buffer);\n      }\n    }\n  };\n  /**\n   *\n   * @param {string} extension - get mime type of the specified extension\n   * @private\n   */\n  Save.getMimeType = function (extension) {\n    var mimeType = '';\n    switch (extension) {\n      case 'html':\n        mimeType = 'text/html';\n        break;\n      case 'pdf':\n        mimeType = 'application/pdf';\n        break;\n      case 'docx':\n        mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        break;\n      case 'xlsx':\n        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n        break;\n      case 'txt':\n        mimeType = 'text/plain';\n        break;\n    }\n    return mimeType;\n  };\n  return Save;\n}();\nexport { Save };","map":{"version":3,"names":["Save","save","fileName","buffer","undefined","Error","extension","substring","lastIndexOf","length","mimeType","getMimeType","Blob","type","isMicrosoftBrowser","navigator","msSaveBlob","downloadLink","document","createElementNS","saveInternal","hasDownloadAttribute","download","dataUrl_1","window","URL","createObjectURL","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","url","isPopupBlocked","open","location","reader_1","FileReader","onloadend","result","readAsDataURL"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-file-utils/src/save.js"],"sourcesContent":["/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save = /** @class */ (function () {\n    /**\n     * Initialize new instance of {save}\n     */\n    function Save() {\n        // tslint:disable\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n     * @returns {void}\n     */\n    Save.save = function (fileName, buffer) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n        }\n        var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n        var mimeType = this.getMimeType(extension);\n        if (mimeType !== '') {\n            buffer = new Blob([buffer], { type: mimeType });\n        }\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(buffer, fileName);\n        }\n        else {\n            var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n        }\n    };\n    Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n        if (hasDownloadAttribute) {\n            downloadLink.download = fileName;\n            var dataUrl_1 = window.URL.createObjectURL(buffer);\n            downloadLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            downloadLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n                dataUrl_1 = undefined;\n            });\n        }\n        else {\n            if (extension !== 'docx' && extension !== 'xlsx') {\n                var url = window.URL.createObjectURL(buffer);\n                var isPopupBlocked = window.open(url, '_blank');\n                if (!isPopupBlocked) {\n                    window.location.href = url;\n                }\n            }\n            else {\n                var reader_1 = new FileReader();\n                reader_1.onloadend = function () {\n                    var isPopupBlocked = window.open(reader_1.result, '_blank');\n                    if (!isPopupBlocked) {\n                        window.location.href = reader_1.result;\n                    }\n                };\n                reader_1.readAsDataURL(buffer);\n            }\n        }\n    };\n    /**\n     *\n     * @param {string} extension - get mime type of the specified extension\n     * @private\n     */\n    Save.getMimeType = function (extension) {\n        var mimeType = '';\n        switch (extension) {\n            case 'html':\n                mimeType = 'text/html';\n                break;\n            case 'pdf':\n                mimeType = 'application/pdf';\n                break;\n            case 'docx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n                break;\n            case 'xlsx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n                break;\n            case 'txt':\n                mimeType = 'text/plain';\n                break;\n        }\n        return mimeType;\n    };\n    return Save;\n}());\nexport { Save };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}