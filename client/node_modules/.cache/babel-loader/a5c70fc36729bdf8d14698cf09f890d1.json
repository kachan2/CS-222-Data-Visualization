{"ast":null,"code":"import { PdfColorSpace } from './enum';\nimport { Operators } from './../input-output/pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfArray } from './../primitives/pdf-array';\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\nvar PdfColor = /** @class */function () {\n  function PdfColor(color1, color2, color3, color4) {\n    if (typeof color1 === 'undefined') {\n      if (typeof color2 !== 'undefined' && typeof color3 !== 'undefined' && typeof color4 !== 'undefined') {\n        this.assignRGB(color2, color3, color4);\n      } else {\n        this.filled = false;\n      }\n    } else if (color1 instanceof PdfColor) {\n      this.redColor = color1.r;\n      this.greenColor = color1.g;\n      this.blueColor = color1.b;\n      this.grayColor = color1.gray;\n      this.alpha = color1.alpha;\n      this.filled = this.alpha !== 0;\n      /* tslint:disable-next-line:max-line-length */\n    } else if (typeof color1 === 'number' && typeof color2 === 'undefined' && typeof color3 === 'undefined' && typeof color4 === 'undefined') {\n      if (color1 < 0) {\n        color1 = 0;\n      }\n      if (color1 > 1) {\n        color1 = 1;\n      }\n      this.redColor = color1 * PdfColor.maxColourChannelValue;\n      this.greenColor = color1 * PdfColor.maxColourChannelValue;\n      this.blueColor = color1 * PdfColor.maxColourChannelValue;\n      this.cyanColor = color1;\n      this.magentaColor = color1;\n      this.yellowColor = color1;\n      this.blackColor = color1;\n      this.grayColor = color1;\n      this.alpha = PdfColor.maxColourChannelValue;\n      this.filled = true;\n    } else if (typeof color4 === 'undefined') {\n      this.assignRGB(color1, color2, color3);\n    } else {\n      this.assignRGB(color2, color3, color4, color1);\n    }\n  }\n  /**\n   * `Assign` red, green, blue colors with alpha value..\n   * @private\n   */\n  PdfColor.prototype.assignRGB = function (r, g, b, a) {\n    if (typeof r === 'undefined' || typeof g === 'undefined' || typeof b === 'undefined') {\n      this.filled = false;\n    } else {\n      this.cyanColor = 0;\n      this.magentaColor = 0;\n      this.yellowColor = 0;\n      this.blackColor = 0;\n      this.grayColor = 0;\n      this.redColor = r;\n      this.greenColor = g;\n      this.blueColor = b;\n      if (typeof a === 'undefined') {\n        this.alpha = PdfColor.maxColourChannelValue;\n      } else {\n        this.alpha = a;\n      }\n      this.filled = true;\n      this.assignCMYK(r, g, b);\n    }\n  };\n  /**\n   * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n   * @private\n   */\n  PdfColor.prototype.assignCMYK = function (r, g, b) {\n    var red = r / PdfColor.maxColourChannelValue;\n    var green = g / PdfColor.maxColourChannelValue;\n    var blue = b / PdfColor.maxColourChannelValue;\n    var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n    var cyan = black === 1.0 ? 0 : (1 - red - black) / (1 - black);\n    var magenta = black === 1.0 ? 0 : (1 - green - black) / (1 - black);\n    var yellow = black === 1.0 ? 0 : (1 - blue - black) / (1 - black);\n    this.blackColor = black;\n    this.cyanColor = cyan;\n    this.magentaColor = magenta;\n    this.yellowColor = yellow;\n  };\n  Object.defineProperty(PdfColor.prototype, \"r\", {\n    //Properties\n    // public static get Empty():PdfColor\n    // {\n    //     return this.s_emptyColor\n    // }\n    /**\n     * Gets or sets `Red` channel value.\n     * @private\n     */\n    get: function () {\n      return this.redColor;\n    },\n    set: function (value) {\n      this.redColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"red\", {\n    /**\n     * Gets the `Red` color\n     * @private\n     */\n    get: function () {\n      return this.r / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"b\", {\n    /**\n     * Gets or sets `Blue` channel value.\n     * @private\n     */\n    get: function () {\n      return this.blueColor;\n    },\n    set: function (value) {\n      this.blueColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"blue\", {\n    /**\n     * Gets the `blue` color.\n     * @private\n     */\n    get: function () {\n      return this.b / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"c\", {\n    /**\n     * Gets or sets `Cyan` channel value.\n     * @private\n     */\n    get: function () {\n      return this.cyanColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.cyanColor = 0;\n      } else if (value > 1) {\n        this.cyanColor = 1;\n      } else {\n        this.cyanColor = value;\n      }\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"k\", {\n    /**\n     * Gets or sets `Black` channel value.\n     * @private\n     */\n    get: function () {\n      return this.blackColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.blackColor = 0;\n      } else if (value > 1) {\n        this.blackColor = 1;\n      } else {\n        this.blackColor = value;\n      }\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"m\", {\n    /**\n     * Gets or sets `Magenta` channel value.\n     * @private\n     */\n    get: function () {\n      return this.magentaColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.magentaColor = 0;\n      } else if (value > 1) {\n        this.magentaColor = 1;\n      } else {\n        this.magentaColor = value;\n      }\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"y\", {\n    /**\n     * Gets or sets `Yellow` channel value.\n     * @private\n     */\n    get: function () {\n      return this.yellowColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.yellowColor = 0;\n      } else if (value > 1) {\n        this.yellowColor = 1;\n      } else {\n        this.yellowColor = value;\n      }\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"g\", {\n    /**\n     *  Gets or sets `Green` channel value.\n     * @private\n     */\n    get: function () {\n      return this.greenColor;\n    },\n    set: function (value) {\n      this.greenColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"green\", {\n    /**\n     * Gets the `Green` color.\n     * @private\n     */\n    get: function () {\n      return this.g / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"gray\", {\n    /**\n     * Gets or sets `Gray` channel value.\n     * @private\n     */\n    get: function () {\n      return (this.redColor + this.greenColor + this.blueColor) / (PdfColor.maxColourChannelValue * 3);\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.grayColor = 0;\n      } else if (value > 1) {\n        this.grayColor = 1;\n      } else {\n        this.grayColor = value;\n      }\n      this.r = this.grayColor * PdfColor.maxColourChannelValue;\n      this.g = this.grayColor * PdfColor.maxColourChannelValue;\n      this.b = this.grayColor * PdfColor.maxColourChannelValue;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"isEmpty\", {\n    /**\n     * Gets whether the PDFColor `is Empty` or not.\n     * @private\n     */\n    get: function () {\n      return !this.filled;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"a\", {\n    /**\n     * Gets or sets `Alpha` channel value.\n     * @private\n     */\n    get: function () {\n      return this.alpha;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.alpha = 0;\n      } else {\n        // if (this.alpha !== value) {\n        this.alpha = value;\n        // }\n      }\n\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Public methods\n  /**\n   * Converts `PDFColor to PDF string` representation.\n   * @private\n   */\n  PdfColor.prototype.toString = function (colorSpace, stroke) {\n    if (this.isEmpty) {\n      return '';\n    }\n    var str = '';\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        str = this.rgbToString(stroke);\n        break;\n      case PdfColorSpace.GrayScale:\n        str = this.grayScaleToString(stroke);\n        break;\n      case PdfColorSpace.Cmyk:\n        str = this.cmykToString(stroke);\n        break;\n    }\n    return str;\n  };\n  /**\n   * Sets `GrayScale` color.\n   * @private\n   */\n  PdfColor.prototype.grayScaleToString = function (ifStroking) {\n    var gray = this.gray;\n    var colour = '';\n    var obj = null;\n    /* tslint:disable-next-line:max-line-length */\n    obj = ifStroking ? PdfColor.grayStringsSroke.containsKey(gray) ? PdfColor.grayStringsSroke.getValue(gray) : null : PdfColor.grayStringsFill.containsKey(gray) ? PdfColor.grayStringsFill.getValue(gray) : null;\n    if (obj == null) {\n      if (ifStroking) {\n        colour = gray.toString() + ' G';\n        PdfColor.grayStringsSroke.setValue(gray, colour);\n      }\n    } else {\n      colour = obj.toString();\n    }\n    return colour + Operators.newLine;\n  };\n  /**\n   * Sets `RGB` color.\n   * @private\n   */\n  PdfColor.prototype.rgbToString = function (ifStroking) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var key = (r << 16) + (g << 8) + b;\n    if (ifStroking) {\n      key += 1 << 24;\n    }\n    var colour = '';\n    var obj = null;\n    if (PdfColor.rgbStrings.containsKey(key)) {\n      obj = PdfColor.rgbStrings.getValue(key);\n    }\n    if (obj == null) {\n      var red = r / PdfColor.maxColourChannelValue;\n      var green = g / PdfColor.maxColourChannelValue;\n      var blue = b / PdfColor.maxColourChannelValue;\n      if (ifStroking) {\n        colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n      } else {\n        colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n      }\n      PdfColor.rgbStrings.setValue(key, colour);\n    } else {\n      colour = obj.toString();\n    }\n    return colour + Operators.newLine;\n  };\n  /***\n   * Sets `CMYK` color.\n   * @private\n   */\n  PdfColor.prototype.cmykToString = function (ifStroking) {\n    var cyan = this.c;\n    var magenta = this.m;\n    var yellow = this.y;\n    var black = this.b;\n    var colour = '';\n    colour = cyan.toString() + ' ' + magenta.toString() + ' ' + yellow.toString() + ' ' + black.toString() + ' K';\n    return colour + Operators.newLine;\n  };\n  /**\n   * Converts `colour to a PDF array`.\n   * @private\n   */\n  PdfColor.prototype.toArray = function (colorSpace) {\n    var array = new PdfArray();\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        array.add(new PdfNumber(this.red));\n        array.add(new PdfNumber(this.green));\n        array.add(new PdfNumber(this.blue));\n        break;\n    }\n    return array;\n  };\n  //Fields\n  /**\n   * Holds `RGB colors` converted into strings.\n   * @private\n   */\n  PdfColor.rgbStrings = new Dictionary();\n  /**\n   * Holds Gray scale colors converted into strings for `stroking`.\n   * @private\n   */\n  PdfColor.grayStringsSroke = new Dictionary();\n  /**\n   * Holds Gray scale colors converted into strings for `filling`.\n   * @private\n   */\n  PdfColor.grayStringsFill = new Dictionary();\n  /**\n   * `Max value` of color channel.\n   * @private\n   */\n  PdfColor.maxColourChannelValue = 255.0;\n  return PdfColor;\n}();\nexport { PdfColor };","map":{"version":3,"names":["PdfColorSpace","Operators","Dictionary","PdfNumber","PdfArray","PdfColor","color1","color2","color3","color4","assignRGB","filled","redColor","r","greenColor","g","blueColor","b","grayColor","gray","alpha","maxColourChannelValue","cyanColor","magentaColor","yellowColor","blackColor","prototype","a","assignCMYK","red","green","blue","black","min","cyan","magenta","yellow","Object","defineProperty","get","set","value","enumerable","configurable","toString","colorSpace","stroke","isEmpty","str","Rgb","rgbToString","GrayScale","grayScaleToString","Cmyk","cmykToString","ifStroking","colour","obj","grayStringsSroke","containsKey","getValue","grayStringsFill","setValue","newLine","key","rgbStrings","c","m","y","toArray","array","add"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-color.js"],"sourcesContent":["import { PdfColorSpace } from './enum';\nimport { Operators } from './../input-output/pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfArray } from './../primitives/pdf-array';\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\nvar PdfColor = /** @class */ (function () {\n    function PdfColor(color1, color2, color3, color4) {\n        if (typeof color1 === 'undefined') {\n            if (typeof color2 !== 'undefined' && typeof color3 !== 'undefined' && typeof color4 !== 'undefined') {\n                this.assignRGB(color2, color3, color4);\n            }\n            else {\n                this.filled = false;\n            }\n        }\n        else if (color1 instanceof PdfColor) {\n            this.redColor = color1.r;\n            this.greenColor = color1.g;\n            this.blueColor = color1.b;\n            this.grayColor = color1.gray;\n            this.alpha = color1.alpha;\n            this.filled = (this.alpha !== 0);\n            /* tslint:disable-next-line:max-line-length */\n        }\n        else if (typeof color1 === 'number' && typeof color2 === 'undefined' && typeof color3 === 'undefined' && typeof color4 === 'undefined') {\n            if (color1 < 0) {\n                color1 = 0;\n            }\n            if (color1 > 1) {\n                color1 = 1;\n            }\n            this.redColor = color1 * PdfColor.maxColourChannelValue;\n            this.greenColor = color1 * PdfColor.maxColourChannelValue;\n            this.blueColor = color1 * PdfColor.maxColourChannelValue;\n            this.cyanColor = color1;\n            this.magentaColor = color1;\n            this.yellowColor = color1;\n            this.blackColor = color1;\n            this.grayColor = color1;\n            this.alpha = PdfColor.maxColourChannelValue;\n            this.filled = true;\n        }\n        else if (typeof color4 === 'undefined') {\n            this.assignRGB(color1, color2, color3);\n        }\n        else {\n            this.assignRGB(color2, color3, color4, color1);\n        }\n    }\n    /**\n     * `Assign` red, green, blue colors with alpha value..\n     * @private\n     */\n    PdfColor.prototype.assignRGB = function (r, g, b, a) {\n        if (typeof r === 'undefined' || typeof g === 'undefined' || typeof b === 'undefined') {\n            this.filled = false;\n        }\n        else {\n            this.cyanColor = 0;\n            this.magentaColor = 0;\n            this.yellowColor = 0;\n            this.blackColor = 0;\n            this.grayColor = 0;\n            this.redColor = r;\n            this.greenColor = g;\n            this.blueColor = b;\n            if (typeof a === 'undefined') {\n                this.alpha = PdfColor.maxColourChannelValue;\n            }\n            else {\n                this.alpha = a;\n            }\n            this.filled = true;\n            this.assignCMYK(r, g, b);\n        }\n    };\n    /**\n     * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n     * @private\n     */\n    PdfColor.prototype.assignCMYK = function (r, g, b) {\n        var red = r / PdfColor.maxColourChannelValue;\n        var green = g / PdfColor.maxColourChannelValue;\n        var blue = b / PdfColor.maxColourChannelValue;\n        var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n        var cyan = (black === 1.0) ? 0 : (1 - red - black) / (1 - black);\n        var magenta = (black === 1.0) ? 0 : (1 - green - black) / (1 - black);\n        var yellow = (black === 1.0) ? 0 : (1 - blue - black) / (1 - black);\n        this.blackColor = black;\n        this.cyanColor = cyan;\n        this.magentaColor = magenta;\n        this.yellowColor = yellow;\n    };\n    Object.defineProperty(PdfColor.prototype, \"r\", {\n        //Properties\n        // public static get Empty():PdfColor\n        // {\n        //     return this.s_emptyColor\n        // }\n        /**\n         * Gets or sets `Red` channel value.\n         * @private\n         */\n        get: function () {\n            return this.redColor;\n        },\n        set: function (value) {\n            this.redColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"red\", {\n        /**\n         * Gets the `Red` color\n         * @private\n         */\n        get: function () {\n            return (this.r / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"b\", {\n        /**\n         * Gets or sets `Blue` channel value.\n         * @private\n         */\n        get: function () {\n            return this.blueColor;\n        },\n        set: function (value) {\n            this.blueColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"blue\", {\n        /**\n         * Gets the `blue` color.\n         * @private\n         */\n        get: function () {\n            return (this.b / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"c\", {\n        /**\n         * Gets or sets `Cyan` channel value.\n         * @private\n         */\n        get: function () {\n            return this.cyanColor;\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.cyanColor = 0;\n            }\n            else if (value > 1) {\n                this.cyanColor = 1;\n            }\n            else {\n                this.cyanColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"k\", {\n        /**\n         * Gets or sets `Black` channel value.\n         * @private\n         */\n        get: function () {\n            return this.blackColor;\n        },\n        set: function (value) {\n            if ((value < 0)) {\n                this.blackColor = 0;\n            }\n            else if ((value > 1)) {\n                this.blackColor = 1;\n            }\n            else {\n                this.blackColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"m\", {\n        /**\n         * Gets or sets `Magenta` channel value.\n         * @private\n         */\n        get: function () {\n            return this.magentaColor;\n        },\n        set: function (value) {\n            if ((value < 0)) {\n                this.magentaColor = 0;\n            }\n            else if ((value > 1)) {\n                this.magentaColor = 1;\n            }\n            else {\n                this.magentaColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"y\", {\n        /**\n         * Gets or sets `Yellow` channel value.\n         * @private\n         */\n        get: function () {\n            return this.yellowColor;\n        },\n        set: function (value) {\n            if ((value < 0)) {\n                this.yellowColor = 0;\n            }\n            else if ((value > 1)) {\n                this.yellowColor = 1;\n            }\n            else {\n                this.yellowColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"g\", {\n        /**\n         *  Gets or sets `Green` channel value.\n         * @private\n         */\n        get: function () {\n            return this.greenColor;\n        },\n        set: function (value) {\n            this.greenColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"green\", {\n        /**\n         * Gets the `Green` color.\n         * @private\n         */\n        get: function () {\n            return (this.g / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"gray\", {\n        /**\n         * Gets or sets `Gray` channel value.\n         * @private\n         */\n        get: function () {\n            return ((((this.redColor + this.greenColor) + this.blueColor)) / (PdfColor.maxColourChannelValue * 3));\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.grayColor = 0;\n            }\n            else if (value > 1) {\n                this.grayColor = 1;\n            }\n            else {\n                this.grayColor = value;\n            }\n            this.r = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.g = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.b = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"isEmpty\", {\n        /**\n         * Gets whether the PDFColor `is Empty` or not.\n         * @private\n         */\n        get: function () {\n            return !this.filled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"a\", {\n        /**\n         * Gets or sets `Alpha` channel value.\n         * @private\n         */\n        get: function () {\n            return this.alpha;\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.alpha = 0;\n            }\n            else {\n                // if (this.alpha !== value) {\n                this.alpha = value;\n                // }\n            }\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Public methods\n    /**\n     * Converts `PDFColor to PDF string` representation.\n     * @private\n     */\n    PdfColor.prototype.toString = function (colorSpace, stroke) {\n        if (this.isEmpty) {\n            return '';\n        }\n        var str = '';\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                str = this.rgbToString(stroke);\n                break;\n            case PdfColorSpace.GrayScale:\n                str = this.grayScaleToString(stroke);\n                break;\n            case PdfColorSpace.Cmyk:\n                str = this.cmykToString(stroke);\n                break;\n        }\n        return str;\n    };\n    /**\n     * Sets `GrayScale` color.\n     * @private\n     */\n    PdfColor.prototype.grayScaleToString = function (ifStroking) {\n        var gray = this.gray;\n        var colour = '';\n        var obj = null;\n        /* tslint:disable-next-line:max-line-length */\n        obj = (ifStroking) ? PdfColor.grayStringsSroke.containsKey(gray) ? PdfColor.grayStringsSroke.getValue(gray) : null : PdfColor.grayStringsFill.containsKey(gray) ? PdfColor.grayStringsFill.getValue(gray) : null;\n        if (obj == null) {\n            if (ifStroking) {\n                colour = gray.toString() + ' G';\n                PdfColor.grayStringsSroke.setValue(gray, colour);\n            }\n        }\n        else {\n            colour = obj.toString();\n        }\n        return colour + Operators.newLine;\n    };\n    /**\n     * Sets `RGB` color.\n     * @private\n     */\n    PdfColor.prototype.rgbToString = function (ifStroking) {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        var key = (r << 16) + (g << 8) + b;\n        if (ifStroking) {\n            key += 1 << 24;\n        }\n        var colour = '';\n        var obj = null;\n        if (PdfColor.rgbStrings.containsKey(key)) {\n            obj = PdfColor.rgbStrings.getValue(key);\n        }\n        if (obj == null) {\n            var red = r / PdfColor.maxColourChannelValue;\n            var green = g / PdfColor.maxColourChannelValue;\n            var blue = b / PdfColor.maxColourChannelValue;\n            if (ifStroking) {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n            }\n            else {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n            }\n            PdfColor.rgbStrings.setValue(key, colour);\n        }\n        else {\n            colour = obj.toString();\n        }\n        return colour + Operators.newLine;\n    };\n    /***\n     * Sets `CMYK` color.\n     * @private\n     */\n    PdfColor.prototype.cmykToString = function (ifStroking) {\n        var cyan = this.c;\n        var magenta = this.m;\n        var yellow = this.y;\n        var black = this.b;\n        var colour = '';\n        colour = cyan.toString() + ' ' + magenta.toString() + ' ' + yellow.toString() + ' ' + black.toString() + ' K';\n        return colour + Operators.newLine;\n    };\n    /**\n     * Converts `colour to a PDF array`.\n     * @private\n     */\n    PdfColor.prototype.toArray = function (colorSpace) {\n        var array = new PdfArray();\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                array.add(new PdfNumber(this.red));\n                array.add(new PdfNumber(this.green));\n                array.add(new PdfNumber(this.blue));\n                break;\n        }\n        return array;\n    };\n    //Fields\n    /**\n     * Holds `RGB colors` converted into strings.\n     * @private\n     */\n    PdfColor.rgbStrings = new Dictionary();\n    /**\n     * Holds Gray scale colors converted into strings for `stroking`.\n     * @private\n     */\n    PdfColor.grayStringsSroke = new Dictionary();\n    /**\n     * Holds Gray scale colors converted into strings for `filling`.\n     * @private\n     */\n    PdfColor.grayStringsFill = new Dictionary();\n    /**\n     * `Max value` of color channel.\n     * @private\n     */\n    PdfColor.maxColourChannelValue = 255.0;\n    return PdfColor;\n}());\nexport { PdfColor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}