{"ast":null,"code":"/* eslint-disable no-case-declarations */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * To import utils.\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\nvar CanvasRenderer = /** @class */function () {\n  /* End-Properties */\n  function CanvasRenderer(rootID) {\n    this.rootId = rootID;\n  }\n  // method to get the attributes value\n  // tslint:disable-next-line:no-any\n  CanvasRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  };\n  /* tslint:enable */\n  /**\n   * To create a Html5 canvas element\n   *\n   * @param {BaseAttibutes} options - Options to create canvas\n   * @returns {HTMLCanvasElement} Creating a canvas\n   */\n  CanvasRenderer.prototype.createCanvas = function (options) {\n    var canvasObj = document.createElement('canvas');\n    canvasObj.setAttribute('id', this.rootId + '_canvas');\n    this.ctx = canvasObj.getContext('2d');\n    this.canvasObj = canvasObj;\n    this.setCanvasSize(options.width, options.height);\n    return this.canvasObj;\n  };\n  /**\n   * To set the width and height for the Html5 canvas element\n   *\n   * @param {number} width - width of the canvas\n   * @param {number} height - height of the canvas\n   * @returns {void} Setting canvas size\n   */\n  CanvasRenderer.prototype.setCanvasSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n    if (isNullOrUndefined(this.width)) {\n      this.canvasObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.canvasObj.setAttribute('width', this.width.toString());\n    }\n    if (isNullOrUndefined(this.height)) {\n      this.canvasObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.canvasObj.setAttribute('height', this.height.toString());\n    }\n  };\n  // To set the values to the attributes\n  CanvasRenderer.prototype.setAttributes = function (options) {\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    var dashArray = this.getOptionValue(options, 'stroke-dasharray');\n    if (!isNullOrUndefined(dashArray)) {\n      var dashArrayString = dashArray.split(',');\n      this.ctx.setLineDash([parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10)]);\n    }\n    this.ctx.strokeStyle = this.getOptionValue(options, 'stroke');\n  };\n  /**\n   * To draw a line\n   *\n   * @param {LineAttributes} options - required options to draw a line on the canvas\n   * @returns {void} To draw a line\n   */\n  CanvasRenderer.prototype.drawLine = function (options) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.moveTo(options.x1, options.y1);\n    this.ctx.lineTo(options.x2, options.y2);\n    this.ctx.stroke();\n    this.ctx.restore();\n  };\n  /**\n   * To draw a rectangle\n   *\n   * @param {RectAttributes} options - required options to draw a rectangle on the canvas.\n   * @param {Int32Array} canvasTranslate TO get a translate value of canvas.\n   * @returns {void} To draw rectangle.\n   */\n  CanvasRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    var cornerRadius = options.rx;\n    this.ctx.save();\n    this.ctx.beginPath();\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n    this.ctx.globalAlpha = this.getOptionValue(options, 'opacity');\n    this.setAttributes(options);\n    this.ctx.rect(options.x, options.y, options.width, options.height);\n    if (cornerRadius !== null && cornerRadius >= 0) {\n      this.drawCornerRadius(options);\n    } else {\n      if (options.fill === 'none') {\n        options.fill = 'transparent';\n      }\n      this.ctx.fillStyle = options.fill;\n      this.ctx.fillRect(options.x, options.y, options.width, options.height);\n      this.ctx.stroke();\n    }\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  // To draw the corner of a rectangle\n  CanvasRenderer.prototype.drawCornerRadius = function (options) {\n    var cornerRadius = options.rx;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width;\n    var height = options.height;\n    if (options.fill === 'none') {\n      options.fill = 'transparent';\n    }\n    this.ctx.fillStyle = options.fill;\n    if (width < 2 * cornerRadius) {\n      cornerRadius = width / 2;\n    }\n    if (height < 2 * cornerRadius) {\n      cornerRadius = height / 2;\n    }\n    this.ctx.beginPath();\n    this.ctx.moveTo(x + width - cornerRadius, y);\n    this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius);\n    this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius);\n    this.ctx.arcTo(x, y + height, x, y, cornerRadius);\n    this.ctx.arcTo(x, y, x + width, y, cornerRadius);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n  };\n  /**\n   * To draw a path on the canvas\n   *\n   * @param {PathAttributes} options - options needed to draw path.\n   * @param {Int32Array} canvasTranslate - Array of numbers to translate the canvas.\n   * @returns {Element} To draw a path.\n   */\n  CanvasRenderer.prototype.drawPath = function (options, canvasTranslate) {\n    var path = options.d;\n    var dataSplit = path.split(' ');\n    var borderWidth = this.getOptionValue(options, 'stroke-width');\n    var canvasCtx = this.ctx;\n    var flag = true;\n    this.ctx.save();\n    this.ctx.beginPath();\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n    this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, 'fill-opacity');\n    this.setAttributes(options);\n    for (var i = 0; i < dataSplit.length; i = i + 3) {\n      var x1 = parseFloat(dataSplit[i + 1]);\n      var y1 = parseFloat(dataSplit[i + 2]);\n      switch (dataSplit[i]) {\n        case 'M':\n          if (!options.innerR && !options.cx) {\n            this.ctx.moveTo(x1, y1);\n          }\n          break;\n        case 'L':\n          if (!options.innerR) {\n            this.ctx.lineTo(x1, y1);\n          }\n          break;\n        case 'Q':\n          var q1 = parseFloat(dataSplit[i + 3]);\n          var q2 = parseFloat(dataSplit[i + 4]);\n          this.ctx.quadraticCurveTo(x1, y1, q1, q2);\n          i = i + 2;\n          break;\n        case 'C':\n          var c1 = parseFloat(dataSplit[i + 3]);\n          var c2 = parseFloat(dataSplit[i + 4]);\n          var c3 = parseFloat(dataSplit[i + 5]);\n          var c4 = parseFloat(dataSplit[i + 6]);\n          this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4);\n          i = i + 4;\n          break;\n        case 'A':\n          if (!options.innerR) {\n            if (options.cx) {\n              this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise);\n            } else {\n              this.ctx.moveTo(options.x, options.y);\n              this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n              this.ctx.lineTo(options.x, options.y);\n            }\n          } else if (flag) {\n            this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n            this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise);\n            flag = false;\n          }\n          i = i + 5;\n          break;\n        case 'z':\n        case 'Z':\n          this.ctx.closePath();\n          //since for loop is incremented by 3, to get next value after 'z' i is decremented for 2.\n          i = i - 2;\n          break;\n      }\n    }\n    if (options.fill !== 'none' && options.fill !== undefined) {\n      this.ctx.fillStyle = options.fill;\n      this.ctx.fill();\n    }\n    if (borderWidth > 0) {\n      this.ctx.stroke();\n    }\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  /**\n   * To draw a text\n   *\n   * @param {TextAttributes} options - options required to draw text\n   * @param {string} label - Specifies the text which has to be drawn on the canvas\n   * @param {number} transX - Specifies the text of translate X\n   * @param {number} transY - Specifies the text of translate Y\n   * @param {number} dy - Specifies the text of translate dy\n   * @param {boolean} isTSpan - Specifies the boolean value of span value\n   * @returns {void}\n   */\n  CanvasRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n    var fontWeight = this.getOptionValue(options, 'font-weight');\n    if (!isNullOrUndefined(fontWeight) && fontWeight.toLowerCase() === 'regular') {\n      fontWeight = 'normal';\n    }\n    var fontSize = this.getOptionValue(options, 'font-size');\n    var fontFamily = this.getOptionValue(options, 'font-family');\n    var fontStyle = this.getOptionValue(options, 'font-style').toLowerCase();\n    var font = fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily;\n    var anchor = this.getOptionValue(options, 'text-anchor');\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n    if (anchor === 'middle') {\n      anchor = 'center';\n    }\n    this.ctx.save();\n    this.ctx.fillStyle = options.fill;\n    this.ctx.font = font;\n    this.ctx.textAlign = anchor;\n    this.ctx.globalAlpha = opacity;\n    if (options.baseline) {\n      this.ctx.textBaseline = options.baseline;\n    }\n    if (!isTSpan) {\n      var txtlngth = 0;\n      this.ctx.translate(options.x + txtlngth / 2 + (transX ? transX : 0), options.y + (transY ? transY : 0));\n      this.ctx.rotate(options.labelRotation * Math.PI / 180);\n    }\n    this.ctx.fillText(label, isTSpan ? options.x : 0, isTSpan ? dy : 0);\n    this.ctx.restore();\n    return this.canvasObj;\n  };\n  /**\n   * To draw circle on the canvas\n   *\n   * @param {CircleAttributes} options - required options to draw the circle\n   * @param {Int32Array} canvasTranslate Translate value of canvas\n   * @returns {void}\n   */\n  CanvasRenderer.prototype.drawCircle = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = options.fill;\n    this.ctx.globalAlpha = options.opacity;\n    this.ctx.fill();\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n    this.setAttributes(options);\n    this.ctx.stroke();\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  /**\n   * To draw polyline\n   *\n   * @param {PolylineAttributes} options - options needed to draw polyline\n   * @returns {void}\n   */\n  CanvasRenderer.prototype.drawPolyline = function (options) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    var points = options.points.split(' ');\n    for (var i = 0; i < points.length - 1; i++) {\n      var point = points[i].split(',');\n      var x = parseFloat(point[0]);\n      var y = parseFloat(point[1]);\n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.stroke();\n    this.ctx.restore();\n  };\n  /**\n   * To draw an ellipse on the canvas\n   *\n   * @param {EllipseAttributes} options - options needed to draw ellipse\n   * @param {Int32Array} canvasTranslate Translate value of canvas\n   * @returns {void}\n   */\n  CanvasRenderer.prototype.drawEllipse = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    var circumference = Math.max(options.rx, options.ry);\n    var scaleX = options.rx / circumference;\n    var scaleY = options.ry / circumference;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.translate(options.cx, options.cy);\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n    this.ctx.save();\n    this.ctx.scale(scaleX, scaleY);\n    this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, false);\n    this.ctx.fillStyle = options.fill;\n    this.ctx.fill();\n    this.ctx.restore();\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.stroke();\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n  };\n  /**\n   * To draw an image\n   *\n   * @param {ImageAttributes} options - options required to draw an image on the canvas\n   * @returns {void}\n   */\n  CanvasRenderer.prototype.drawImage = function (options) {\n    this.ctx.save();\n    var imageObj = new Image();\n    if (!isNullOrUndefined(options.href)) {\n      imageObj.src = options.href;\n      this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height);\n    }\n    this.ctx.restore();\n  };\n  /**\n   * To create a linear gradient\n   *\n   * @param {string[]} colors - Specifies the colors required to create linear gradient\n   * @returns {string} It returns color\n   */\n  CanvasRenderer.prototype.createLinearGradient = function (colors) {\n    var myGradient;\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height);\n    }\n    var color = this.setGradientValues(colors, myGradient);\n    return color;\n  };\n  /**\n   * To create a radial gradient\n   *\n   * @param {string[]} colors - Specifies the colors required to create linear gradient\n   * @returns {string} It returns gradient color\n   */\n  CanvasRenderer.prototype.createRadialGradient = function (colors) {\n    var myGradient;\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height);\n    }\n    var colorName = this.setGradientValues(colors, myGradient);\n    return colorName;\n  };\n  // To set the gradient values\n  CanvasRenderer.prototype.setGradientValues = function (colors, myGradient) {\n    var colorName;\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      for (var i = 0; i <= colors.length - 1; i++) {\n        var color = colors[i].color;\n        var newColorStop = colors[i].colorStop.slice(0, -1);\n        var stopColor = parseInt(newColorStop, 10) / 100;\n        myGradient.addColorStop(stopColor, color);\n      }\n      colorName = myGradient.toString();\n    } else {\n      colorName = colors[0].color.toString();\n    }\n    return colorName;\n  };\n  /**\n   * To set the attributes to the element\n   *\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\n   * @param {HTMLElement} element - The element to which the attributes need to be set\n   * @returns {HTMLElement} It returns null value\n   */\n  CanvasRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n    var values = Object.keys(options).map(function (key) {\n      return options[key];\n    });\n    for (var i = 0; i < keys.length; i++) {\n      element.setAttribute(keys[i], values[i]);\n    }\n    return null;\n  };\n  /**\n   * To update the values of the canvas element attributes\n   *\n   * @param {SVGCanvasAttributes} options - Specifies the colors required to create gradient\n   * @returns {void}\n   */\n  CanvasRenderer.prototype.updateCanvasAttributes = function (options) {\n    this.setElementAttributes(options, this.canvasObj);\n    var ctx = this.ctx;\n    if (!isNullOrUndefined(this.dataUrl)) {\n      var img_1 = new Image();\n      img_1.onload = function () {\n        ctx.drawImage(img_1, 0, 0);\n      };\n      img_1.src = this.dataUrl;\n    }\n  };\n  /**\n   * This method clears the given rectangle region\n   *\n   * @param {Rect} rect The rect parameter as passed\n   */\n  CanvasRenderer.prototype.clearRect = function (rect) {\n    this.ctx.restore();\n    this.ctx.clearRect(rect.x, rect.y, rect.width, rect.height);\n  };\n  /**\n   * For canvas rendering in chart\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n  CanvasRenderer.prototype.createGroup = function () {\n    return null;\n  };\n  /**\n   * To render a clip path\n   *\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n  CanvasRenderer.prototype.drawClipPath = function () {\n    return null;\n  };\n  /**\n   * To render a Circular clip path\n   *\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n  CanvasRenderer.prototype.drawCircularClipPath = function () {\n    return null;\n  };\n  /**\n   * Clip method to perform clip in canvas mode\n   *\n   * @param {BaseAttibutes} options The canvas clip of options\n   */\n  CanvasRenderer.prototype.canvasClip = function (options) {\n    this.ctx.save();\n    this.ctx.fillStyle = 'transparent';\n    this.ctx.rect(options.x, options.y, options.width, options.height);\n    this.ctx.fill();\n    this.ctx.clip();\n  };\n  /**\n   * Tp restore the canvas\n   */\n  CanvasRenderer.prototype.canvasRestore = function () {\n    this.ctx.restore();\n  };\n  /**\n   * To draw a polygon\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n  CanvasRenderer.prototype.drawPolygon = function () {\n    return null;\n  };\n  /**\n   * To create defs element in SVG\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   *\n   * @returns {Element} It returns null\n   */\n  CanvasRenderer.prototype.createDefs = function () {\n    return null;\n  };\n  /**\n   * To create clip path in SVG\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n  CanvasRenderer.prototype.createClipPath = function () {\n    return null;\n  };\n  /**\n   * To create a Html5 SVG element\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   *\n   * @returns {Element} It returns null\n   */\n  CanvasRenderer.prototype.createSvg = function () {\n    return null;\n  };\n  return CanvasRenderer;\n}();\nexport { CanvasRenderer };","map":{"version":3,"names":["isNullOrUndefined","CanvasRenderer","rootID","rootId","prototype","getOptionValue","options","key","createCanvas","canvasObj","document","createElement","setAttribute","ctx","getContext","setCanvasSize","width","height","element","getElementById","size","getBoundingClientRect","toString","setAttributes","lineWidth","dashArray","dashArrayString","split","setLineDash","parseInt","strokeStyle","drawLine","save","beginPath","stroke","moveTo","x1","y1","lineTo","x2","y2","restore","drawRectangle","canvasTranslate","canvasCtx","cornerRadius","rx","translate","globalAlpha","rect","x","y","drawCornerRadius","fill","fillStyle","fillRect","arcTo","closePath","drawPath","path","d","dataSplit","borderWidth","flag","opacity","i","length","parseFloat","innerR","cx","q1","q2","quadraticCurveTo","c1","c2","c3","c4","bezierCurveTo","arc","cy","radius","Math","PI","counterClockWise","start","end","undefined","createText","label","transX","transY","dy","isTSpan","fontWeight","toLowerCase","fontSize","fontFamily","fontStyle","font","anchor","textAlign","baseline","textBaseline","txtlngth","rotate","labelRotation","fillText","drawCircle","r","drawPolyline","points","point","drawEllipse","circumference","max","ry","scaleX","scaleY","scale","drawImage","imageObj","Image","href","src","createLinearGradient","colors","myGradient","colorStop","color","setGradientValues","createRadialGradient","colorName","newColorStop","slice","stopColor","addColorStop","setElementAttributes","keys","Object","values","map","updateCanvasAttributes","dataUrl","img_1","onload","clearRect","createGroup","drawClipPath","drawCircularClipPath","canvasClip","clip","canvasRestore","drawPolygon","createDefs","createClipPath","createSvg"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-svg-base/src/svg-render/canvas-renderer.js"],"sourcesContent":["/* eslint-disable no-case-declarations */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * To import utils.\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\nvar CanvasRenderer = /** @class */ (function () {\n    /* End-Properties */\n    function CanvasRenderer(rootID) {\n        this.rootId = rootID;\n    }\n    // method to get the attributes value\n    // tslint:disable-next-line:no-any\n    CanvasRenderer.prototype.getOptionValue = function (options, key) {\n        return options[key];\n    };\n    /* tslint:enable */\n    /**\n     * To create a Html5 canvas element\n     *\n     * @param {BaseAttibutes} options - Options to create canvas\n     * @returns {HTMLCanvasElement} Creating a canvas\n     */\n    CanvasRenderer.prototype.createCanvas = function (options) {\n        var canvasObj = document.createElement('canvas');\n        canvasObj.setAttribute('id', this.rootId + '_canvas');\n        this.ctx = canvasObj.getContext('2d');\n        this.canvasObj = canvasObj;\n        this.setCanvasSize(options.width, options.height);\n        return this.canvasObj;\n    };\n    /**\n     * To set the width and height for the Html5 canvas element\n     *\n     * @param {number} width - width of the canvas\n     * @param {number} height - height of the canvas\n     * @returns {void} Setting canvas size\n     */\n    CanvasRenderer.prototype.setCanvasSize = function (width, height) {\n        var element = document.getElementById(this.rootId);\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n        if (isNullOrUndefined(this.width)) {\n            this.canvasObj.setAttribute('width', width ? width.toString() : size.width.toString());\n        }\n        else {\n            this.canvasObj.setAttribute('width', this.width.toString());\n        }\n        if (isNullOrUndefined(this.height)) {\n            this.canvasObj.setAttribute('height', height ? height.toString() : '450');\n        }\n        else {\n            this.canvasObj.setAttribute('height', this.height.toString());\n        }\n    };\n    // To set the values to the attributes\n    CanvasRenderer.prototype.setAttributes = function (options) {\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        var dashArray = this.getOptionValue(options, 'stroke-dasharray');\n        if (!isNullOrUndefined(dashArray)) {\n            var dashArrayString = dashArray.split(',');\n            this.ctx.setLineDash([parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10)]);\n        }\n        this.ctx.strokeStyle = this.getOptionValue(options, 'stroke');\n    };\n    /**\n     * To draw a line\n     *\n     * @param {LineAttributes} options - required options to draw a line on the canvas\n     * @returns {void} To draw a line\n     */\n    CanvasRenderer.prototype.drawLine = function (options) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.moveTo(options.x1, options.y1);\n        this.ctx.lineTo(options.x2, options.y2);\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * To draw a rectangle\n     *\n     * @param {RectAttributes} options - required options to draw a rectangle on the canvas.\n     * @param {Int32Array} canvasTranslate TO get a translate value of canvas.\n     * @returns {void} To draw rectangle.\n     */\n    CanvasRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        var cornerRadius = options.rx;\n        this.ctx.save();\n        this.ctx.beginPath();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.globalAlpha = this.getOptionValue(options, 'opacity');\n        this.setAttributes(options);\n        this.ctx.rect(options.x, options.y, options.width, options.height);\n        if (cornerRadius !== null && cornerRadius >= 0) {\n            this.drawCornerRadius(options);\n        }\n        else {\n            if (options.fill === 'none') {\n                options.fill = 'transparent';\n            }\n            this.ctx.fillStyle = options.fill;\n            this.ctx.fillRect(options.x, options.y, options.width, options.height);\n            this.ctx.stroke();\n        }\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return (this.canvasObj);\n    };\n    // To draw the corner of a rectangle\n    CanvasRenderer.prototype.drawCornerRadius = function (options) {\n        var cornerRadius = options.rx;\n        var x = options.x;\n        var y = options.y;\n        var width = options.width;\n        var height = options.height;\n        if (options.fill === 'none') {\n            options.fill = 'transparent';\n        }\n        this.ctx.fillStyle = options.fill;\n        if (width < 2 * cornerRadius) {\n            cornerRadius = width / 2;\n        }\n        if (height < 2 * cornerRadius) {\n            cornerRadius = height / 2;\n        }\n        this.ctx.beginPath();\n        this.ctx.moveTo(x + width - cornerRadius, y);\n        this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius);\n        this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius);\n        this.ctx.arcTo(x, y + height, x, y, cornerRadius);\n        this.ctx.arcTo(x, y, x + width, y, cornerRadius);\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    };\n    /**\n     * To draw a path on the canvas\n     *\n     * @param {PathAttributes} options - options needed to draw path.\n     * @param {Int32Array} canvasTranslate - Array of numbers to translate the canvas.\n     * @returns {Element} To draw a path.\n     */\n    CanvasRenderer.prototype.drawPath = function (options, canvasTranslate) {\n        var path = options.d;\n        var dataSplit = path.split(' ');\n        var borderWidth = this.getOptionValue(options, 'stroke-width');\n        var canvasCtx = this.ctx;\n        var flag = true;\n        this.ctx.save();\n        this.ctx.beginPath();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, 'fill-opacity');\n        this.setAttributes(options);\n        for (var i = 0; i < dataSplit.length; i = i + 3) {\n            var x1 = parseFloat(dataSplit[i + 1]);\n            var y1 = parseFloat(dataSplit[i + 2]);\n            switch (dataSplit[i]) {\n                case 'M':\n                    if (!options.innerR && !options.cx) {\n                        this.ctx.moveTo(x1, y1);\n                    }\n                    break;\n                case 'L':\n                    if (!options.innerR) {\n                        this.ctx.lineTo(x1, y1);\n                    }\n                    break;\n                case 'Q':\n                    var q1 = parseFloat(dataSplit[i + 3]);\n                    var q2 = parseFloat(dataSplit[i + 4]);\n                    this.ctx.quadraticCurveTo(x1, y1, q1, q2);\n                    i = i + 2;\n                    break;\n                case 'C':\n                    var c1 = parseFloat(dataSplit[i + 3]);\n                    var c2 = parseFloat(dataSplit[i + 4]);\n                    var c3 = parseFloat(dataSplit[i + 5]);\n                    var c4 = parseFloat(dataSplit[i + 6]);\n                    this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4);\n                    i = i + 4;\n                    break;\n                case 'A':\n                    if (!options.innerR) {\n                        if (options.cx) {\n                            this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise);\n                        }\n                        else {\n                            this.ctx.moveTo(options.x, options.y);\n                            this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n                            this.ctx.lineTo(options.x, options.y);\n                        }\n                    }\n                    else if (flag) {\n                        this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n                        this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise);\n                        flag = false;\n                    }\n                    i = i + 5;\n                    break;\n                case 'z':\n                case 'Z':\n                    this.ctx.closePath();\n                    //since for loop is incremented by 3, to get next value after 'z' i is decremented for 2.\n                    i = i - 2;\n                    break;\n            }\n        }\n        if (options.fill !== 'none' && options.fill !== undefined) {\n            this.ctx.fillStyle = options.fill;\n            this.ctx.fill();\n        }\n        if (borderWidth > 0) {\n            this.ctx.stroke();\n        }\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return this.canvasObj;\n    };\n    /**\n     * To draw a text\n     *\n     * @param {TextAttributes} options - options required to draw text\n     * @param {string} label - Specifies the text which has to be drawn on the canvas\n     * @param {number} transX - Specifies the text of translate X\n     * @param {number} transY - Specifies the text of translate Y\n     * @param {number} dy - Specifies the text of translate dy\n     * @param {boolean} isTSpan - Specifies the boolean value of span value\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n        var fontWeight = this.getOptionValue(options, 'font-weight');\n        if (!isNullOrUndefined(fontWeight) && fontWeight.toLowerCase() === 'regular') {\n            fontWeight = 'normal';\n        }\n        var fontSize = this.getOptionValue(options, 'font-size');\n        var fontFamily = this.getOptionValue(options, 'font-family');\n        var fontStyle = this.getOptionValue(options, 'font-style').toLowerCase();\n        var font = (fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily);\n        var anchor = this.getOptionValue(options, 'text-anchor');\n        var opacity = options.opacity !== undefined ? options.opacity : 1;\n        if (anchor === 'middle') {\n            anchor = 'center';\n        }\n        this.ctx.save();\n        this.ctx.fillStyle = options.fill;\n        this.ctx.font = font;\n        this.ctx.textAlign = anchor;\n        this.ctx.globalAlpha = opacity;\n        if (options.baseline) {\n            this.ctx.textBaseline = options.baseline;\n        }\n        if (!isTSpan) {\n            var txtlngth = 0;\n            this.ctx.translate(options.x + (txtlngth / 2) + (transX ? transX : 0), options.y + (transY ? transY : 0));\n            this.ctx.rotate(options.labelRotation * Math.PI / 180);\n        }\n        this.ctx.fillText(label, isTSpan ? options.x : 0, isTSpan ? dy : 0);\n        this.ctx.restore();\n        return this.canvasObj;\n    };\n    /**\n     * To draw circle on the canvas\n     *\n     * @param {CircleAttributes} options - required options to draw the circle\n     * @param {Int32Array} canvasTranslate Translate value of canvas\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawCircle = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI);\n        this.ctx.fillStyle = options.fill;\n        this.ctx.globalAlpha = options.opacity;\n        this.ctx.fill();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.setAttributes(options);\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return this.canvasObj;\n    };\n    /**\n     * To draw polyline\n     *\n     * @param {PolylineAttributes} options - options needed to draw polyline\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawPolyline = function (options) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var points = options.points.split(' ');\n        for (var i = 0; i < points.length - 1; i++) {\n            var point = points[i].split(',');\n            var x = parseFloat(point[0]);\n            var y = parseFloat(point[1]);\n            if (i === 0) {\n                this.ctx.moveTo(x, y);\n            }\n            else {\n                this.ctx.lineTo(x, y);\n            }\n        }\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * To draw an ellipse on the canvas\n     *\n     * @param {EllipseAttributes} options - options needed to draw ellipse\n     * @param {Int32Array} canvasTranslate Translate value of canvas\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawEllipse = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        var circumference = Math.max(options.rx, options.ry);\n        var scaleX = options.rx / circumference;\n        var scaleY = options.ry / circumference;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.translate(options.cx, options.cy);\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.save();\n        this.ctx.scale(scaleX, scaleY);\n        this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, false);\n        this.ctx.fillStyle = options.fill;\n        this.ctx.fill();\n        this.ctx.restore();\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n    };\n    /**\n     * To draw an image\n     *\n     * @param {ImageAttributes} options - options required to draw an image on the canvas\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawImage = function (options) {\n        this.ctx.save();\n        var imageObj = new Image();\n        if (!isNullOrUndefined(options.href)) {\n            imageObj.src = options.href;\n            this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * To create a linear gradient\n     *\n     * @param {string[]} colors - Specifies the colors required to create linear gradient\n     * @returns {string} It returns color\n     */\n    CanvasRenderer.prototype.createLinearGradient = function (colors) {\n        var myGradient;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height);\n        }\n        var color = this.setGradientValues(colors, myGradient);\n        return color;\n    };\n    /**\n     * To create a radial gradient\n     *\n     * @param {string[]} colors - Specifies the colors required to create linear gradient\n     * @returns {string} It returns gradient color\n     */\n    CanvasRenderer.prototype.createRadialGradient = function (colors) {\n        var myGradient;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height);\n        }\n        var colorName = this.setGradientValues(colors, myGradient);\n        return colorName;\n    };\n    // To set the gradient values\n    CanvasRenderer.prototype.setGradientValues = function (colors, myGradient) {\n        var colorName;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            for (var i = 0; i <= colors.length - 1; i++) {\n                var color = colors[i].color;\n                var newColorStop = (colors[i].colorStop).slice(0, -1);\n                var stopColor = parseInt(newColorStop, 10) / 100;\n                myGradient.addColorStop(stopColor, color);\n            }\n            colorName = myGradient.toString();\n        }\n        else {\n            colorName = colors[0].color.toString();\n        }\n        return colorName;\n    };\n    /**\n     * To set the attributes to the element\n     *\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\n     * @param {HTMLElement} element - The element to which the attributes need to be set\n     * @returns {HTMLElement} It returns null value\n     */\n    CanvasRenderer.prototype.setElementAttributes = function (options, element) {\n        var keys = Object.keys(options);\n        var values = Object.keys(options).map(function (key) { return options[key]; });\n        for (var i = 0; i < keys.length; i++) {\n            element.setAttribute(keys[i], values[i]);\n        }\n        return null;\n    };\n    /**\n     * To update the values of the canvas element attributes\n     *\n     * @param {SVGCanvasAttributes} options - Specifies the colors required to create gradient\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.updateCanvasAttributes = function (options) {\n        this.setElementAttributes(options, this.canvasObj);\n        var ctx = this.ctx;\n        if (!isNullOrUndefined(this.dataUrl)) {\n            var img_1 = new Image;\n            img_1.onload = function () {\n                ctx.drawImage(img_1, 0, 0);\n            };\n            img_1.src = this.dataUrl;\n        }\n    };\n    /**\n     * This method clears the given rectangle region\n     *\n     * @param {Rect} rect The rect parameter as passed\n     */\n    CanvasRenderer.prototype.clearRect = function (rect) {\n        this.ctx.restore();\n        this.ctx.clearRect(rect.x, rect.y, rect.width, rect.height);\n    };\n    /**\n     * For canvas rendering in chart\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.createGroup = function () {\n        return null;\n    };\n    /**\n     * To render a clip path\n     *\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.drawClipPath = function () {\n        return null;\n    };\n    /**\n     * To render a Circular clip path\n     *\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.drawCircularClipPath = function () {\n        return null;\n    };\n    /**\n     * Clip method to perform clip in canvas mode\n     *\n     * @param {BaseAttibutes} options The canvas clip of options\n     */\n    CanvasRenderer.prototype.canvasClip = function (options) {\n        this.ctx.save();\n        this.ctx.fillStyle = 'transparent';\n        this.ctx.rect(options.x, options.y, options.width, options.height);\n        this.ctx.fill();\n        this.ctx.clip();\n    };\n    /**\n     * Tp restore the canvas\n     */\n    CanvasRenderer.prototype.canvasRestore = function () {\n        this.ctx.restore();\n    };\n    /**\n     * To draw a polygon\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.drawPolygon = function () {\n        return null;\n    };\n    /**\n     * To create defs element in SVG\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     *\n     * @returns {Element} It returns null\n     */\n    CanvasRenderer.prototype.createDefs = function () {\n        return null;\n    };\n    /**\n     * To create clip path in SVG\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.createClipPath = function () {\n        return null;\n    };\n    /**\n     * To create a Html5 SVG element\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     *\n     * @returns {Element} It returns null\n     */\n    CanvasRenderer.prototype.createSvg = function () {\n        return null;\n    };\n    return CanvasRenderer;\n}());\nexport { CanvasRenderer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}