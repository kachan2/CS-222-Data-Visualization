{"ast":null,"code":"import { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * Represents a simple `transparency`.\n * @private\n */\nvar PdfTransparency = /** @class */function () {\n  // Properties\n  // /**\n  //  * Gets the `stroke` operation alpha value.\n  //  * @private\n  //  */\n  // public get stroke() : number {\n  //     let result : number = this.getNumber(this.dictionaryProperties.CA);\n  //     return result;\n  // }\n  // /**\n  //  * Gets the `fill` operation alpha value.\n  //  * @private\n  //  */\n  // public get fill() : number {\n  //     let result : number = this.getNumber(this.dictionaryProperties.ca);\n  //     return result;\n  // }\n  // /**\n  //  * Gets the `blend mode`.\n  //  * @private\n  //  */\n  // public get mode() : PdfBlendMode {\n  //     let result : string = this.getName(this.dictionaryProperties.ca);\n  //     return PdfBlendMode.Normal;\n  // }\n  // Constructors\n  /**\n   * Initializes a new instance of the `Transparency` class.\n   * @private\n   */\n  function PdfTransparency(stroke, fill, mode) {\n    // Fields\n    /**\n     * Internal variable to store `dictionary`.\n     * @default new PdfDictionary()\n     * @private\n     */\n    this.dictionary = new PdfDictionary();\n    /**\n     * Internal variable for accessing fields from `DictionryProperties` class.\n     * @default new DictionaryProperties()\n     * @private\n     */\n    this.dictionaryProperties = new DictionaryProperties();\n    this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\n    this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\n    this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\n  }\n  Object.defineProperty(PdfTransparency.prototype, \"element\", {\n    // // Implementation\n    // /**\n    //  * Gets the `number value`.\n    //  * @private\n    //  */\n    // private getNumber(keyName : string) : number {\n    //     let result : number = 0.0;\n    //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\n    //     result = numb.intValue;\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `name value`.\n    //  * @private\n    //  */\n    // private getName(keyName : string) : string {\n    //     let result : string = null;\n    //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\n    //     result = name.value;\n    //     return result;\n    // }\n    // IPdfWrapper Members\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.dictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfTransparency;\n}();\nexport { PdfTransparency };","map":{"version":3,"names":["PdfDictionary","PdfNumber","PdfName","DictionaryProperties","PdfTransparency","stroke","fill","mode","dictionary","dictionaryProperties","items","setValue","CA","ca","BM","toString","Object","defineProperty","prototype","get","enumerable","configurable"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transparency.js"],"sourcesContent":["import { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * Represents a simple `transparency`.\n * @private\n */\nvar PdfTransparency = /** @class */ (function () {\n    // Properties\n    // /**\n    //  * Gets the `stroke` operation alpha value.\n    //  * @private\n    //  */\n    // public get stroke() : number {\n    //     let result : number = this.getNumber(this.dictionaryProperties.CA);\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `fill` operation alpha value.\n    //  * @private\n    //  */\n    // public get fill() : number {\n    //     let result : number = this.getNumber(this.dictionaryProperties.ca);\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `blend mode`.\n    //  * @private\n    //  */\n    // public get mode() : PdfBlendMode {\n    //     let result : string = this.getName(this.dictionaryProperties.ca);\n    //     return PdfBlendMode.Normal;\n    // }\n    // Constructors\n    /**\n     * Initializes a new instance of the `Transparency` class.\n     * @private\n     */\n    function PdfTransparency(stroke, fill, mode) {\n        // Fields\n        /**\n         * Internal variable to store `dictionary`.\n         * @default new PdfDictionary()\n         * @private\n         */\n        this.dictionary = new PdfDictionary();\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @default new DictionaryProperties()\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\n        this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\n        this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\n    }\n    Object.defineProperty(PdfTransparency.prototype, \"element\", {\n        // // Implementation\n        // /**\n        //  * Gets the `number value`.\n        //  * @private\n        //  */\n        // private getNumber(keyName : string) : number {\n        //     let result : number = 0.0;\n        //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\n        //     result = numb.intValue;\n        //     return result;\n        // }\n        // /**\n        //  * Gets the `name value`.\n        //  * @private\n        //  */\n        // private getName(keyName : string) : string {\n        //     let result : string = null;\n        //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\n        //     result = name.value;\n        //     return result;\n        // }\n        // IPdfWrapper Members\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.dictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTransparency;\n}());\nexport { PdfTransparency };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,OAAO,QAAQ,0BAA0B;AAClD,SAASC,oBAAoB,QAAQ,6CAA6C;AAClF;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,aAAe,YAAY;EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;EACI,SAASA,eAAe,CAACC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACzC;IACA;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAIR,aAAa,EAAE;IACrC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACS,oBAAoB,GAAG,IAAIN,oBAAoB,EAAE;IACtD,IAAI,CAACK,UAAU,CAACE,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACF,oBAAoB,CAACG,EAAE,EAAE,IAAIX,SAAS,CAACI,MAAM,CAAC,CAAC;IACnF,IAAI,CAACG,UAAU,CAACE,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACF,oBAAoB,CAACI,EAAE,EAAE,IAAIZ,SAAS,CAACK,IAAI,CAAC,CAAC;IACjF,IAAI,CAACE,UAAU,CAACE,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACF,oBAAoB,CAACK,EAAE,EAAE,IAAIZ,OAAO,CAACK,IAAI,CAACQ,QAAQ,EAAE,CAAC,CAAC;EAC9F;EACAC,MAAM,CAACC,cAAc,CAACb,eAAe,CAACc,SAAS,EAAE,SAAS,EAAE;IACxD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACX,UAAU;IAC1B,CAAC;IACDY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOjB,eAAe;AAC1B,CAAC,EAAG;AACJ,SAASA,eAAe"},"metadata":{},"sourceType":"module"}