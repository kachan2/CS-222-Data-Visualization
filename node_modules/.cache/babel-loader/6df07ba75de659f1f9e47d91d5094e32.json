{"ast":null,"code":"import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\nvar PdfGridCell = /** @class */function () {\n  function PdfGridCell(row) {\n    /**\n     * `Width` of the cell.\n     * @default 0\n     * @private\n     */\n    this.cellWidth = 0;\n    /**\n     * `Height` of the cell.\n     * @default 0\n     * @private\n     */\n    this.cellHeight = 0;\n    /**\n     * `tempval`to stores current width .\n     * @default 0\n     * @private\n     */\n    this.tempval = 0;\n    this.fontSpilt = false;\n    /**\n     * Specifies weather the `cell is drawn`.\n     * @default true\n     * @private\n     */\n    this.finsh = true;\n    /**\n     * The `remaining height` of row span.\n     * @default 0\n     * @private\n     */\n    this.rowSpanRemainingHeight = 0;\n    this.hasRowSpan = false;\n    this.hasColSpan = false;\n    /**\n     * the 'isFinish' is set to page finish\n     */\n    this.isFinish = true;\n    /**\n     * The `present' to store the current cell.\n     * @default false\n     * @private\n     */\n    this.present = false;\n    this.gridRowSpan = 1;\n    this.colSpan = 1;\n    if (typeof row !== 'undefined') {\n      this.gridRow = row;\n    }\n  }\n  Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n    //Properties\n    get: function () {\n      return this.internalIsCellMergeContinue;\n    },\n    set: function (value) {\n      this.internalIsCellMergeContinue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n    get: function () {\n      return this.internalIsRowMergeContinue;\n    },\n    set: function (value) {\n      this.internalIsRowMergeContinue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n    get: function () {\n      return this.internalIsCellMergeStart;\n    },\n    set: function (value) {\n      this.internalIsCellMergeStart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n    get: function () {\n      return this.internalIsRowMergeStart;\n    },\n    set: function (value) {\n      this.internalIsRowMergeStart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n    /**\n     * Gets or sets the `remaining string` after the row split between pages.\n     * @private\n     */\n    get: function () {\n      return this.remaining;\n    },\n    set: function (value) {\n      this.remaining = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n    /**\n     * Gets or sets the `FinishedDrawingCell` .\n     * @private\n     */\n    get: function () {\n      return this.isFinish;\n    },\n    set: function (value) {\n      this.isFinish = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n    /**\n     * Gets or sets the `string format`.\n     * @private\n     */\n    get: function () {\n      if (this.format == null) {\n        this.format = new PdfStringFormat();\n      }\n      return this.format;\n    },\n    set: function (value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"row\", {\n    /**\n     * Gets or sets the parent `row`.\n     * @private\n     */\n    get: function () {\n      return this.gridRow;\n    },\n    set: function (value) {\n      this.gridRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"value\", {\n    /**\n     * Gets or sets the `value` of the cell.\n     * @private\n     */\n    get: function () {\n      return this.objectValue;\n    },\n    set: function (value) {\n      this.objectValue = value;\n      if (this.objectValue instanceof PdfGrid) {\n        this.row.grid.isSingleGrid = false;\n        var grid = this.objectValue;\n        grid.ParentCell = this;\n        this.objectValue.isChildGrid = true;\n        var rowCount = this.row.grid.rows.count;\n        for (var i = 0; i < rowCount; i++) {\n          var row = this.row.grid.rows.getRow(i);\n          var colCount = row.cells.count;\n          for (var j = 0; j < colCount; j++) {\n            var cell = row.cells.getCell(j);\n            cell.parent = this;\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n    /**\n     * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get: function () {\n      return this.gridRowSpan;\n    },\n    set: function (value) {\n      if (value < 1) {\n        throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n      } else {\n        this.gridRowSpan = value;\n        this.row.rowSpanExists = true;\n        this.row.grid.hasRowSpanSpan = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"style\", {\n    /**\n     * Gets or sets the cell `style`.\n     * @private\n     */\n    get: function () {\n      if (this.cellStyle == null) {\n        this.cellStyle = new PdfGridCellStyle();\n      }\n      return this.cellStyle;\n    },\n    set: function (value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"height\", {\n    /**\n     * Gets the `height` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get: function () {\n      if (this.cellHeight === 0) {\n        this.cellHeight = this.measureHeight();\n      }\n      return this.cellHeight;\n    },\n    set: function (value) {\n      this.cellHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n    /**\n     * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get: function () {\n      return this.colSpan;\n    },\n    set: function (value) {\n      if (value < 1) {\n        throw Error('Invalid span specified, must be greater than or equal to 1');\n      } else {\n        this.colSpan = value;\n        this.row.columnSpanExists = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"width\", {\n    /**\n     * Gets the `width` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get: function () {\n      if (this.cellWidth === 0 || this.row.grid.isComplete) {\n        this.cellWidth = this.measureWidth();\n      }\n      return Math.round(this.cellWidth);\n    },\n    set: function (value) {\n      this.cellWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  /**\n   * `Calculates the width`.\n   * @private\n   */\n  PdfGridCell.prototype.measureWidth = function () {\n    // .. Calculate the cell text width.\n    // .....Add border widths, cell spacings and paddings to the width.\n    var width = 0;\n    var layouter = new PdfStringLayouter();\n    if (typeof this.objectValue === 'string') {\n      /* tslint:disable */\n      var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n      width += slr.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    } else if (this.objectValue instanceof PdfGrid) {\n      width = this.objectValue.size.width;\n      //width += this.objectValue.style.cellSpacing;\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      width += this.objectValue.width;\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      var webLink = this.objectValue;\n      var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n      /* tslint:enable */\n      width += result.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    }\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (this.style.cellPadding != null) {\n        width += this.style.cellPadding.left + this.style.cellPadding.right;\n      } else {\n        width += this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right;\n      }\n    } else {\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          width += this.style.cellPadding.left;\n        }\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          width += this.style.cellPadding.right;\n        }\n      } else {\n        if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n          width += this.row.grid.style.cellPadding.left;\n        }\n        if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n          width += this.row.grid.style.cellPadding.right;\n        }\n      }\n    }\n    width += this.row.grid.style.cellSpacing;\n    return width;\n  };\n  /**\n   * Draw the `cell background`.\n   * @private\n   */\n  PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n    var backgroundBrush = this.getBackgroundBrush();\n    //graphics.isTemplateGraphics = true;\n    if (backgroundBrush != null) {\n      graphics.save();\n      graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n      graphics.restore();\n    }\n    if (this.style.backgroundImage != null) {\n      var image = this.getBackgroundImage();\n      graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n  };\n  /**\n   * `Adjusts the text layout area`.\n   * @private\n   */\n  /* tslint:disable */\n  PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n    //Add Padding value to its Cell Bounds\n    var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n        returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n        returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n        returnBounds.width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n        returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top;\n        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n      } else {\n        returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n        returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n        returnBounds.width -= this.style.cellPadding.right + this.style.cellPadding.left;\n        returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;\n        returnBounds.height -= this.style.cellPadding.bottom + this.style.cellPadding.top;\n        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n        if (this.rowSpan === 1) {\n          returnBounds.width -= this.style.borders.left.width;\n        }\n      }\n    } else {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n          returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n          returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n        }\n        if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n          returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n          returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n        }\n        if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n          returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n        }\n        if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n          returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n        }\n      } else {\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n          returnBounds.width -= this.style.cellPadding.left;\n        }\n        if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n          returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n          returnBounds.height -= this.style.cellPadding.top;\n        }\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          returnBounds.width -= this.style.cellPadding.right;\n        }\n        if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n          returnBounds.height -= this.style.cellPadding.bottom;\n        }\n      }\n      returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;\n      returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n    }\n    return returnBounds;\n  };\n  /**\n   * `Draws` the specified graphics.\n   * @private\n   */\n  PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n    var isrowbreak = false;\n    /*if (!this.row.grid.isSingleGrid)\n    {\n        //Check whether the Grid Span to Nextpage\n        if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n        {\n            this.DrawParentCells(graphics, bounds, true);\n        }\n        else if (this.row.grid.rows.count > 1)\n        {\n            for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n            {\n                if (this.row == this.row.grid.rows.getRow(i))\n                {\n                    if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                        isrowbreak = true;\n                    if ((i > 0) && (isrowbreak))\n                        this.DrawParentCells(graphics, bounds, false);\n                }\n            }\n        }\n    } */\n    var result = null;\n    /*if (cancelSubsequentSpans)\n    {\n        //..Cancel all subsequent cell spans, if no space exists.\n        let currentCellIndex : number = this.row.cells.indexOf(this);\n        for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n        {\n            this.row.cells.getCell(i).isCellMergeContinue = false;\n            this.row.cells.getCell(i).isRowMergeContinue = false;\n        }\n        this.colSpan = 1;\n    }*/\n    //..Skip cells which were already covered by spanmap.\n    if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n      if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n        if (this.row.rowOverflowIndex > 0 && this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1 || this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue) {\n          return result;\n        }\n      } else {\n        return result;\n      }\n    }\n    //Adjust bounds with Row and Column Spacing\n    bounds = this.adjustOuterLayoutArea(bounds, graphics);\n    this.drawCellBackground(graphics, bounds);\n    var textPen = this.getTextPen();\n    var textBrush = this.getTextBrush();\n    if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n      textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n    }\n    var font = this.getTextFont();\n    var strFormat = this.getStringFormat();\n    var innerLayoutArea = bounds;\n    if (innerLayoutArea.height >= graphics.clientSize.height) {\n      // If to break row to next page.\n      if (this.row.grid.allowRowBreakAcrossPages) {\n        innerLayoutArea.height -= innerLayoutArea.y;\n        //bounds.height -= bounds.y;\n        // if(this.row.grid.isChildGrid)\n        // {\n        //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n        // }\n      }\n      // if user choose to cut the row whose height is more than page height.\n      // else\n      // {\n      //     innerLayoutArea.height = graphics.clientSize.height;\n      //     bounds.height = graphics.clientSize.height;\n      // }\n    }\n\n    innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n    if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n      var temp = void 0;\n      var layoutRectangle = void 0;\n      if (innerLayoutArea.height < font.height) layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);else layoutRectangle = innerLayoutArea;\n      if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n        var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n        if (this.row.grid.splitChildRowIndex != -1) {\n          this.fontSpilt = true;\n          this.row.rowFontSplit = true;\n        }\n        if (height > 0 && height < font.height) layoutRectangle.height = height;\n        // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n        //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n        // else if (bounds.height < font.height)\n        //     layoutRectangle.height = bounds.height;\n        // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n        //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n      }\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n      if (this.isFinish) {\n        // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n        //     this.remaining = '';\n        //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        // } else {\n        temp = this.remaining === '' ? this.remaining : this.objectValue;\n        graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n          this.remaining = '';\n          //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        }\n      } else {\n        if (typeof this.remaining == 'undefined' || this.remaining === null) {\n          this.remaining = '';\n        }\n        if (this.row.repeatFlag) {\n          graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        }\n        //  else {\n        //     if(this.row.grid.ParentCell.row.repeatFlag) {\n        //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n        //     } else {\n        //         layoutRectangle.height = this.row.height;\n        //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        //         bounds.height = this.row.height;\n        //     }\n        //  }\n        this.isFinish = true;\n        //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n      }\n\n      result = graphics.stringLayoutResult;\n      // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n      //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n      // }\n    } else if (this.objectValue instanceof PdfGrid) {\n      var childGrid = this.objectValue;\n      childGrid.isChildGrid = true;\n      childGrid.ParentCell = this;\n      var layoutRect = void 0;\n      layoutRect = innerLayoutArea;\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n      // layoutRect = bounds;\n      // if (this.style.cellPadding != null){\n      //     layoutRect = bounds;            \n      // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n      //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n      //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n      //     layoutRect = innerLayoutArea;\n      // }\n      // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n      //     layoutRect = bounds;\n      // }           \n      var layouter = new PdfGridLayouter(childGrid);\n      var format = new PdfGridLayoutFormat();\n      if (this.row.grid.LayoutFormat != null) format = this.row.grid.LayoutFormat;else format.layout = PdfLayoutType.Paginate;\n      var param = new PdfLayoutParams();\n      if (graphics.layer != null) {\n        // Define layout parameters.\n        param.page = graphics.page;\n        param.bounds = layoutRect;\n        param.format = format;\n        //Set the span \n        childGrid.setSpan();\n        childGrid.checkSpan();\n        // Draw the child grid.\n        var childGridResult = layouter.Layouter(param);\n        //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n        this.value = childGrid;\n        if (this.row.grid.splitChildRowIndex !== -1) {\n          this.height = this.row.rowBreakHeightValue;\n        }\n        if (param.page != childGridResult.page)\n          //&& (isWidthGreaterthanParent != true))\n          {\n            childGridResult.bounds.height = this.row.rowBreakHeightValue;\n            if (this.row.rowBreakHeight == 0) this.row.NestedGridLayoutResult = childGridResult;else this.row.rowBreakHeight = this.row.rowBreakHeightValue;\n            //bounds.height = this.row.rowBreakHeight;\n            //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n            //bounds.height = graphics.clientSize.height - bounds.y;\n          }\n      }\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      var imageBounds = void 0;\n      if (this.objectValue.width <= innerLayoutArea.width) {\n        imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n      } else {\n        imageBounds = innerLayoutArea;\n      }\n      graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n    } else if (typeof this.objectValue === 'undefined') {\n      this.objectValue = \"\";\n      graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n      if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n        bounds.width -= this.style.borders.left.width + this.style.borders.right.width;\n      }\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n    }\n    if (this.style.borders != null) {\n      if (!this.fontSpilt) this.drawCellBorders(graphics, bounds);else {\n        if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n          this.row.rowFontSplit = false;\n          this.drawCellBorders(graphics, bounds);\n        }\n      }\n    }\n    return result;\n  };\n  /* tslint:enable */\n  /**\n   * Draws the `cell border` constructed by drawing lines.\n   * @private\n   */\n  PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n    if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n      bounds.x += this.style.borders.left.width;\n      bounds.y += this.style.borders.top.width;\n      bounds.width -= this.style.borders.right.width;\n      bounds.height -= this.style.borders.bottom.width;\n    }\n    var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n    var p2 = new PointF(bounds.x, bounds.y);\n    var pen = this.cellStyle.borders.left;\n    if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n    // SetTransparency(ref graphics, pen);\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n    p1 = new PointF(bounds.x + bounds.width, bounds.y);\n    p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n    pen = this.cellStyle.borders.right;\n    if (bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2) {\n      p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y);\n      p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height);\n    }\n    if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n    p1 = new PointF(bounds.x, bounds.y);\n    p2 = new PointF(bounds.x + bounds.width, bounds.y);\n    pen = this.cellStyle.borders.top;\n    if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n    p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n    p2 = new PointF(bounds.x, bounds.y + bounds.height);\n    pen = this.cellStyle.borders.bottom;\n    if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {\n      p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);\n      p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);\n    }\n    if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n  };\n  // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n  //     let alpha : number = (pen.color.a / 255) as number;\n  //     graphics.save();\n  //     graphics.setTransparency(alpha);\n  // }\n  /**\n   * `Adjusts the outer layout area`.\n   * @private\n   */\n  /* tslint:disable */\n  PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n    var isHeader = false;\n    var cellSpacing = this.row.grid.style.cellSpacing;\n    if (cellSpacing > 0) {\n      bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n    }\n    var currentColIndex = this.row.cells.indexOf(this);\n    if (this.columnSpan > 1 || this.row.rowOverflowIndex > 0 && currentColIndex == this.row.rowOverflowIndex + 1 && this.isCellMergeContinue) {\n      var span = this.columnSpan;\n      if (span == 1 && this.isCellMergeContinue) {\n        for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n          if (this.row.cells.getCell(j).isCellMergeContinue) span++;else break;\n        }\n      }\n      var totalWidth = 0;\n      for (var i = currentColIndex; i < currentColIndex + span; i++) {\n        if (this.row.grid.style.allowHorizontalOverflow) {\n          var width = void 0;\n          var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n          if (this.row.grid.size.width > g.clientSize.width) {\n            width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n          } else {\n            width = totalWidth + this.row.grid.columns.getColumn(i).width;\n          }\n          if (width > compWidth) {\n            break;\n          }\n        }\n        totalWidth += this.row.grid.columns.getColumn(i).width;\n      }\n      totalWidth -= this.row.grid.style.cellSpacing;\n      bounds.width = totalWidth;\n    }\n    if (this.rowSpan > 1 || this.row.rowSpanExists) {\n      var span = this.rowSpan;\n      var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n      if (currentRowIndex == -1) {\n        currentRowIndex = this.row.grid.headers.indexOf(this.row);\n        if (currentRowIndex != -1) {\n          isHeader = true;\n        }\n      }\n      // if (span == 1 && this.isCellMergeContinue) {\n      //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n      //         {\n      //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n      //             if (flag)\n      //                 span++;\n      //             else\n      //                 break;\n      //         }\n      // }\n      var totalHeight = 0;\n      var max = 0;\n      for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n        totalHeight += isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height;\n        var row = this.row.grid.rows.getRow(i);\n        var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n        /*if (this.rowSpan > 1)\n            {\n                for (let k : number = 0; k < this.row.cells.count; k++) {\n                    let cell : PdfGridCell = this.row.cells.getCell(k);\n                    if(cell.rowSpan>1)\n                    {\n                        let tempHeight : number =0;\n                        \n                        for (let j :number = i; j < i +cell.rowSpan; j++)\n                        {\n                            if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                            tempHeight += this.row.grid.rows.getRow(j).height;\n                            if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                        }\n                        //To check the Row spanned cell height is greater than the total spanned row height.\n                        if(cell.height>tempHeight)\n                        {\n                            if (max < (cell.height - tempHeight))\n                            {\n                                max = cell.height - tempHeight;\n                                if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                {\n                                    max += this.rowSpanRemainingHeight;\n                                }\n                                let index :number = row.cells.indexOf(cell);\n                                //set the m_rowspanRemainingHeight to last rowspanned row.\n                                this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                            }\n                        }\n                    }\n                }\n            }\n            if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n            this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n      }\n\n      var cellIndex = this.row.cells.indexOf(this);\n      totalHeight -= this.row.grid.style.cellSpacing;\n      // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n      //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n      //      totalHeight = this.row.cells.getCell(cellIndex).height;\n      //      bounds.height = totalHeight;\n      // } else {\n      bounds.height = totalHeight;\n      //  }\n      if (!this.row.rowMergeComplete) {\n        bounds.height = totalHeight;\n      }\n    }\n    return bounds;\n  };\n  /* tslint:enable */\n  /**\n   * Gets the `text font`.\n   * @private\n   */\n  PdfGridCell.prototype.getTextFont = function () {\n    if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n      return this.style.font;\n    } else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n      return this.row.style.font;\n    } else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n      return this.row.grid.style.font;\n    } else {\n      return PdfDocument.defaultFont;\n    }\n  };\n  /**\n   * Gets the `text brush`.\n   * @private\n   */\n  PdfGridCell.prototype.getTextBrush = function () {\n    if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n      return this.style.textBrush;\n    } else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n      return this.row.style.textBrush;\n    } else {\n      return this.row.grid.style.textBrush;\n    }\n  };\n  /**\n   * Gets the `text pen`.\n   * @private\n   */\n  PdfGridCell.prototype.getTextPen = function () {\n    if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n      return this.style.textPen;\n    } else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n      return this.row.style.textPen;\n    } else {\n      return this.row.grid.style.textPen;\n    }\n  };\n  /**\n   * Gets the `background brush`.\n   * @private\n   */\n  PdfGridCell.prototype.getBackgroundBrush = function () {\n    if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n      return this.style.backgroundBrush;\n    } else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n      return this.row.style.backgroundBrush;\n    } else {\n      return this.row.grid.style.backgroundBrush;\n    }\n  };\n  /**\n   * Gets the `background image`.\n   * @private\n   */\n  PdfGridCell.prototype.getBackgroundImage = function () {\n    if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n      return this.style.backgroundImage;\n    } else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n      return this.row.style.backgroundImage;\n    } else {\n      return this.row.grid.style.backgroundImage;\n    }\n  };\n  /**\n   * Gets the current `StringFormat`.\n   * @private\n   */\n  PdfGridCell.prototype.getStringFormat = function () {\n    if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n      return this.style.stringFormat;\n    } else {\n      return this.stringFormat;\n    }\n  };\n  /**\n   * Calculates the `height`.\n   * @private\n   */\n  PdfGridCell.prototype.measureHeight = function () {\n    // .. Calculate the cell text height.\n    // .....Add border widths, cell spacings and paddings to the height.\n    var width = this.calculateWidth();\n    // //check whether the Current PdfGridCell has padding\n    if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n      width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n      //width -= (this.style.borders.left.width + this.style.borders.right.width);\n    } else {\n      width -= this.style.cellPadding.right + this.style.cellPadding.left;\n      width -= this.style.borders.left.width + this.style.borders.right.width;\n    }\n    var height = 0;\n    var layouter = new PdfStringLayouter();\n    if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n      var currentValue = this.objectValue;\n      /* tslint:disable */\n      if (!this.isFinish) currentValue = !(this.remaining === null || this.remaining === '' || typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n      var slr = null;\n      var cellIndex = this.row.cells.indexOf(this);\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        width -= this.gridRow.grid.style.cellSpacing * 2;\n      }\n      if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n        if (this.gridRow.grid.isChildGrid) {\n          if (width < 0) {\n            this.tempval = width;\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n              this.tempval += this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n            } else {\n              this.tempval += this.style.cellPadding.right + this.style.cellPadding.left;\n              this.tempval += this.style.borders.left.width + this.style.borders.right.width;\n            }\n          } else {\n            this.tempval = width;\n          }\n          slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n          height += slr.actualSize.height;\n        } else {\n          slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n          height += slr.actualSize.height;\n        }\n      }\n      /* tslint:enable */\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } else if (this.objectValue instanceof PdfGrid) {\n      var cellIndex = this.row.cells.indexOf(this);\n      var internalWidth = 0;\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        internalWidth = this.calculateWidth();\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          internalWidth -= this.style.cellPadding.left;\n        }\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          internalWidth -= this.style.cellPadding.right;\n        }\n      } else if (this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined') {\n        internalWidth = this.calculateWidth();\n        if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n          internalWidth -= this.row.grid.style.cellPadding.left;\n        }\n        if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n          internalWidth -= this.row.grid.style.cellPadding.right;\n        }\n      } else {\n        internalWidth = this.calculateWidth();\n      }\n      this.objectValue.tempWidth = internalWidth;\n      if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n        height = this.objectValue.size.height;\n      } else {\n        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n      }\n      if (this.gridRow.grid.style.cellSpacing !== 0) {\n        width -= this.gridRow.grid.style.cellSpacing * 2;\n        //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n      }\n\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n          height += this.row.grid.style.cellPadding.top;\n        }\n        if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n          height += this.row.grid.style.cellPadding.bottom;\n        }\n      }\n      height += this.objectValue.style.cellSpacing;\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      height += this.objectValue.height;\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      var webLink = this.objectValue;\n      /* tslint:disable */\n      var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n      /* tslint:enable */\n      height += slr.actualSize.height;\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } else if (typeof this.objectValue === 'undefined') {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n      } else {\n        width -= this.style.cellPadding.right + this.style.cellPadding.left;\n        width -= this.style.borders.left.width + this.style.borders.right.width;\n      }\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    }\n    //Add padding top and bottom value to height\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        height += this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom;\n      } else {\n        height += this.style.cellPadding.top + this.style.cellPadding.bottom;\n      }\n    } else {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n          height += this.row.grid.style.cellPadding.top;\n        }\n        if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n          height += this.row.grid.style.cellPadding.bottom;\n        }\n      } else {\n        if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n          height += this.style.cellPadding.top;\n        }\n        if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n          height += this.style.cellPadding.bottom;\n        }\n      }\n    }\n    height += this.row.grid.style.cellSpacing;\n    return height;\n  };\n  /**\n   * return the calculated `width` of the cell.\n   * @private\n   */\n  PdfGridCell.prototype.calculateWidth = function () {\n    var cellIndex = this.row.cells.indexOf(this);\n    var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n    var columnSpan = this.columnSpan;\n    var width = 0;\n    if (columnSpan === 1) {\n      for (var i = 0; i < columnSpan; i++) {\n        width += this.row.grid.columns.getColumn(cellIndex + i).width;\n      }\n    } else if (columnSpan > 1) {\n      for (var i = 0; i < columnSpan; i++) {\n        width += this.row.grid.columns.getColumn(cellIndex + i).width;\n        if (i + 1 < columnSpan) {\n          this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n        }\n      }\n    }\n    if (this.parent != null && this.parent.row.width > 0) {\n      if (this.row.grid.isChildGrid && this.parent != null && this.row.width > this.parent.row.width) {\n        width = 0;\n        for (var j = 0; j < this.parent.columnSpan; j++) {\n          width += this.parent.row.grid.columns.getColumn(j).width;\n        }\n        width = width / this.row.cells.count;\n      }\n    }\n    return width;\n  };\n  return PdfGridCell;\n}();\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\nvar PdfGridCellCollection = /** @class */function () {\n  //Constructor\n  /**\n   * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n   * @private\n   */\n  function PdfGridCellCollection(row) {\n    /**\n     * @hidden\n     * @private\n     */\n    this.cells = [];\n    this.gridRow = row;\n  }\n  //Properties\n  /**\n   * Gets the current `cell`.\n   * @private\n   */\n  PdfGridCellCollection.prototype.getCell = function (index) {\n    if (index < 0 || index >= this.count) {\n      throw new Error('IndexOutOfRangeException');\n    }\n    return this.cells[index];\n  };\n  Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n    /**\n     * Gets the cells `count`.[Read-Only].\n     * @private\n     */\n    get: function () {\n      return this.cells.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfGridCellCollection.prototype.add = function (cell) {\n    if (typeof cell === 'undefined') {\n      var tempcell = new PdfGridCell();\n      this.add(tempcell);\n      return cell;\n    } else {\n      cell.row = this.gridRow;\n      this.cells.push(cell);\n    }\n  };\n  /**\n   * Returns the `index of` a particular cell in the collection.\n   * @private\n   */\n  PdfGridCellCollection.prototype.indexOf = function (cell) {\n    return this.cells.indexOf(cell);\n  };\n  return PdfGridCellCollection;\n}();\nexport { PdfGridCellCollection };","map":{"version":3,"names":["PdfGrid","PdfGridCellStyle","PdfStringLayouter","PdfDocument","PdfStringFormat","RectangleF","PointF","SizeF","PdfDashStyle","PdfLineCap","PdfBorderOverlapStyle","PdfSolidBrush","PdfColor","PdfImage","PdfBitmap","PdfTextWebLink","PdfLayoutType","PdfGridLayouter","PdfGridLayoutFormat","PdfLayoutParams","PdfGridCell","row","cellWidth","cellHeight","tempval","fontSpilt","finsh","rowSpanRemainingHeight","hasRowSpan","hasColSpan","isFinish","present","gridRowSpan","colSpan","gridRow","Object","defineProperty","prototype","get","internalIsCellMergeContinue","set","value","enumerable","configurable","internalIsRowMergeContinue","internalIsCellMergeStart","internalIsRowMergeStart","remaining","format","objectValue","grid","isSingleGrid","ParentCell","isChildGrid","rowCount","rows","count","i","getRow","colCount","cells","j","cell","getCell","parent","Error","rowSpanExists","hasRowSpanSpan","cellStyle","measureHeight","columnSpanExists","isComplete","measureWidth","Math","round","width","layouter","slr","layout","getTextFont","stringFormat","Number","MAX_VALUE","actualSize","style","borders","left","right","size","webLink","result","text","font","cellPadding","hasLeftPad","hasRightPad","cellSpacing","drawCellBackground","graphics","bounds","backgroundBrush","getBackgroundBrush","save","drawRectangle","x","y","height","restore","backgroundImage","image","getBackgroundImage","drawImage","adjustContentLayoutArea","returnBounds","top","bottom","rowSpan","hasTopPad","hasBottomPad","draw","cancelSubsequentSpans","isrowbreak","allowHorizontalOverflow","rowOverflowIndex","indexOf","adjustOuterLayoutArea","textPen","getTextPen","textBrush","getTextBrush","strFormat","getStringFormat","innerLayoutArea","clientSize","allowRowBreakAcrossPages","temp","layoutRectangle","splitChildRowIndex","rowFontSplit","drawString","repeatFlag","stringLayoutResult","childGrid","layoutRect","LayoutFormat","Paginate","param","layer","page","setSpan","checkSpan","childGridResult","Layouter","rowBreakHeightValue","rowBreakHeight","NestedGridLayoutResult","imageBounds","currentPage","drawCellBorders","borderOverlapStyle","Inside","p1","p2","pen","dashStyle","Solid","lineCap","Square","drawLine","g","isHeader","currentColIndex","columnSpan","isCellMergeContinue","span","columns","totalWidth","compWidth","getColumn","currentRowIndex","rowCollection","headers","totalHeight","max","getHeader","rowIndex","cellIndex","rowMergeComplete","defaultFont","calculateWidth","currentValue","internalWidth","tempWidth","rowindex","PdfGridCellCollection","index","length","add","tempcell","push"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-cell.js"],"sourcesContent":["import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\nvar PdfGridCell = /** @class */ (function () {\n    function PdfGridCell(row) {\n        /**\n         * `Width` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellWidth = 0;\n        /**\n         * `Height` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellHeight = 0;\n        /**\n         * `tempval`to stores current width .\n         * @default 0\n         * @private\n         */\n        this.tempval = 0;\n        this.fontSpilt = false;\n        /**\n         * Specifies weather the `cell is drawn`.\n         * @default true\n         * @private\n         */\n        this.finsh = true;\n        /**\n         * The `remaining height` of row span.\n         * @default 0\n         * @private\n         */\n        this.rowSpanRemainingHeight = 0;\n        this.hasRowSpan = false;\n        this.hasColSpan = false;\n        /**\n         * the 'isFinish' is set to page finish\n         */\n        this.isFinish = true;\n        /**\n         * The `present' to store the current cell.\n         * @default false\n         * @private\n         */\n        this.present = false;\n        this.gridRowSpan = 1;\n        this.colSpan = 1;\n        if (typeof row !== 'undefined') {\n            this.gridRow = row;\n        }\n    }\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n        //Properties\n        get: function () {\n            return this.internalIsCellMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsCellMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n        get: function () {\n            return this.internalIsRowMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsRowMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n        get: function () {\n            return this.internalIsCellMergeStart;\n        },\n        set: function (value) {\n            this.internalIsCellMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n        get: function () {\n            return this.internalIsRowMergeStart;\n        },\n        set: function (value) {\n            this.internalIsRowMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n        /**\n         * Gets or sets the `remaining string` after the row split between pages.\n         * @private\n         */\n        get: function () {\n            return this.remaining;\n        },\n        set: function (value) {\n            this.remaining = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n        /**\n         * Gets or sets the `FinishedDrawingCell` .\n         * @private\n         */\n        get: function () {\n            return this.isFinish;\n        },\n        set: function (value) {\n            this.isFinish = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n        /**\n         * Gets or sets the `string format`.\n         * @private\n         */\n        get: function () {\n            if (this.format == null) {\n                this.format = new PdfStringFormat();\n            }\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"row\", {\n        /**\n         * Gets or sets the parent `row`.\n         * @private\n         */\n        get: function () {\n            return this.gridRow;\n        },\n        set: function (value) {\n            this.gridRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the cell.\n         * @private\n         */\n        get: function () {\n            return this.objectValue;\n        },\n        set: function (value) {\n            this.objectValue = value;\n            if (this.objectValue instanceof PdfGrid) {\n                this.row.grid.isSingleGrid = false;\n                var grid = this.objectValue;\n                grid.ParentCell = this;\n                this.objectValue.isChildGrid = true;\n                var rowCount = this.row.grid.rows.count;\n                for (var i = 0; i < rowCount; i++) {\n                    var row = this.row.grid.rows.getRow(i);\n                    var colCount = row.cells.count;\n                    for (var j = 0; j < colCount; j++) {\n                        var cell = row.cells.getCell(j);\n                        cell.parent = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.gridRowSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.gridRowSpan = value;\n                this.row.rowSpanExists = true;\n                this.row.grid.hasRowSpanSpan = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"style\", {\n        /**\n         * Gets or sets the cell `style`.\n         * @private\n         */\n        get: function () {\n            if (this.cellStyle == null) {\n                this.cellStyle = new PdfGridCellStyle();\n            }\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"height\", {\n        /**\n         * Gets the `height` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellHeight === 0) {\n                this.cellHeight = this.measureHeight();\n            }\n            return this.cellHeight;\n        },\n        set: function (value) {\n            this.cellHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.colSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw Error('Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.colSpan = value;\n                this.row.columnSpanExists = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"width\", {\n        /**\n         * Gets the `width` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellWidth === 0 || this.row.grid.isComplete) {\n                this.cellWidth = this.measureWidth();\n            }\n            return Math.round(this.cellWidth);\n        },\n        set: function (value) {\n            this.cellWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Calculates the width`.\n     * @private\n     */\n    PdfGridCell.prototype.measureWidth = function () {\n        // .. Calculate the cell text width.\n        // .....Add border widths, cell spacings and paddings to the width.\n        var width = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string') {\n            /* tslint:disable */\n            var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            width = this.objectValue.size.width;\n            //width += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            width += this.objectValue.width;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            width += result.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding != null) {\n                width += (this.style.cellPadding.left + this.style.cellPadding.right);\n            }\n            else {\n                width += (this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right);\n            }\n        }\n        else {\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    width += this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    width += this.style.cellPadding.right;\n                }\n            }\n            else {\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    width += this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    width += this.row.grid.style.cellPadding.right;\n                }\n            }\n        }\n        width += this.row.grid.style.cellSpacing;\n        return width;\n    };\n    /**\n     * Draw the `cell background`.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n        var backgroundBrush = this.getBackgroundBrush();\n        //graphics.isTemplateGraphics = true;\n        if (backgroundBrush != null) {\n            graphics.save();\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n        }\n        if (this.style.backgroundImage != null) {\n            var image = this.getBackgroundImage();\n            graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n        }\n    };\n    /**\n     * `Adjusts the text layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n        //Add Padding value to its Cell Bounds\n        var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n                returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                returnBounds.height -= (this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n            }\n            else {\n                returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n                returnBounds.height -= (this.style.cellPadding.bottom + this.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n                if (this.rowSpan === 1) {\n                    returnBounds.width -= (this.style.borders.left.width);\n                }\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.style.cellPadding.right;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.style.cellPadding.bottom;\n                }\n            }\n            returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n            returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n        }\n        return returnBounds;\n    };\n    /**\n     * `Draws` the specified graphics.\n     * @private\n     */\n    PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n        var isrowbreak = false;\n        /*if (!this.row.grid.isSingleGrid)\n        {\n            //Check whether the Grid Span to Nextpage\n            if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n            {\n                this.DrawParentCells(graphics, bounds, true);\n            }\n            else if (this.row.grid.rows.count > 1)\n            {\n                for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n                {\n                    if (this.row == this.row.grid.rows.getRow(i))\n                    {\n                        if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                            isrowbreak = true;\n                        if ((i > 0) && (isrowbreak))\n                            this.DrawParentCells(graphics, bounds, false);\n                    }\n                }\n            }\n        } */\n        var result = null;\n        /*if (cancelSubsequentSpans)\n        {\n            //..Cancel all subsequent cell spans, if no space exists.\n            let currentCellIndex : number = this.row.cells.indexOf(this);\n            for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n            {\n                this.row.cells.getCell(i).isCellMergeContinue = false;\n                this.row.cells.getCell(i).isRowMergeContinue = false;\n            }\n            this.colSpan = 1;\n        }*/\n        //..Skip cells which were already covered by spanmap.\n        if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n            if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n                if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1)) || (this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue)) {\n                    return result;\n                }\n            }\n            else {\n                return result;\n            }\n        }\n        //Adjust bounds with Row and Column Spacing\n        bounds = this.adjustOuterLayoutArea(bounds, graphics);\n        this.drawCellBackground(graphics, bounds);\n        var textPen = this.getTextPen();\n        var textBrush = this.getTextBrush();\n        if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n            textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        var font = this.getTextFont();\n        var strFormat = this.getStringFormat();\n        var innerLayoutArea = bounds;\n        if (innerLayoutArea.height >= graphics.clientSize.height) {\n            // If to break row to next page.\n            if (this.row.grid.allowRowBreakAcrossPages) {\n                innerLayoutArea.height -= innerLayoutArea.y;\n                //bounds.height -= bounds.y;\n                // if(this.row.grid.isChildGrid)\n                // {\n                //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n                // }\n            }\n            // if user choose to cut the row whose height is more than page height.\n            // else\n            // {\n            //     innerLayoutArea.height = graphics.clientSize.height;\n            //     bounds.height = graphics.clientSize.height;\n            // }\n        }\n        innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var temp = void 0;\n            var layoutRectangle = void 0;\n            if (innerLayoutArea.height < font.height)\n                layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);\n            else\n                layoutRectangle = innerLayoutArea;\n            if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n                var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n                if (this.row.grid.splitChildRowIndex != -1) {\n                    this.fontSpilt = true;\n                    this.row.rowFontSplit = true;\n                }\n                if (height > 0 && height < font.height)\n                    layoutRectangle.height = height;\n                // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n                // else if (bounds.height < font.height)\n                //     layoutRectangle.height = bounds.height;\n                // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            if (this.isFinish) {\n                // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n                //     this.remaining = '';\n                //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                // } else {\n                temp = this.remaining === '' ? this.remaining : this.objectValue;\n                graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n                    this.remaining = '';\n                    //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n            }\n            else {\n                if (typeof this.remaining == 'undefined' || this.remaining === null) {\n                    this.remaining = '';\n                }\n                if (this.row.repeatFlag) {\n                    graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n                //  else {\n                //     if(this.row.grid.ParentCell.row.repeatFlag) {\n                //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n                //     } else {\n                //         layoutRectangle.height = this.row.height;\n                //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                //         bounds.height = this.row.height;\n                //     }\n                //  }\n                this.isFinish = true;\n                //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n            }\n            result = graphics.stringLayoutResult;\n            // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n            //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n            // }\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var childGrid = this.objectValue;\n            childGrid.isChildGrid = true;\n            childGrid.ParentCell = this;\n            var layoutRect = void 0;\n            layoutRect = innerLayoutArea;\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            // layoutRect = bounds;\n            // if (this.style.cellPadding != null){\n            //     layoutRect = bounds;            \n            // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n            //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n            //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n            //     layoutRect = innerLayoutArea;\n            // }\n            // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n            //     layoutRect = bounds;\n            // }           \n            var layouter = new PdfGridLayouter(childGrid);\n            var format = new PdfGridLayoutFormat();\n            if (this.row.grid.LayoutFormat != null)\n                format = this.row.grid.LayoutFormat;\n            else\n                format.layout = PdfLayoutType.Paginate;\n            var param = new PdfLayoutParams();\n            if (graphics.layer != null) {\n                // Define layout parameters.\n                param.page = graphics.page;\n                param.bounds = layoutRect;\n                param.format = format;\n                //Set the span \n                childGrid.setSpan();\n                childGrid.checkSpan();\n                // Draw the child grid.\n                var childGridResult = layouter.Layouter(param);\n                //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n                this.value = childGrid;\n                if (this.row.grid.splitChildRowIndex !== -1) {\n                    this.height = this.row.rowBreakHeightValue;\n                }\n                if (param.page != childGridResult.page) //&& (isWidthGreaterthanParent != true))\n                 {\n                    childGridResult.bounds.height = this.row.rowBreakHeightValue;\n                    if (this.row.rowBreakHeight == 0)\n                        this.row.NestedGridLayoutResult = childGridResult;\n                    else\n                        this.row.rowBreakHeight = this.row.rowBreakHeightValue;\n                    //bounds.height = this.row.rowBreakHeight;\n                    //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n                    //bounds.height = graphics.clientSize.height - bounds.y;\n                }\n            }\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            var imageBounds = void 0;\n            if (this.objectValue.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            this.objectValue = \"\";\n            graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n            if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n                bounds.width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n        }\n        if (this.style.borders != null) {\n            if (!this.fontSpilt)\n                this.drawCellBorders(graphics, bounds);\n            else {\n                if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n                    this.row.rowFontSplit = false;\n                    this.drawCellBorders(graphics, bounds);\n                }\n            }\n        }\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Draws the `cell border` constructed by drawing lines.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n        if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n        var p2 = new PointF(bounds.x, bounds.y);\n        var pen = this.cellStyle.borders.left;\n        if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        // SetTransparency(ref graphics, pen);\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x + bounds.width, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.right;\n        if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n            p1 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n            p2 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n        }\n        if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y);\n        pen = this.cellStyle.borders.top;\n        if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        p2 = new PointF(bounds.x, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.bottom;\n        if ((bounds.y + bounds.height) > (graphics.clientSize.height - (pen.width / 2))) {\n            p1 = new PointF((bounds.x + bounds.width), (graphics.clientSize.height - (pen.width / 2)));\n            p2 = new PointF(bounds.x, (graphics.clientSize.height - (pen.width / 2)));\n        }\n        if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n    };\n    // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n    //     let alpha : number = (pen.color.a / 255) as number;\n    //     graphics.save();\n    //     graphics.setTransparency(alpha);\n    // }\n    /**\n     * `Adjusts the outer layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n        var isHeader = false;\n        var cellSpacing = this.row.grid.style.cellSpacing;\n        if (cellSpacing > 0) {\n            bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n        }\n        var currentColIndex = this.row.cells.indexOf(this);\n        if (this.columnSpan > 1 || (this.row.rowOverflowIndex > 0 && (currentColIndex == this.row.rowOverflowIndex + 1) && this.isCellMergeContinue)) {\n            var span = this.columnSpan;\n            if (span == 1 && this.isCellMergeContinue) {\n                for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n                    if (this.row.cells.getCell(j).isCellMergeContinue)\n                        span++;\n                    else\n                        break;\n                }\n            }\n            var totalWidth = 0;\n            for (var i = currentColIndex; i < currentColIndex + span; i++) {\n                if (this.row.grid.style.allowHorizontalOverflow) {\n                    var width = void 0;\n                    var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n                    if (this.row.grid.size.width > g.clientSize.width) {\n                        width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    else {\n                        width = totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    if (width > compWidth) {\n                        break;\n                    }\n                }\n                totalWidth += this.row.grid.columns.getColumn(i).width;\n            }\n            totalWidth -= this.row.grid.style.cellSpacing;\n            bounds.width = totalWidth;\n        }\n        if (this.rowSpan > 1 || this.row.rowSpanExists) {\n            var span = this.rowSpan;\n            var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n            if (currentRowIndex == -1) {\n                currentRowIndex = this.row.grid.headers.indexOf(this.row);\n                if (currentRowIndex != -1) {\n                    isHeader = true;\n                }\n            }\n            // if (span == 1 && this.isCellMergeContinue) {\n            //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n            //         {\n            //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n            //             if (flag)\n            //                 span++;\n            //             else\n            //                 break;\n            //         }\n            // }\n            var totalHeight = 0;\n            var max = 0;\n            for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n                totalHeight += (isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height);\n                var row = this.row.grid.rows.getRow(i);\n                var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n                /*if (this.rowSpan > 1)\n                    {\n                        for (let k : number = 0; k < this.row.cells.count; k++) {\n                            let cell : PdfGridCell = this.row.cells.getCell(k);\n                            if(cell.rowSpan>1)\n                            {\n                                let tempHeight : number =0;\n                                \n                                for (let j :number = i; j < i +cell.rowSpan; j++)\n                                {\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                                    tempHeight += this.row.grid.rows.getRow(j).height;\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                                }\n                                //To check the Row spanned cell height is greater than the total spanned row height.\n                                if(cell.height>tempHeight)\n                                {\n                                    if (max < (cell.height - tempHeight))\n                                    {\n                                        max = cell.height - tempHeight;\n                                        if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                        {\n                                            max += this.rowSpanRemainingHeight;\n                                        }\n                                        let index :number = row.cells.indexOf(cell);\n                                        //set the m_rowspanRemainingHeight to last rowspanned row.\n                                        this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                        this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n                    this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n            }\n            var cellIndex = this.row.cells.indexOf(this);\n            totalHeight -= this.row.grid.style.cellSpacing;\n            // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n            //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n            //      totalHeight = this.row.cells.getCell(cellIndex).height;\n            //      bounds.height = totalHeight;\n            // } else {\n            bounds.height = totalHeight;\n            //  }\n            if (!this.row.rowMergeComplete) {\n                bounds.height = totalHeight;\n            }\n        }\n        return bounds;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `text font`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextFont = function () {\n        if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n            return this.style.font;\n        }\n        else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n            return this.row.style.font;\n        }\n        else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n            return this.row.grid.style.font;\n        }\n        else {\n            return PdfDocument.defaultFont;\n        }\n    };\n    /**\n     * Gets the `text brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextBrush = function () {\n        if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n            return this.style.textBrush;\n        }\n        else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n            return this.row.style.textBrush;\n        }\n        else {\n            return this.row.grid.style.textBrush;\n        }\n    };\n    /**\n     * Gets the `text pen`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextPen = function () {\n        if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n            return this.style.textPen;\n        }\n        else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n            return this.row.style.textPen;\n        }\n        else {\n            return this.row.grid.style.textPen;\n        }\n    };\n    /**\n     * Gets the `background brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundBrush = function () {\n        if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n            return this.style.backgroundBrush;\n        }\n        else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n            return this.row.style.backgroundBrush;\n        }\n        else {\n            return this.row.grid.style.backgroundBrush;\n        }\n    };\n    /**\n     * Gets the `background image`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundImage = function () {\n        if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n            return this.style.backgroundImage;\n        }\n        else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n            return this.row.style.backgroundImage;\n        }\n        else {\n            return this.row.grid.style.backgroundImage;\n        }\n    };\n    /**\n     * Gets the current `StringFormat`.\n     * @private\n     */\n    PdfGridCell.prototype.getStringFormat = function () {\n        if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n            return this.style.stringFormat;\n        }\n        else {\n            return this.stringFormat;\n        }\n    };\n    /**\n     * Calculates the `height`.\n     * @private\n     */\n    PdfGridCell.prototype.measureHeight = function () {\n        // .. Calculate the cell text height.\n        // .....Add border widths, cell spacings and paddings to the height.\n        var width = this.calculateWidth();\n        // //check whether the Current PdfGridCell has padding\n        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n            width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            //width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        else {\n            width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n            width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        var height = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var currentValue = this.objectValue;\n            /* tslint:disable */\n            if (!this.isFinish)\n                currentValue = !(this.remaining === null || this.remaining === '' ||\n                    typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n            var slr = null;\n            var cellIndex = this.row.cells.indexOf(this);\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n            }\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                if (this.gridRow.grid.isChildGrid) {\n                    if (width < 0) {\n                        this.tempval = width;\n                        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                            this.tempval += (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                        }\n                        else {\n                            this.tempval += (this.style.cellPadding.right + this.style.cellPadding.left);\n                            this.tempval += (this.style.borders.left.width + this.style.borders.right.width);\n                        }\n                    }\n                    else {\n                        this.tempval = width;\n                    }\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n                else {\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n            }\n            /* tslint:enable */\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var cellIndex = this.row.cells.indexOf(this);\n            var internalWidth = 0;\n            if ((this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.style.cellPadding.right;\n                }\n            }\n            else if ((this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.right;\n                }\n            }\n            else {\n                internalWidth = this.calculateWidth();\n            }\n            this.objectValue.tempWidth = internalWidth;\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                height = this.objectValue.size.height;\n            }\n            else {\n                height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n            }\n            if (this.gridRow.grid.style.cellSpacing !== 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n                //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            height += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            height += this.objectValue.height;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            /* tslint:disable */\n            var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            height += slr.actualSize.height;\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            }\n            else {\n                width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        //Add padding top and bottom value to height\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            else {\n                height += (this.style.cellPadding.top + this.style.cellPadding.bottom);\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    height += this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    height += this.style.cellPadding.bottom;\n                }\n            }\n        }\n        height += this.row.grid.style.cellSpacing;\n        return height;\n    };\n    /**\n     * return the calculated `width` of the cell.\n     * @private\n     */\n    PdfGridCell.prototype.calculateWidth = function () {\n        var cellIndex = this.row.cells.indexOf(this);\n        var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n        var columnSpan = this.columnSpan;\n        var width = 0;\n        if (columnSpan === 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n            }\n        }\n        else if (columnSpan > 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n                if ((i + 1) < columnSpan) {\n                    this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n                }\n            }\n        }\n        if (this.parent != null && this.parent.row.width > 0) {\n            if ((this.row.grid.isChildGrid) && this.parent != null && (this.row.width > this.parent.row.width)) {\n                width = 0;\n                for (var j = 0; j < this.parent.columnSpan; j++) {\n                    width += this.parent.row.grid.columns.getColumn(j).width;\n                }\n                width = width / this.row.cells.count;\n            }\n        }\n        return width;\n    };\n    return PdfGridCell;\n}());\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\nvar PdfGridCellCollection = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     * @private\n     */\n    function PdfGridCellCollection(row) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.cells = [];\n        this.gridRow = row;\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     * @private\n     */\n    PdfGridCellCollection.prototype.getCell = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    };\n    Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n        /**\n         * Gets the cells `count`.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.cells.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridCellCollection.prototype.add = function (cell) {\n        if (typeof cell === 'undefined') {\n            var tempcell = new PdfGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.gridRow;\n            this.cells.push(cell);\n        }\n    };\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     * @private\n     */\n    PdfGridCellCollection.prototype.indexOf = function (cell) {\n        return this.cells.indexOf(cell);\n    };\n    return PdfGridCellCollection;\n}());\nexport { PdfGridCellCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}