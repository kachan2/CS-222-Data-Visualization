{"ast":null,"code":"/**\n * TrueTypeFont.ts class for EJ2-PDF\n */\nimport { ByteArray } from './../../graphics/images/index';\nimport { TtfReader } from './ttf-reader';\nimport { PdfDictionary, SaveDescendantFontEventHandler, SaveFontDictionaryEventHandler } from './../../primitives/pdf-dictionary';\nimport { SaveFontProgramEventHandler, SaveCmapEventHandler } from './../../primitives/pdf-stream';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfString } from './../../primitives/pdf-string';\nimport { PdfReferenceHolder } from './../../primitives/pdf-reference';\nimport { PdfFontMetrics } from './pdf-font-metrics';\nimport { StandardWidthTable } from './pdf-font-metrics';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { Dictionary } from './../../collections/dictionary';\nimport { FontDescriptorFlags } from './enum';\nimport { RectangleF } from './../../drawing/pdf-drawing';\nimport { Operators } from './../../input-output/pdf-operators';\nvar UnicodeTrueTypeFont = /** @class */function () {\n  /* tslint:enable */\n  //Constructors\n  /**\n   * Initializes a new instance of the `PdfTrueTypeFont` class.\n   * @private\n   */\n  function UnicodeTrueTypeFont(base64String, size) {\n    // Fields\n    this.nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    /**\n     * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n     * @private\n     */\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Indicates whether the font program is compressed or not.\n     * @private\n     */\n    this.isCompress = false;\n    /**\n     * Indicates whether the font is embedded or not.\n     */\n    this.isEmbedFont = false;\n    /**\n     * Cmap table's start prefix.\n     */\n    /* tslint:disable */\n    this.cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + Operators.newLine + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange' + Operators.newLine;\n    /* tslint:enable */\n    /**\n     * Cmap table's start suffix.\n     */\n    this.cmapEndCodespaceRange = 'endcodespacerange' + Operators.newLine;\n    /**\n     * Cmap's begin range marker.\n     */\n    this.cmapBeginRange = 'beginbfrange' + Operators.newLine;\n    /**\n     * Cmap's end range marker.\n     */\n    this.cmapEndRange = 'endbfrange' + Operators.newLine;\n    /**\n     * Cmap table's end\n     */\n    /* tslint:disable */\n    this.cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + Operators.newLine;\n    if (base64String === null || base64String === undefined) {\n      throw new Error('ArgumentNullException:base64String');\n    }\n    this.fontSize = size;\n    this.fontString = base64String;\n    this.Initialize();\n  }\n  //Implementation\n  /**\n   * Returns width of the char symbol.\n   */\n  UnicodeTrueTypeFont.prototype.getCharWidth = function (charCode) {\n    var codeWidth = this.ttfReader.getCharWidth(charCode);\n    return codeWidth;\n  };\n  /**\n   * Returns width of the text line.\n   */\n  UnicodeTrueTypeFont.prototype.getLineWidth = function (line) {\n    // if (line == null) {\n    //     throw new Error('ArgumentNullException : line');\n    // }\n    var width = 0;\n    for (var i = 0, len = line.length; i < len; i++) {\n      var ch = line[i];\n      var charWidth = this.getCharWidth(ch);\n      width += charWidth;\n    }\n    return width;\n  };\n  /**\n   * Initializes a new instance of the `PdfTrueTypeFont` class.\n   * @private\n   */\n  UnicodeTrueTypeFont.prototype.Initialize = function () {\n    var byteArray = new ByteArray(this.fontString.length);\n    byteArray.writeFromBase64String(this.fontString);\n    this.fontData = byteArray.internalBuffer;\n    this.ttfReader = new TtfReader(this.fontData);\n    this.ttfMetrics = this.ttfReader.metrics;\n  };\n  UnicodeTrueTypeFont.prototype.createInternals = function () {\n    this.fontDictionary = new PdfDictionary();\n    this.fontProgram = new PdfStream();\n    this.cmap = new PdfStream();\n    this.descendantFont = new PdfDictionary();\n    this.metrics = new PdfFontMetrics();\n    this.ttfReader.createInternals();\n    this.ttfMetrics = this.ttfReader.metrics;\n    this.initializeMetrics();\n    // Create all the dictionaries of the font.\n    this.subsetName = this.getFontName();\n    this.createDescendantFont();\n    this.createCmap();\n    this.createFontDictionary();\n    this.createFontProgram();\n  };\n  UnicodeTrueTypeFont.prototype.getInternals = function () {\n    return this.fontDictionary;\n  };\n  /**\n   * Initializes metrics.\n   */\n  UnicodeTrueTypeFont.prototype.initializeMetrics = function () {\n    var ttfMetrics = this.ttfReader.metrics;\n    this.metrics.ascent = ttfMetrics.macAscent;\n    this.metrics.descent = ttfMetrics.macDescent;\n    this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;\n    this.metrics.name = ttfMetrics.fontFamily;\n    this.metrics.postScriptName = ttfMetrics.postScriptName;\n    this.metrics.size = this.fontSize;\n    this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);\n    this.metrics.lineGap = ttfMetrics.lineGap;\n    this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;\n    this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;\n    this.metrics.isBold = ttfMetrics.isBold;\n  };\n  /**\n   * Gets random string.\n   */\n  UnicodeTrueTypeFont.prototype.getFontName = function () {\n    var builder = '';\n    var name;\n    // if (this.isEmbed === false) {\n    for (var i = 0; i < 6; i++) {\n      var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n      builder += this.nameString[index];\n    }\n    builder += '+';\n    // }\n    builder += this.ttfReader.metrics.postScriptName;\n    name = builder.toString();\n    // if (name === '') {\n    //     name = this.ttfReader.metrics.fontFamily;\n    // }\n    name = this.formatName(name);\n    return name;\n  };\n  /**\n   * Generates name of the font.\n   */\n  UnicodeTrueTypeFont.prototype.formatName = function (fontName) {\n    // if (fontName === null) {\n    //     throw new Error('ArgumentNullException : fontName');\n    // }\n    // if (fontName === '') {\n    //     throw new Error('ArgumentOutOfRangeException : fontName, Parameter can not be empty');\n    // }\n    var ret = fontName.replace('(', '#28');\n    ret = ret.replace(')', '#29');\n    ret = ret.replace('[', '#5B');\n    ret = ret.replace(']', '#5D');\n    ret = ret.replace('<', '#3C');\n    ret = ret.replace('>', '#3E');\n    ret = ret.replace('{', '#7B');\n    ret = ret.replace('}', '#7D');\n    ret = ret.replace('/', '#2F');\n    ret = ret.replace('%', '#25');\n    return ret.replace(' ', '#20');\n  };\n  /**\n   * Creates descendant font.\n   */\n  UnicodeTrueTypeFont.prototype.createDescendantFont = function () {\n    // Set property used to clone Font every time\n    this.descendantFont.isFont = true;\n    this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);\n    this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));\n    this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n    this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));\n    this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1000));\n    this.fontDescriptor = this.createFontDescriptor();\n    this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));\n    var systemInfo = this.createSystemInfo();\n    this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);\n  };\n  /**\n   * Creates font descriptor.\n   */\n  UnicodeTrueTypeFont.prototype.createFontDescriptor = function () {\n    var descriptor = new PdfDictionary();\n    var metrics = this.ttfReader.metrics;\n    // Set property used to clone Font every time\n    descriptor.isFont = true;\n    descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));\n    descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));\n    descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));\n    descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));\n    descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));\n    descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));\n    descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));\n    descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));\n    descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));\n    descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));\n    descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));\n    descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));\n    descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));\n    descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));\n    descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));\n    descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));\n    return descriptor;\n  };\n  /**\n   * Generates cmap.\n   * @private\n   */\n  UnicodeTrueTypeFont.prototype.createCmap = function () {\n    this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);\n  };\n  /**\n   * Generates font dictionary.\n   */\n  UnicodeTrueTypeFont.prototype.createFontDictionary = function () {\n    // Set property used to clone Font every time\n    this.fontDictionary.isFont = true;\n    this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);\n    this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n    this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));\n    this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));\n    var descFonts = new PdfArray();\n    var reference = new PdfReferenceHolder(this.descendantFont);\n    // Set property used to clone Font every time\n    descFonts.isFont = true;\n    descFonts.add(reference);\n    this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);\n  };\n  /**\n   * Creates font program.\n   */\n  UnicodeTrueTypeFont.prototype.createFontProgram = function () {\n    this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);\n  };\n  /**\n   * Creates system info dictionary for CID font.\n   * @private\n   */\n  UnicodeTrueTypeFont.prototype.createSystemInfo = function () {\n    var systemInfo = new PdfDictionary();\n    systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString('Adobe'));\n    systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));\n    systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));\n    return systemInfo;\n  };\n  /**\n   * Runs before font Dictionary will be saved.\n   */\n  UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function () {\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n      var width = this.getDescendantWidth();\n      if (width !== null) {\n        this.descendantFont.items.setValue(this.dictionaryProperties.w, width);\n      }\n    }\n  };\n  /**\n   * Runs before font Dictionary will be saved.\n   */\n  UnicodeTrueTypeFont.prototype.cmapBeginSave = function () {\n    this.generateCmap();\n  };\n  /**\n   * Runs before font Dictionary will be saved.\n   */\n  /* tslint:disable */\n  UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function () {\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {\n      this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));\n    }\n  };\n  /* tslint:enable */\n  /**\n   * Runs before font program stream save.\n   */\n  UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function () {\n    this.isCompress = true;\n    this.generateFontProgram();\n  };\n  /**\n   * Gets width description pad array for c i d font.\n   */\n  UnicodeTrueTypeFont.prototype.getDescendantWidth = function () {\n    var array = new PdfArray();\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n      var glyphInfo = [];\n      // if (!this.isEmbedFont) {\n      var keys = this.usedChars.keys();\n      for (var i = 0; i < keys.length; i++) {\n        var chLen = keys[i];\n        var glyph = this.ttfReader.getGlyph(chLen);\n        if (glyph.empty) {\n          continue;\n        }\n        glyphInfo.push(glyph);\n      }\n      // } else {\n      //     glyphInfo = this.ttfReader.getAllGlyphs();\n      // }\n      glyphInfo.sort(function (a, b) {\n        return a.index - b.index;\n      });\n      var firstGlyphIndex = 0;\n      var lastGlyphIndex = 0;\n      var firstGlyphIndexWasSet = false;\n      var widthDetails = new PdfArray();\n      // if (!this.isEmbedFont) {\n      for (var i = 0; i < glyphInfo.length; i++) {\n        var glyph = glyphInfo[i];\n        if (!firstGlyphIndexWasSet) {\n          firstGlyphIndexWasSet = true;\n          firstGlyphIndex = glyph.index;\n          lastGlyphIndex = glyph.index - 1;\n        }\n        if ((lastGlyphIndex + 1 !== glyph.index || i + 1 === glyphInfo.length) && glyphInfo.length > 1) {\n          // Add glyph index / width.\n          array.add(new PdfNumber(firstGlyphIndex));\n          if (i !== 0) {\n            array.add(widthDetails);\n          }\n          firstGlyphIndex = glyph.index;\n          widthDetails = new PdfArray();\n        }\n        widthDetails.add(new PdfNumber(glyph.width));\n        if (i + 1 === glyphInfo.length) {\n          array.add(new PdfNumber(firstGlyphIndex));\n          array.add(widthDetails);\n        }\n        lastGlyphIndex = glyph.index;\n      }\n      // } else {\n      //     for (let i : number = 0; i < glyphInfo.length; i++) {\n      //         let glyph : TtfGlyphInfo = glyphInfo[i];\n      //         if (!firstGlyphIndexWasSet) {\n      //             firstGlyphIndexWasSet = true;\n      //             lastGlyphIndex = glyph.index - 1;\n      //         }\n      //         firstGlyphIndex = glyph.index;\n      //         if ((lastGlyphIndex + 1 === glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n      //             // Add glyph index / width.\n      //             widthDetails.add(new PdfNumber(glyph.width));\n      //             array.add(new PdfNumber(firstGlyphIndex));\n      //             array.add(widthDetails);\n      //             widthDetails = new PdfArray();\n      //         }\n      //         lastGlyphIndex = glyph.index;\n      //     }\n      // }\n    }\n\n    return array;\n  };\n  /**\n   * Creates cmap.\n   */\n  UnicodeTrueTypeFont.prototype.generateCmap = function () {\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n      var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);\n      if (glyphChars.size() > 0) {\n        var keys = glyphChars.keys().sort();\n        // add first and last glyph indexes\n        var first = keys[0];\n        var last = keys[keys.length - 1];\n        var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;\n        var builder = '';\n        builder += this.cmapPrefix;\n        builder += middlePart;\n        builder += this.cmapEndCodespaceRange;\n        var nextRange = 0;\n        for (var i = 0; i < keys.length; i++) {\n          if (nextRange === 0) {\n            if (i !== 0) {\n              builder += this.cmapEndRange;\n            }\n            nextRange = Math.min(100, keys.length - i);\n            builder += nextRange;\n            builder += Operators.whiteSpace;\n            builder += this.cmapBeginRange;\n          }\n          nextRange -= 1;\n          var key = keys[i];\n          /* tslint:disable */\n          builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + '\\n';\n          /* tslint:enable */\n        }\n\n        builder += this.cmapSuffix;\n        this.cmap.clearStream();\n        this.cmap.isFont = true;\n        this.cmap.write(builder);\n      }\n    }\n  };\n  /**\n   * Generates font program.\n   */\n  UnicodeTrueTypeFont.prototype.generateFontProgram = function () {\n    var fontProgram = null;\n    this.usedChars = this.usedChars === null || this.usedChars === undefined ? new Dictionary() : this.usedChars;\n    this.ttfReader.setOffset(0);\n    fontProgram = this.ttfReader.readFontProgram(this.usedChars);\n    this.fontProgram.clearStream();\n    this.fontProgram.isFont = true;\n    this.fontProgram.writeBytes(fontProgram);\n  };\n  /**\n   * Calculates flags for the font descriptor.\n   * @private\n   */\n  UnicodeTrueTypeFont.prototype.getDescriptorFlags = function () {\n    var flags = 0;\n    var metrics = this.ttfReader.metrics;\n    if (metrics.isFixedPitch) {\n      flags |= FontDescriptorFlags.FixedPitch;\n    }\n    if (metrics.isSymbol) {\n      flags |= FontDescriptorFlags.Symbolic;\n    } else {\n      flags |= FontDescriptorFlags.Nonsymbolic;\n    }\n    if (metrics.isItalic) {\n      flags |= FontDescriptorFlags.Italic;\n    }\n    if (metrics.isBold) {\n      flags |= FontDescriptorFlags.ForceBold;\n    }\n    return flags;\n  };\n  /**\n   * Calculates BoundBox of the descriptor.\n   * @private\n   */\n  UnicodeTrueTypeFont.prototype.getBoundBox = function () {\n    var rect = this.ttfReader.metrics.fontBox;\n    var width = Math.abs(rect.right - rect.left);\n    var height = Math.abs(rect.top - rect.bottom);\n    var rectangle = new RectangleF(rect.left, rect.bottom, width, height);\n    return rectangle;\n  };\n  /**\n   * Converts integer of decimal system to hex integer.\n   */\n  UnicodeTrueTypeFont.prototype.toHexString = function (n, isCaseChange) {\n    var s = n.toString(16);\n    if (isCaseChange) {\n      s = s.toUpperCase();\n    }\n    return '<0000'.substring(0, 5 - s.length) + s + '>';\n  };\n  /**\n   * Stores used symbols.\n   */\n  UnicodeTrueTypeFont.prototype.setSymbols = function (text) {\n    if (text === null) {\n      throw new Error('Argument Null Exception : text');\n    }\n    if (this.usedChars === null || this.usedChars === undefined) {\n      this.usedChars = new Dictionary();\n    }\n    for (var i = 0; i < text.length; i++) {\n      var ch = text[i];\n      this.usedChars.setValue(ch, String.fromCharCode(0));\n    }\n    // else {\n    //     if (text === null) {\n    //         throw new Error('Argument Null Exception : glyphs');\n    //     }\n    //     if (this.usedChars === null || this.usedChars === undefined) {\n    //             this.usedChars = new Dictionary<string, string>();\n    //     }\n    //     for (let i : number = 0; i < text.length; i++) {\n    //         let glyphIndex : number = text[i];\n    //         let glyph : TtfGlyphInfo =  this.ttfReader.getGlyph(glyphIndex);\n    //         if (!glyph == null) {\n    //             let c : string = glyph.charCode.toLocaleString();\n    //             this.usedChars.setValue(c, String.fromCharCode(0));\n    //         }\n    //     }\n    // }\n    if (this.isEmbedFont === false) {\n      this.getDescendantWidth();\n    }\n  };\n  return UnicodeTrueTypeFont;\n}();\nexport { UnicodeTrueTypeFont };","map":{"version":3,"names":["ByteArray","TtfReader","PdfDictionary","SaveDescendantFontEventHandler","SaveFontDictionaryEventHandler","SaveFontProgramEventHandler","SaveCmapEventHandler","PdfStream","PdfArray","PdfName","PdfNumber","PdfString","PdfReferenceHolder","PdfFontMetrics","StandardWidthTable","DictionaryProperties","Dictionary","FontDescriptorFlags","RectangleF","Operators","UnicodeTrueTypeFont","base64String","size","nameString","dictionaryProperties","isCompress","isEmbedFont","cmapPrefix","newLine","cmapEndCodespaceRange","cmapBeginRange","cmapEndRange","cmapSuffix","undefined","Error","fontSize","fontString","Initialize","prototype","getCharWidth","charCode","codeWidth","ttfReader","getLineWidth","line","width","i","len","length","ch","charWidth","byteArray","writeFromBase64String","fontData","internalBuffer","ttfMetrics","metrics","createInternals","fontDictionary","fontProgram","cmap","descendantFont","initializeMetrics","subsetName","getFontName","createDescendantFont","createCmap","createFontDictionary","createFontProgram","getInternals","ascent","macAscent","descent","macDescent","height","lineGap","name","fontFamily","postScriptName","widthTable","subScriptSizeFactor","superscriptSizeFactor","isBold","builder","index","Math","floor","random","toString","formatName","fontName","ret","replace","isFont","descendantFontBeginSave","items","setValue","type","font","subtype","cIDFontType2","baseFont","cIDToGIDMap","identity","dw","fontDescriptor","createFontDescriptor","systemInfo","createSystemInfo","cIDSystemInfo","descriptor","flags","getDescriptorFlags","fontBBox","fromRectangle","getBoundBox","missingWidth","stemV","italicAngle","capHeight","winAscent","winDescent","leading","avgWidth","fontFile2","maxWidth","xHeight","stemH","cmapBeginSave","fontDictionaryBeginSave","type0","encoding","identityH","descFonts","reference","add","descendantFonts","fontProgramBeginSave","registry","ordering","supplement","usedChars","getDescendantWidth","w","generateCmap","containsKey","toUnicode","generateFontProgram","array","glyphInfo","keys","chLen","glyph","getGlyph","empty","push","sort","a","b","firstGlyphIndex","lastGlyphIndex","firstGlyphIndexWasSet","widthDetails","glyphChars","getGlyphChars","first","last","middlePart","toHexString","nextRange","min","whiteSpace","key","getValue","clearStream","write","setOffset","readFontProgram","writeBytes","isFixedPitch","FixedPitch","isSymbol","Symbolic","Nonsymbolic","isItalic","Italic","ForceBold","rect","fontBox","abs","right","left","top","bottom","rectangle","n","isCaseChange","s","toUpperCase","substring","setSymbols","text","String","fromCharCode"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js"],"sourcesContent":["/**\n * TrueTypeFont.ts class for EJ2-PDF\n */\nimport { ByteArray } from './../../graphics/images/index';\nimport { TtfReader } from './ttf-reader';\nimport { PdfDictionary, SaveDescendantFontEventHandler, SaveFontDictionaryEventHandler } from './../../primitives/pdf-dictionary';\nimport { SaveFontProgramEventHandler, SaveCmapEventHandler } from './../../primitives/pdf-stream';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfString } from './../../primitives/pdf-string';\nimport { PdfReferenceHolder } from './../../primitives/pdf-reference';\nimport { PdfFontMetrics } from './pdf-font-metrics';\nimport { StandardWidthTable } from './pdf-font-metrics';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { Dictionary } from './../../collections/dictionary';\nimport { FontDescriptorFlags } from './enum';\nimport { RectangleF } from './../../drawing/pdf-drawing';\nimport { Operators } from './../../input-output/pdf-operators';\nvar UnicodeTrueTypeFont = /** @class */ (function () {\n    /* tslint:enable */\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    function UnicodeTrueTypeFont(base64String, size) {\n        // Fields\n        this.nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Indicates whether the font program is compressed or not.\n         * @private\n         */\n        this.isCompress = false;\n        /**\n         * Indicates whether the font is embedded or not.\n         */\n        this.isEmbedFont = false;\n        /**\n         * Cmap table's start prefix.\n         */\n        /* tslint:disable */\n        this.cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + Operators.newLine + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange' + Operators.newLine;\n        /* tslint:enable */\n        /**\n         * Cmap table's start suffix.\n         */\n        this.cmapEndCodespaceRange = 'endcodespacerange' + Operators.newLine;\n        /**\n         * Cmap's begin range marker.\n         */\n        this.cmapBeginRange = 'beginbfrange' + Operators.newLine;\n        /**\n         * Cmap's end range marker.\n         */\n        this.cmapEndRange = 'endbfrange' + Operators.newLine;\n        /**\n         * Cmap table's end\n         */\n        /* tslint:disable */\n        this.cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + Operators.newLine;\n        if (base64String === null || base64String === undefined) {\n            throw new Error('ArgumentNullException:base64String');\n        }\n        this.fontSize = size;\n        this.fontString = base64String;\n        this.Initialize();\n    }\n    //Implementation\n    /**\n     * Returns width of the char symbol.\n     */\n    UnicodeTrueTypeFont.prototype.getCharWidth = function (charCode) {\n        var codeWidth = this.ttfReader.getCharWidth(charCode);\n        return codeWidth;\n    };\n    /**\n     * Returns width of the text line.\n     */\n    UnicodeTrueTypeFont.prototype.getLineWidth = function (line) {\n        // if (line == null) {\n        //     throw new Error('ArgumentNullException : line');\n        // }\n        var width = 0;\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidth(ch);\n            width += charWidth;\n        }\n        return width;\n    };\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.Initialize = function () {\n        var byteArray = new ByteArray(this.fontString.length);\n        byteArray.writeFromBase64String(this.fontString);\n        this.fontData = byteArray.internalBuffer;\n        this.ttfReader = new TtfReader(this.fontData);\n        this.ttfMetrics = this.ttfReader.metrics;\n    };\n    UnicodeTrueTypeFont.prototype.createInternals = function () {\n        this.fontDictionary = new PdfDictionary();\n        this.fontProgram = new PdfStream();\n        this.cmap = new PdfStream();\n        this.descendantFont = new PdfDictionary();\n        this.metrics = new PdfFontMetrics();\n        this.ttfReader.createInternals();\n        this.ttfMetrics = this.ttfReader.metrics;\n        this.initializeMetrics();\n        // Create all the dictionaries of the font.\n        this.subsetName = this.getFontName();\n        this.createDescendantFont();\n        this.createCmap();\n        this.createFontDictionary();\n        this.createFontProgram();\n    };\n    UnicodeTrueTypeFont.prototype.getInternals = function () {\n        return this.fontDictionary;\n    };\n    /**\n     * Initializes metrics.\n     */\n    UnicodeTrueTypeFont.prototype.initializeMetrics = function () {\n        var ttfMetrics = this.ttfReader.metrics;\n        this.metrics.ascent = ttfMetrics.macAscent;\n        this.metrics.descent = ttfMetrics.macDescent;\n        this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;\n        this.metrics.name = ttfMetrics.fontFamily;\n        this.metrics.postScriptName = ttfMetrics.postScriptName;\n        this.metrics.size = this.fontSize;\n        this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);\n        this.metrics.lineGap = ttfMetrics.lineGap;\n        this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;\n        this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;\n        this.metrics.isBold = ttfMetrics.isBold;\n    };\n    /**\n     * Gets random string.\n     */\n    UnicodeTrueTypeFont.prototype.getFontName = function () {\n        var builder = '';\n        var name;\n        // if (this.isEmbed === false) {\n        for (var i = 0; i < 6; i++) {\n            var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n            builder += this.nameString[index];\n        }\n        builder += '+';\n        // }\n        builder += this.ttfReader.metrics.postScriptName;\n        name = builder.toString();\n        // if (name === '') {\n        //     name = this.ttfReader.metrics.fontFamily;\n        // }\n        name = this.formatName(name);\n        return name;\n    };\n    /**\n     * Generates name of the font.\n     */\n    UnicodeTrueTypeFont.prototype.formatName = function (fontName) {\n        // if (fontName === null) {\n        //     throw new Error('ArgumentNullException : fontName');\n        // }\n        // if (fontName === '') {\n        //     throw new Error('ArgumentOutOfRangeException : fontName, Parameter can not be empty');\n        // }\n        var ret = fontName.replace('(', '#28');\n        ret = ret.replace(')', '#29');\n        ret = ret.replace('[', '#5B');\n        ret = ret.replace(']', '#5D');\n        ret = ret.replace('<', '#3C');\n        ret = ret.replace('>', '#3E');\n        ret = ret.replace('{', '#7B');\n        ret = ret.replace('}', '#7D');\n        ret = ret.replace('/', '#2F');\n        ret = ret.replace('%', '#25');\n        return ret.replace(' ', '#20');\n    };\n    /**\n     * Creates descendant font.\n     */\n    UnicodeTrueTypeFont.prototype.createDescendantFont = function () {\n        // Set property used to clone Font every time\n        this.descendantFont.isFont = true;\n        this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);\n        this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));\n        this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));\n        this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1000));\n        this.fontDescriptor = this.createFontDescriptor();\n        this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));\n        var systemInfo = this.createSystemInfo();\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);\n    };\n    /**\n     * Creates font descriptor.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDescriptor = function () {\n        var descriptor = new PdfDictionary();\n        var metrics = this.ttfReader.metrics;\n        // Set property used to clone Font every time\n        descriptor.isFont = true;\n        descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));\n        descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));\n        descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));\n        descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));\n        descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));\n        descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));\n        descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));\n        descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));\n        descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));\n        descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));\n        descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));\n        descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));\n        descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));\n        return descriptor;\n    };\n    /**\n     * Generates cmap.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createCmap = function () {\n        this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);\n    };\n    /**\n     * Generates font dictionary.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDictionary = function () {\n        // Set property used to clone Font every time\n        this.fontDictionary.isFont = true;\n        this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));\n        var descFonts = new PdfArray();\n        var reference = new PdfReferenceHolder(this.descendantFont);\n        // Set property used to clone Font every time\n        descFonts.isFont = true;\n        descFonts.add(reference);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);\n    };\n    /**\n     * Creates font program.\n     */\n    UnicodeTrueTypeFont.prototype.createFontProgram = function () {\n        this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);\n    };\n    /**\n     * Creates system info dictionary for CID font.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createSystemInfo = function () {\n        var systemInfo = new PdfDictionary();\n        systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString('Adobe'));\n        systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));\n        systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));\n        return systemInfo;\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var width = this.getDescendantWidth();\n            if (width !== null) {\n                this.descendantFont.items.setValue(this.dictionaryProperties.w, width);\n            }\n        }\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.cmapBeginSave = function () {\n        this.generateCmap();\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    /* tslint:disable */\n    UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {\n            this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));\n        }\n    };\n    /* tslint:enable */\n    /**\n     * Runs before font program stream save.\n     */\n    UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function () {\n        this.isCompress = true;\n        this.generateFontProgram();\n    };\n    /**\n     * Gets width description pad array for c i d font.\n     */\n    UnicodeTrueTypeFont.prototype.getDescendantWidth = function () {\n        var array = new PdfArray();\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphInfo = [];\n            // if (!this.isEmbedFont) {\n            var keys = this.usedChars.keys();\n            for (var i = 0; i < keys.length; i++) {\n                var chLen = keys[i];\n                var glyph = this.ttfReader.getGlyph(chLen);\n                if (glyph.empty) {\n                    continue;\n                }\n                glyphInfo.push(glyph);\n            }\n            // } else {\n            //     glyphInfo = this.ttfReader.getAllGlyphs();\n            // }\n            glyphInfo.sort(function (a, b) { return a.index - b.index; });\n            var firstGlyphIndex = 0;\n            var lastGlyphIndex = 0;\n            var firstGlyphIndexWasSet = false;\n            var widthDetails = new PdfArray();\n            // if (!this.isEmbedFont) {\n            for (var i = 0; i < glyphInfo.length; i++) {\n                var glyph = glyphInfo[i];\n                if (!firstGlyphIndexWasSet) {\n                    firstGlyphIndexWasSet = true;\n                    firstGlyphIndex = glyph.index;\n                    lastGlyphIndex = glyph.index - 1;\n                }\n                if ((lastGlyphIndex + 1 !== glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n                    // Add glyph index / width.\n                    array.add(new PdfNumber(firstGlyphIndex));\n                    if (i !== 0) {\n                        array.add(widthDetails);\n                    }\n                    firstGlyphIndex = glyph.index;\n                    widthDetails = new PdfArray();\n                }\n                widthDetails.add(new PdfNumber(glyph.width));\n                if (i + 1 === glyphInfo.length) {\n                    array.add(new PdfNumber(firstGlyphIndex));\n                    array.add(widthDetails);\n                }\n                lastGlyphIndex = glyph.index;\n            }\n            // } else {\n            //     for (let i : number = 0; i < glyphInfo.length; i++) {\n            //         let glyph : TtfGlyphInfo = glyphInfo[i];\n            //         if (!firstGlyphIndexWasSet) {\n            //             firstGlyphIndexWasSet = true;\n            //             lastGlyphIndex = glyph.index - 1;\n            //         }\n            //         firstGlyphIndex = glyph.index;\n            //         if ((lastGlyphIndex + 1 === glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n            //             // Add glyph index / width.\n            //             widthDetails.add(new PdfNumber(glyph.width));\n            //             array.add(new PdfNumber(firstGlyphIndex));\n            //             array.add(widthDetails);\n            //             widthDetails = new PdfArray();\n            //         }\n            //         lastGlyphIndex = glyph.index;\n            //     }\n            // }\n        }\n        return array;\n    };\n    /**\n     * Creates cmap.\n     */\n    UnicodeTrueTypeFont.prototype.generateCmap = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);\n            if (glyphChars.size() > 0) {\n                var keys = glyphChars.keys().sort();\n                // add first and last glyph indexes\n                var first = keys[0];\n                var last = keys[keys.length - 1];\n                var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;\n                var builder = '';\n                builder += this.cmapPrefix;\n                builder += middlePart;\n                builder += this.cmapEndCodespaceRange;\n                var nextRange = 0;\n                for (var i = 0; i < keys.length; i++) {\n                    if (nextRange === 0) {\n                        if (i !== 0) {\n                            builder += this.cmapEndRange;\n                        }\n                        nextRange = Math.min(100, keys.length - i);\n                        builder += nextRange;\n                        builder += Operators.whiteSpace;\n                        builder += this.cmapBeginRange;\n                    }\n                    nextRange -= 1;\n                    var key = keys[i];\n                    /* tslint:disable */\n                    builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + '\\n';\n                    /* tslint:enable */\n                }\n                builder += this.cmapSuffix;\n                this.cmap.clearStream();\n                this.cmap.isFont = true;\n                this.cmap.write(builder);\n            }\n        }\n    };\n    /**\n     * Generates font program.\n     */\n    UnicodeTrueTypeFont.prototype.generateFontProgram = function () {\n        var fontProgram = null;\n        this.usedChars = (this.usedChars === null || this.usedChars === undefined) ? new Dictionary() : this.usedChars;\n        this.ttfReader.setOffset(0);\n        fontProgram = this.ttfReader.readFontProgram(this.usedChars);\n        this.fontProgram.clearStream();\n        this.fontProgram.isFont = true;\n        this.fontProgram.writeBytes(fontProgram);\n    };\n    /**\n     * Calculates flags for the font descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getDescriptorFlags = function () {\n        var flags = 0;\n        var metrics = this.ttfReader.metrics;\n        if (metrics.isFixedPitch) {\n            flags |= FontDescriptorFlags.FixedPitch;\n        }\n        if (metrics.isSymbol) {\n            flags |= FontDescriptorFlags.Symbolic;\n        }\n        else {\n            flags |= FontDescriptorFlags.Nonsymbolic;\n        }\n        if (metrics.isItalic) {\n            flags |= FontDescriptorFlags.Italic;\n        }\n        if (metrics.isBold) {\n            flags |= FontDescriptorFlags.ForceBold;\n        }\n        return flags;\n    };\n    /**\n     * Calculates BoundBox of the descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getBoundBox = function () {\n        var rect = this.ttfReader.metrics.fontBox;\n        var width = Math.abs(rect.right - rect.left);\n        var height = Math.abs(rect.top - rect.bottom);\n        var rectangle = new RectangleF(rect.left, rect.bottom, width, height);\n        return rectangle;\n    };\n    /**\n     * Converts integer of decimal system to hex integer.\n     */\n    UnicodeTrueTypeFont.prototype.toHexString = function (n, isCaseChange) {\n        var s = n.toString(16);\n        if (isCaseChange) {\n            s = s.toUpperCase();\n        }\n        return '<0000'.substring(0, 5 - s.length) + s + '>';\n    };\n    /**\n     * Stores used symbols.\n     */\n    UnicodeTrueTypeFont.prototype.setSymbols = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (this.usedChars === null || this.usedChars === undefined) {\n            this.usedChars = new Dictionary();\n        }\n        for (var i = 0; i < text.length; i++) {\n            var ch = text[i];\n            this.usedChars.setValue(ch, String.fromCharCode(0));\n        }\n        // else {\n        //     if (text === null) {\n        //         throw new Error('Argument Null Exception : glyphs');\n        //     }\n        //     if (this.usedChars === null || this.usedChars === undefined) {\n        //             this.usedChars = new Dictionary<string, string>();\n        //     }\n        //     for (let i : number = 0; i < text.length; i++) {\n        //         let glyphIndex : number = text[i];\n        //         let glyph : TtfGlyphInfo =  this.ttfReader.getGlyph(glyphIndex);\n        //         if (!glyph == null) {\n        //             let c : string = glyph.charCode.toLocaleString();\n        //             this.usedChars.setValue(c, String.fromCharCode(0));\n        //         }\n        //     }\n        // }\n        if (this.isEmbedFont === false) {\n            this.getDescendantWidth();\n        }\n    };\n    return UnicodeTrueTypeFont;\n}());\nexport { UnicodeTrueTypeFont };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}