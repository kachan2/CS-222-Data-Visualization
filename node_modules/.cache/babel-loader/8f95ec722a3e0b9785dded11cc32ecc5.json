{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\nimport { PdfStringLayouter } from './../../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../../document/pdf-document';\n/**\n * Class `lay outing the text`.\n *\n */\nvar PdfGridLayouter = /** @class */function (_super) {\n  __extends(PdfGridLayouter, _super);\n  //constructor\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n  function PdfGridLayouter(baseFormat) {\n    var _this = _super.call(this, baseFormat) || this;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.gridInitialWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.gridSize = new SizeF(0, 0);\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    _this.childheight = 0;\n    /**\n     * Check weather it is `child grid or not`.\n     * @private\n     */\n    _this.isChildGrid = false;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.hasRowSpanSpan = false;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n    _this.flag = true;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.columnRanges = [];\n    /**\n     * @hidden\n     * @private\n     */\n    _this.currentLocation = new PointF(0, 0);\n    /**\n     * @hidden\n     * @private\n     */\n    _this.breakRow = true;\n    _this.slr = null;\n    _this.remainderText = null;\n    _this.isPaginate = false;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n    _this.isOverloadWithPosition = false;\n    return _this;\n  }\n  Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n    //Properties\n    get: function () {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  // Constructors\n  /**\n   * Initializes a new instance of the `StringLayouter` class.\n   * @private\n   */\n  //Public methods\n  /**\n   * `Layouts` the text.\n   * @private\n   */\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n  /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n  public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n  public layout(graphics : PdfGraphics, bounds : PointF) : void\n  public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n      if (graphics instanceof PdfGraphics) {\n      if (bounds instanceof PointF) {\n          if (bounds.x === 0) {\n              bounds.x = PdfBorders.default.right.width / 2;\n          }\n          if (bounds.y === 0) {\n              bounds.y = PdfBorders.default.top.width / 2;\n          }\n          let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n          this.layout(graphics, boundaries);\n      } else {\n          let width : number = graphics.clientSize.width;\n          let parameter : PdfLayoutParams = new PdfLayoutParams();\n          parameter.bounds = bounds;\n          this.currentGraphics = graphics;\n          if (graphics.layer != null) {\n              let index : number = 0;\n              if (this.currentGraphics.page instanceof PdfPage) {\n                  index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n              } else {\n                  index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n              }\n          } else {\n              this.layoutInternal(parameter);\n          }\n      }\n  }\n  }*/\n  /**\n   * Gets the `format`.\n   * @private\n   */\n  PdfGridLayouter.prototype.getFormat = function (format) {\n    var f = format;\n    return f;\n  };\n  /**\n   * `Layouts` the element.\n   * @private\n   */\n  PdfGridLayouter.prototype.layoutInternal = function (param) {\n    var format = this.getFormat(param.format);\n    this.gridLayoutFormat = this.getFormat(param.format);\n    this.currentPage = param.page;\n    if (this.currentPage !== null) {\n      var pageHeight = this.currentPage.getClientSize().height;\n      var pageWidth = this.currentPage.getClientSize().width;\n      this.currentPageBounds = this.currentPage.getClientSize();\n    } else {\n      throw Error('Can not set page as null');\n      //this.currentPageBounds = this.currentGraphics.clientSize;\n    }\n\n    this.currentGraphics = this.currentPage.graphics;\n    //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n    // if (this.currentGraphics.layer !== null) {\n    //     let index : number = 0;\n    //     if (this.currentGraphics.page instanceof PdfPage) {\n    //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n    //     } else {\n    //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n    //     }\n    //     this.listOfNavigatePages.push(index);\n    // }\n    var index = 0;\n    index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n    this.listOfNavigatePages.push(index);\n    if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n    } else {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    }\n    //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    if (this.Grid.rows.count !== 0) {\n      this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    } else if (this.Grid.headers.count !== 0) {\n      // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n      //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n      this.currentBounds.width = param.bounds.width;\n    } else {\n      throw Error('Please add row or header into grid');\n    }\n    this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n    // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n    //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n    //     this.currentBounds.width -= this.currentBounds.x;\n    // }\n    // if (this.Grid.isChildGrid) {\n    //     this.childheight = param.bounds.height;\n    // }\n    // if (param.format !== null && param.format.usePaginateBounds) {\n    //     if (param.format.paginateBounds.height > 0) {\n    //         this.currentBounds.height = param.format.paginateBounds.height;\n    //     }\n    //} else \n    if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n      this.currentBounds.height = param.bounds.height;\n    }\n    if (!this.Grid.isChildGrid) {\n      this.hType = this.Grid.style.horizontalOverflowType;\n    }\n    if (!this.Grid.style.allowHorizontalOverflow) {\n      this.columnRanges = [];\n      if (typeof this.Grid.isChildGrid !== 'undefined' && typeof this.Grid.isChildGrid) {\n        this.Grid.measureColumnsWidth(this.currentBounds);\n      } else {\n        this.Grid.measureColumnsWidth(new RectangleF(this.currentBounds.x, this.currentBounds.y, this.currentBounds.x + this.currentBounds.width, this.currentBounds.height));\n      }\n      this.columnRanges.push([0, this.Grid.columns.count - 1]);\n    } else {\n      this.Grid.measureColumnsWidth();\n      this.determineColumnDrawRanges();\n    }\n    if (this.Grid.hasRowSpanSpan) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {\n          this.Grid.rows.getRow(i).isRowHeightSet = true;\n        }\n      }\n    }\n    var result = this.layoutOnPage(param);\n    return result;\n  };\n  // /* tslint:enable */\n  /**\n   * `Determines the column draw ranges`.\n   * @private\n   */\n  PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n    var startColumn = 0;\n    var endColumn = 0;\n    var cellWidths = 0;\n    var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n    for (var i = 0; i < this.Grid.columns.count; i++) {\n      cellWidths += this.Grid.columns.getColumn(i).width;\n      if (cellWidths >= availableWidth) {\n        var subWidths = 0;\n        for (var j = startColumn; j <= i; j++) {\n          subWidths += this.Grid.columns.getColumn(j).width;\n          if (subWidths > availableWidth) {\n            break;\n          }\n          endColumn = j;\n        }\n        this.columnRanges.push([startColumn, endColumn]);\n        startColumn = endColumn + 1;\n        endColumn = startColumn;\n        cellWidths = endColumn <= i ? this.Grid.columns.getColumn(i).width : 0;\n      }\n    }\n    // if (startColumn !== this.columns.Count) {\n    this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);\n    // }\n  };\n  /**\n   * `Layouts the on page`.\n   * @private\n   */\n  PdfGridLayouter.prototype.layoutOnPage = function (param) {\n    /* tslint:disable */\n    this.pageBounds.x = param.bounds.x;\n    this.pageBounds.y = param.bounds.y;\n    this.pageBounds.height = param.bounds.height;\n    var format = this.getFormat(param.format);\n    var endArgs = null;\n    var result = null;\n    var layoutedPages = new TemporaryDictionary();\n    var startPage = param.page;\n    var isParentCell = false;\n    var cellBounds = [];\n    for (var index = 0; index < this.columnRanges.length; index++) {\n      var range = this.columnRanges[index];\n      this.cellStartIndex = range[0];\n      this.cellEndIndex = range[1];\n      var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n      this.currentBounds = returnObject.currentBounds;\n      this.currentRowIndex = returnObject.currentRowIndex;\n      // if (returnObject.returnValue) {\n      //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n      //     break;\n      // }\n      //Draw Headers.\n      var drawHeader = void 0;\n      for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n        var row = this.Grid.headers.getHeader(i_1);\n        var headerHeight = this.currentBounds.y;\n        this.isHeader = true;\n        if (startPage != this.currentPage) {\n          for (var k = this.cellStartIndex; k <= this.cellEndIndex; k++) {\n            if (row.cells.getCell(k).isCellMergeContinue) {\n              row.cells.getCell(k).isCellMergeContinue = false;\n              row.cells.getCell(k).value = \"\";\n            }\n          }\n        }\n        // RowLayoutResult\n        var headerResult = this.drawRow(row);\n        if (headerHeight === this.currentBounds.y) {\n          drawHeader = true;\n          if (PdfGridLayouter.repeatRowIndex === -1) {\n            PdfGridLayouter.repeatRowIndex = i_1;\n          }\n        } else {\n          drawHeader = false;\n        }\n        if (!headerResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && drawHeader) {\n          this.startLocation.x = this.currentBounds.x;\n          this.currentPage = this.getNextPageformat(format);\n          this.startLocation.y = this.currentBounds.y;\n          if (typeof format.paginateBounds !== 'undefined' && format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0) this.currentBounds.x += this.startLocation.x;\n          this.drawRow(row);\n        }\n        this.isHeader = false;\n      }\n      var i = 0;\n      var length_1 = this.Grid.rows.count;\n      var repeatRow = void 0;\n      var startingHeight = 0;\n      var flag = true;\n      //Here is to draw parent Grid and Cells\n      cellBounds = [];\n      //Draw row by row with the specified cell range.\n      for (var j = 0; j < this.Grid.rows.count; j++) {\n        var row = this.Grid.rows.getRow(j);\n        i++;\n        this.currentRowIndex = i - 1;\n        var originalHeight = this.currentBounds.y;\n        startPage = this.currentPage;\n        PdfGridLayouter.repeatRowIndex = -1;\n        if (flag && row.grid.isChildGrid) {\n          startingHeight = originalHeight;\n          flag = false;\n        }\n        var rowResult = null;\n        ///rowResult = this.drawRow(row);\n        /*if(!row.isrowFinish) {\n            if(!row.grid.isgridSplit){\n                rowResult = this.drawRow(row);\n                row.isrowFinish = true;\n                row.isrowDraw = true;\n            } else {\n                if(!row.isrowDraw){\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                    row.isrowDraw = true;\n                    row.grid.isgridSplit = false;\n                } else {\n                    rowResult =  null;\n                    break;\n                }\n            }\n        }\n        else {\n            //row.isrowFinish = false;\n            //rowResult = this.drawRow(row);\n            rowResult = null;\n            break;\n            \n        }             */\n        if (this.Grid.splitChildRowIndex == -1) {\n          rowResult = this.drawRow(row);\n          row.isrowFinish = true;\n        } else {\n          if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n            rowResult = this.drawRow(row);\n            row.isrowFinish = true;\n          } else if (row.isrowFinish) {\n            continue;\n          } else {\n            break;\n          }\n        }\n        //rowResult = this.drawRow(row);\n        cellBounds.push(rowResult.bounds.width);\n        /*if (row.isRowBreaksNextPage)\n            {\n                let x : number  = 0;\n                for (let l : number = 0; l < row.cells.count; l++)\n                {\n                    let isNestedRowBreak : boolean = false;\n                    if (row.height == row.cells.getCell(l).height)\n                    {\n                        let n : number;\n                        let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                        for (let m : number = grid.rows.count; 0 < m; m--)\n                        {\n                            if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                            {\n                                isNestedRowBreak = true;\n                                break;\n                            }\n                            if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                            {\n                                row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                break;\n                            }\n                            row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                        }\n                    }\n                    if (isNestedRowBreak)\n                        break;\n                }\n                for (let j : number = 0; j < row.cells.count; j++)\n                {\n                     if (row.height > row.cells.getCell(j).height)\n                    {\n                        row.cells.getCell(j).value = \" \";\n                        let rect : RectangleF ;\n                        let page : PdfPage = this.getNextPage(this.currentPage);\n                        let section : PdfSection = this.currentPage.section;\n                        let index : number = section.indexOf(page);\n                        for (let k : number = 0; k < (section.count - 1) - index; k++)\n                        {\n                            rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                            PdfGridLayouter.repeatRowIndex = -1;\n                            row.cells.getCell(j).draw(page.graphics, rect, false);\n                            page = this.getNextPage(page);\n                        }\n                        rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n                         row.cells.getCell(j).draw(page.graphics, rect, false);\n                    }\n                    x += row.grid.columns.getColumn(j).width;\n                }\n            }*/\n        //if height remains same, it is understood that row is not drawn in the page\n        if (originalHeight === this.currentBounds.y) {\n          repeatRow = true;\n          PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n        } else {\n          repeatRow = false;\n          PdfGridLayouter.repeatRowIndex = -1;\n        }\n        while (!rowResult.isFinish && startPage != null) {\n          var tempResult = this.getLayoutResult();\n          /*if (startPage != this.currentPage)\n              {\n                  if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                  {\n                      let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                      bounds.x += param.bounds.x;\n                      if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                      {\n                          bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                          if (bounds.height > this.currentPageBounds.height)\n                          {\n                              bounds.height = this.currentPageBounds.height - bounds.y;\n                              bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                          }\n                      }\n                      // Draw border for cells in the nested grid cell's row.\n                      for (let c : number = 0; c < row.cells.count; c++)\n                      {\n                          let cell : PdfGridCell = row.cells.getCell(c);\n                          let cellWidth :  number= 0;\n                          if (cell.columnSpan > 1)\n                          {\n                              for (; c < cell.columnSpan; c++)\n                                  cellWidth += row.grid.columns.getColumn(c).width;\n                          }\n                          else\n                              cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                          cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                          bounds.x += cellWidth;\n                          c += (cell.columnSpan - 1);\n                      }\n                  }\n              }\n              */\n          endArgs = this.raisePageLayouted(tempResult);\n          if (endArgs.cancel || repeatRow) break;else if (this.Grid.allowRowBreakAcrossPages) {\n            //If there is no space in the current page, add new page and then draw the remaining row.\n            this.currentPage = this.getNextPageformat(format);\n            originalHeight = this.currentBounds.y;\n            var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n            if (format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0 && this.startLocation.x === location_1.x && this.startLocation.y === location_1.y) {\n              this.currentBounds.x += this.startLocation.x;\n              this.currentBounds.y += this.startLocation.y;\n            }\n            if (this.isPaginate) {\n              this.startLocation.y = this.currentBounds.y;\n              this.isPaginate = false;\n            }\n            if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n              if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                  this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                }\n              }\n            }\n            if (row.grid.ParentCell != null) {\n              row.grid.ParentCell.row.isRowBreaksNextPage = true;\n              row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n              for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n              }\n              //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n            }\n            /*if (row.noOfPageCount > 1)\n            {\n                let temp : number = row.rowBreakHeightValue;\n                for (let j : number = 1; j < row.noOfPageCount; j++)\n                {\n                    row.rowBreakHeightValue = 0;\n                    row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                    this.drawRow(row);\n                    this.currentPage = this.getNextPageformat(format);\n                    startPage = this.currentPage;\n                }\n                row.rowBreakHeightValue = temp;\n                row.noOfPageCount = 1;\n                rowResult = this.drawRow(row);\n            } else {\n                rowResult = this.drawRow(row);\n            }\n            /*if(row.grid.isChildGrid){\n                row.isrowFinish = false;\n                row.isrowDraw = false;\n                row.grid.isgridSplit = true;\n                row.grid.ParentCell.row.grid.isgridSplit = true;\n                //rowResult.isFinish = false;\n                break;\n            }*/\n            if (row.grid.isChildGrid) {\n              //row.grid.isgridSplit = true;\n              row.isrowFinish = false;\n              //row.grid.ParentCell.row.grid.isgridSplit = true;\n              row.grid.splitChildRowIndex = row.rowIndex;\n              row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n              if (row.grid.ParentCell.row.grid.isGridSplit) {\n                row.grid.ParentCell.row.noOfPageCount += 1;\n                row.grid.ParentCell.row.grid.isGridSplit = false;\n              }\n              break;\n            }\n            if (row.noOfPageCount < 1) {\n              if (row.grid.splitChildRowIndex != -1) {\n                row.grid.isGridSplit = true;\n              }\n              if (row.style.border != null && (row.style.border.left != null && row.style.border.left.width !== 1 || row.style.border.top != null && row.style.border.top.width !== 1)) {\n                var x = row.style.border.left.width / 2;\n                var y = row.style.border.top.width / 2;\n                if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {\n                  var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);\n                  this.currentBounds = newBound;\n                }\n              }\n              if (this.Grid.repeatHeader) {\n                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                  var headerRepeat = this.Grid.headers.getHeader(j_1);\n                  this.drawRow(headerRepeat);\n                }\n              }\n              rowResult = this.drawRow(row);\n              if (row.noOfPageCount >= 1) {\n                var temp = row.rowBreakHeightValue;\n                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                  //this.currentPage.section.add();\n                  var tempResult1 = this.getLayoutResult();\n                  endArgs = this.raisePageLayouted(tempResult1);\n                  this.currentPage = this.getNextPageformat(format);\n                  originalHeight = this.currentBounds.y;\n                  //row.rowBreakHeightValue = 0;\n                  if (row.grid.splitChildRowIndex != -1) {\n                    row.grid.isGridSplit = true;\n                  }\n                  this.currentBounds.y = 0.5;\n                  if (this.Grid.repeatHeader) {\n                    for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                      var header = this.Grid.headers.getHeader(i_3);\n                      this.drawRow(header);\n                    }\n                  }\n                  //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                  this.drawRow(row);\n                }\n                // row.rowBreakHeight = temp;\n                // row.noOfPageCount = 1;\n                // rowResult = this.drawRow(row);\n              }\n\n              row.grid.splitChildRowIndex = -1;\n              row.grid.isGridSplit = false;\n              rowResult.isFinish = this.checkIsFisished(row);\n              //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n              //this.currentBounds.y = rowResult.bounds.y;\n              for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                  row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                }\n              }\n            }\n          }\n          // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n          // {\n          //     this.currentPage = this.getNextPageformat(format);\n          //     break;\n          // }\n          // else if (i >= length)\n          //     break;\n        }\n\n        if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n          // During pagination, cell position is maintained here.\n          this.startLocation.x = this.currentBounds.x;\n          var isAddNextPage = false;\n          this.currentPage = this.getNextPageformat(format);\n          /*if (!this.Grid.isSingleGrid)\n          {\n              for ( let j : number= 0; j < this.Grid.rows.count; j++)\n              {\n                  let isWidthGreaterthanParent : boolean = false;\n                  for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                  {\n                      if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                          isWidthGreaterthanParent = true;\n                  }\n                  if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                  {\n                      isAddNextPage = true;\n                  }\n              }\n          }\n          if (!this.Grid.isRearranged && isAddNextPage)\n               {\n                   let section : PdfSection = this.currentPage.section;\n                   \n                   //this.currentPage = section.add();\n               \n                   this.currentGraphics = this.currentPage.graphics;\n                   this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                \n                   let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n               }\n               else\n               {\n                   this.currentPage = this.getNextPageformat(format);\n               }\n               if (format.paginateBounds.y == 0)\n                   this.currentBounds.y = PdfBorders.default.top.width/2;\n               else\n               {\n                   this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                   \n               }*/\n          if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex).returnValue) {\n            break;\n          }\n          if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n          }\n          if (typeof param.format !== 'undefined' && param.format != null && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && !(param.format.paginateBounds.x === 0 && param.format.paginateBounds.y === 0 && param.format.paginateBounds.width === 0 && param.format.paginateBounds.height === 0) && param.format.paginateBounds.y === 0) {\n            this.currentBounds.y = PdfBorders.default.top.width / 2;\n          } else {\n            this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n            if (format != null && (format.paginateBounds.x !== 0 || format.paginateBounds.y !== 0 || format.paginateBounds.height !== 0 || format.paginateBounds.width !== 0)) {\n              this.currentBounds.x = format.paginateBounds.x;\n              this.currentBounds.width = format.paginateBounds.width;\n              this.currentBounds.height = format.paginateBounds.height;\n            }\n          }\n          if (typeof param.format !== 'undefined' && param.format !== null && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.y > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.y = param.bounds.y;\n          }\n          this.startLocation.y = this.currentBounds.y;\n          if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n            this.currentBounds.x += this.startLocation.x;\n          }\n          if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n            this.currentBounds.y += this.startLocation.x;\n          }\n          if (this.Grid.repeatHeader) {\n            for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n              var header = this.Grid.headers.getHeader(i_5);\n              this.drawRow(header);\n            }\n          }\n          this.drawRow(row);\n          if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n            layoutedPages.add(this.currentPage, range);\n          }\n        }\n        if (row.NestedGridLayoutResult != null) {\n          // Position for next row in the grid.\n          this.currentPage = row.NestedGridLayoutResult.page;\n          this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n          this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n          var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n          this.currentBounds.y = recalHeight;\n          //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n          if (startPage != this.currentPage) {\n            var secion = this.currentPage.section;\n            var startIndex = secion.indexOf(startPage) + 1;\n            var endIndex = secion.indexOf(this.currentPage);\n            for (var page = startIndex; page < endIndex + 1; page++) {\n              var pageGraphics = this.currentPage.graphics;\n              var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n              var height = page == endIndex ? row.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;\n              if (height <= pageGraphics.clientSize.height) height += param.bounds.y;\n              // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n              //     location.x += param.bounds.x;\n              location_2.y = format == null ? 0.5 : format.paginateBounds.y;\n              // Draw border for last paginated row containing nested grid.\n              for (var c = 0; c < row.cells.count; c++) {\n                var cell = row.cells.getCell(c);\n                var cellWidth = 0;\n                var totalwidth = 0;\n                if (cell.value instanceof PdfGrid) {\n                  for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                    totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                  }\n                } else {\n                  totalwidth = cell.width;\n                }\n                // if (cell.columnSpan > 1)\n                // {\n                //     for (; c < cell.columnSpan; c++)\n                //         cellWidth += row.grid.columns.getColumn(c).width;\n                // }\n                // else\n                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                location_2.x += cellWidth;\n                c += cell.columnSpan - 1;\n              }\n            }\n            // So, nested grid drawing is completed for the current row. Update page.\n            // Otherwise, the next nested grid of the parent will draw borders from start.\n            startPage = this.currentPage;\n          }\n        }\n      }\n      var isPdfGrid = false;\n      var maximumCellBoundsWidth = 0;\n      if (cellBounds.length > 0) {\n        maximumCellBoundsWidth = cellBounds[0];\n      }\n      var largeNavigatePage = [[1, 2]];\n      for (var c = 0; c < this.Grid.rows.count; c++) {\n        if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n          var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n          this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n          isPdfGrid = true;\n          // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n          // {\n          //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n          // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n          // {\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n        }\n      }\n\n      if (!isPdfGrid && cellBounds.length > 0) {\n        for (var c = 0; c < i - 1; c++) {\n          if (maximumCellBoundsWidth < cellBounds[c]) {\n            maximumCellBoundsWidth = cellBounds[c];\n          }\n        }\n        this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n      } else {\n        this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n      }\n      if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage != null && format.layout != PdfLayoutType.OnePage) {\n        isParentCell = this.Grid.isChildGrid;\n        if (largeNavigatePage[0][0] != 0) {\n          var section = this.currentPage.section;\n          var pageIndex = section.indexOf(this.currentPage);\n          this.currentGraphics = this.currentPage.graphics;\n          this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n          var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        } else {\n          this.currentPage = this.getNextPageformat(format);\n        }\n        // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n        // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n        // {\n        //     this.currentBounds.x += this.startLocation.x;\n        //     this.currentBounds.y += this.startLocation.y;\n        // }\n      }\n\n      if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n        this.currentPage = this.getNextPageformat(format);\n        if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n          this.currentBounds.x += this.startLocation.x;\n          this.currentBounds.y += this.startLocation.y;\n          //this.currentBounds.height = this.pageBounds.height;\n        }\n      }\n    }\n\n    result = this.getLayoutResult();\n    if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n      this.reArrangePages(layoutedPages);\n    }\n    this.raisePageLayouted(result);\n    return result;\n  };\n  PdfGridLayouter.prototype.checkIsFisished = function (row) {\n    var result = true;\n    for (var i = 0; i < row.cells.count; i++) {\n      if (!row.cells.getCell(i).FinishedDrawingCell) {\n        result = false;\n      }\n    }\n    return result;\n  };\n  /* tslint:enable */\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n  PdfGridLayouter.prototype.getNextPageformat = function (format) {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n    this.flag = false;\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n    this.currentGraphics = nextPage.graphics;\n    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n    if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n      this.listOfNavigatePages.push(pageindex);\n    }\n    this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n    if (typeof format !== 'undefined' && format != null && format.usePaginateBounds && typeof format.paginateBounds !== 'undefined' && format.paginateBounds != null && format.paginateBounds.x !== format.paginateBounds.y && format.paginateBounds.y !== format.paginateBounds.height && format.paginateBounds.height !== format.paginateBounds.width && format.paginateBounds.width !== 0) {\n      this.currentBounds.x = format.paginateBounds.x;\n      this.currentBounds.y = format.paginateBounds.y;\n      this.currentBounds.height = format.paginateBounds.height;\n    }\n    return nextPage;\n  };\n  PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n    var defaultFormat = new PdfStringFormat();\n    return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;\n  };\n  /**\n   * `Raises BeforeCellDraw event`.\n   * @private\n   */\n  PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n    var args = null;\n    if (this.Grid.raiseBeginCellDraw) {\n      args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n      this.Grid.onBeginCellDraw(args);\n      style = args.style;\n    }\n    return style;\n  };\n  /**\n   * `Raises AfterCellDraw event`.\n   * @private\n   */\n  PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n    var args = null;\n    if (this.Grid.raiseEndCellDraw) {\n      args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n      this.Grid.onEndCellDraw(args);\n    }\n  };\n  PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n    var document = this.currentPage.document;\n    var pages = [];\n    var keys = layoutedPages.keys();\n    var values = layoutedPages.values();\n    for (var i = 0; i < keys.length; i++) {\n      var page = keys[i];\n      page.section = null;\n      pages.push(page);\n      document.pages.remove(page);\n    }\n    /* tslint:disable */\n    for (var i = 0; i < layoutedPages.size(); i++) {\n      var count = 0;\n      for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {\n        var page = pages[j];\n        if (typeof page !== 'undefined' && document.pages.indexOf(page) === -1) {\n          document.pages.add(page);\n        }\n      }\n    }\n    /* tslint:enable */\n  };\n  /**\n   * Gets the `layout result`.\n   * @private\n   */\n  PdfGridLayouter.prototype.getLayoutResult = function () {\n    if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        var row = this.Grid.rows.getRow(i);\n        if (row.rowBreakHeight > 0 && row.repeatFlag) {\n          this.startLocation.y = this.currentPage.origin.y;\n        }\n      }\n    }\n    var bounds;\n    if (!this.isChanged) {\n      bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n    }\n    // else {\n    //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n    //                              this.currentLocation.y));\n    // }\n    /* tslint:enable */\n    return new PdfGridLayoutResult(this.currentPage, bounds);\n  };\n  /**\n   * `Recalculate row height` for the split cell to be drawn.\n   * @private\n   */\n  PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n    var newHeight = 0.0;\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' || typeof row.cells.getCell(i).remainingString === 'undefined')) {\n        newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n      }\n    }\n    return Math.max(height, newHeight);\n  };\n  /**\n   * `Raises BeforePageLayout event`.\n   * @private\n   */\n  PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n    var cancel = false;\n    if (this.Grid.raiseBeginPageLayout) {\n      var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n      this.Grid.onBeginPageLayout(args);\n      // if (currentBounds !== args.Bounds) {\n      //     this.isChanged = true;\n      //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n      //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n      //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n      //                                                                 args.Bounds.height)));\n      // }\n      cancel = typeof args.cancel === 'undefined' ? false : args.cancel;\n      currentBounds = args.bounds;\n      currentRow = args.startRowIndex;\n    }\n    return {\n      returnValue: cancel,\n      currentBounds: currentBounds,\n      currentRowIndex: currentRow\n    };\n  };\n  /**\n   * `Raises PageLayout event` if needed.\n   * @private\n   */\n  PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n    var args = new PdfGridEndPageLayoutEventArgs(result);\n    if (this.Grid.raiseEndPageLayout) {\n      this.Grid.onEndPageLayout(args);\n    }\n    return args;\n  };\n  PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n    if (typeof result === 'undefined') {\n      //.. Check if required space available.\n      //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n      var result_1 = new RowLayoutResult();\n      var rowHeightWithSpan = 0;\n      var location_3 = new PointF(0, 0);\n      var size = new SizeF(0, 0);\n      var isHeader = false;\n      if (row.rowSpanExists) {\n        var maxSpan = 0;\n        var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n        if (currRowIndex === -1) {\n          currRowIndex = this.Grid.headers.indexOf(row);\n          if (currRowIndex !== -1) {\n            isHeader = true;\n          }\n        }\n        for (var i = 0; i < row.cells.count; i++) {\n          var cell = row.cells.getCell(i);\n          maxSpan = Math.max(maxSpan, cell.rowSpan);\n        }\n        for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n          rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;\n        }\n        // let rowMaxHeight : number = rowHeightWithSpan;\n        // for (let i : number = 0; i < row.cells.count; i++ ) {\n        //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n        // }\n        // let flag : boolean = true;\n        // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n        // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n        //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n        //         flag = false;\n        //         break;\n        //     }\n        // }\n        // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n        //     row.height += (rowMaxHeight - rowHeightWithSpan);\n        // }                \n      }\n\n      var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n      if (typeof this.Grid.isChildGrid !== 'undefined' && this.Grid.isChildGrid && typeof this.Grid.ParentCell !== 'undefined' && this.Grid.ParentCell != null) {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n        //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n        //     if (this.Grid.allowRowBreakAcrossPages) {\n        //         result.isFinish = true;\n        //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n        //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n        //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             }\n        //             this.currentBounds.x = this.startLocation.x;\n        //         }\n        //         result.bounds = this.currentBounds ;\n        //         this.drawRowWithBreak(result, row, calculatedHeight);\n        //     } else {\n        //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n        //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n        //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n        //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n        //         }\n        //         result.isFinish = false;\n        //         this.drawRow( row, result, calculatedHeight);\n        //     }\n        // } else\n        if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n          //If a row is repeated and still cannot fit in page, proceed draw.\n          if (typeof this.Grid.ParentCell.row.grid.LayoutFormat !== 'undefined' && this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n            PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n            this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n          }\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true;\n              // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n              //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n              //     // }\n              //     this.currentBounds.x = this.startLocation.x;\n              // }\n              result_1.bounds = this.currentBounds;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n            }\n            // else {\n            //     result.isFinish = false;\n            //     row.repeatFlag = false;\n            //     this.drawRow( row, result, calculatedHeight);\n            // }\n          }\n          // else {\n          //     result.isFinish = false;\n          // }\n        } else {\n          result_1.isFinish = true;\n          if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n            row.repeatFlag = true;\n          } else {\n            row.repeatFlag = false;\n            calculatedHeight = row.height;\n          }\n          if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n            }\n          }\n          this.drawRow(row, result_1, calculatedHeight);\n        }\n      } else {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        if (calculatedHeight > this.currentPageBounds.height) {\n          if (this.Grid.allowRowBreakAcrossPages) {\n            result_1.isFinish = true;\n            //result.bounds = this.currentBounds;\n            this.drawRowWithBreak(result_1, row, calculatedHeight);\n            row.isrowFinish = true;\n            row.repeatFlag = true;\n            if (row.grid.splitChildRowIndex !== -1) {\n              result_1.isFinish = false;\n            }\n          }\n          // else {\n          //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n          //     result.isFinish = false;\n          //     this.drawRow( row, result, calculatedHeight);\n          // }\n        } else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n          // If a row is repeated and still cannot fit in page, proceed draw.\n          var isFit = false;\n          if (this.Grid.allowRowBreakAcrossPages && !this.Grid.repeatHeader && !row.isRowHeightSet && !row.rowMergeComplete) {\n            if (this.Grid.LayoutFormat !== null && this.Grid.LayoutFormat.paginateBounds.height > 0) {\n              isFit = this.isFitToCell(this.currentBounds.height + this.startLocation.y - this.currentBounds.y, this.Grid, row);\n            } else isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n            if (isFit) {\n              this.isPaginate = true;\n            }\n          } else if (this.Grid.allowRowBreakAcrossPages && this.Grid.LayoutFormat != null && this.Grid.LayoutFormat.layout == PdfLayoutType.Paginate && this.Grid.LayoutFormat.break != PdfLayoutBreakType.FitElement && row.isRowHeightSet && this.currentBounds.y + height > this.currentPageBounds.height) {\n            isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n            if (!isFit) isFit = !(this.slr !== null && this.slr.actualSize.height == 0 && this.slr.remainder != null && this.slr.remainder.length > 0 && this.remainderText == this.slr.remainder);\n            if (isFit && this.slr != null && this.slr.lineCount > 1) {\n              //It may text cutoff issue\n              isFit = false;\n            }\n            this.remainderText = null;\n          }\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex || isFit) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n              if (row.grid.splitChildRowIndex !== -1) {\n                result_1.isFinish = false;\n              }\n            } else {\n              result_1.isFinish = false;\n              this.drawRow(row, result_1, calculatedHeight);\n            }\n          } else {\n            result_1.isFinish = false;\n          }\n        } else {\n          result_1.isFinish = true;\n          this.drawRow(row, result_1, calculatedHeight);\n          row.repeatFlag = false;\n        }\n      }\n      return result_1;\n    } else {\n      var skipcell = false;\n      var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);\n      // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n      //                 this.currentPage.getClientSize().width) {\n      //     location.x = this.startLocation.x;\n      // }\n      result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n      height = this.ReCalculateHeight(row, height);\n      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        var cancelSpans = i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1;\n        // let cancelSpans : boolean = false;\n        if (!cancelSpans) {\n          for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n            row.cells.getCell(i + j).isCellMergeContinue = true;\n          }\n        }\n        var size = new SizeF(this.Grid.columns.getColumn(i).width, height);\n        // if (size.width > this.currentGraphics.clientSize.width) {\n        //     size.width = this.currentGraphics.clientSize.width;\n        // }\n        // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n        //     if (size.width >= this.currentGraphics.clientSize.width) {\n        //         size.width -= 2 * this.currentBounds.x;\n        //     }\n        // }\n        /* tslint:disable */\n        if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n          row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n        }\n        var cellstyle = row.cells.getCell(i).style;\n        var tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n        row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);\n        //row.cells.getCell(i).style = cellstyle;\n        if (!skipcell) {\n          if (row.cells.getCell(i).value instanceof PdfGrid) {\n            var grid = row.cells.getCell(i).value;\n            grid.parentCellIndex = i;\n          }\n          var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n          if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n            row.rowOverflowIndex = this.cellEndIndex;\n          }\n          if (row.grid.style.allowHorizontalOverflow && row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n            row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? stringResult.remainder !== undefined ? stringResult.remainder : '' : '';\n            row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n            row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n            row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n          }\n        }\n        /* tslint:enable */\n        tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n        if (!cancelSpans) {\n          this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n        }\n        if (row.cells.getCell(i).value instanceof PdfGrid) {\n          var grid = row.cells.getCell(i).value;\n          if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n            location_4.x = grid.rowLayoutBoundsWidth;\n            location_4.x += grid.style.cellSpacing;\n          } else {\n            location_4.x += this.Grid.columns.getColumn(i).width;\n          }\n        } else {\n          location_4.x += this.Grid.columns.getColumn(i).width;\n        }\n      }\n      if (!row.rowMergeComplete || row.isRowHeightSet) {\n        this.currentBounds.y += height;\n      }\n      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n    }\n  };\n  PdfGridLayouter.prototype.isFitToCell = function (currentHeight, grid, gridRow) {\n    var isFit = false;\n    var layouter = new PdfStringLayouter();\n    for (var i = 0; i < gridRow.cells.count; i++) {\n      var cell = gridRow.cells.getCell(i);\n      if (typeof cell.value !== 'undefined' && cell.value !== null && typeof cell.value === 'string') {\n        var font = null;\n        if (typeof cell.style.font !== 'undefined' && cell.style.font != null) {\n          font = cell.style.font;\n        } else if (typeof cell.row.style.font !== 'undefined' && cell.row.style.font != null) {\n          font = cell.row.style.font;\n        } else if (typeof cell.row.grid.style.font !== 'undefined' && cell.row.grid.style.font != null) {\n          font = cell.row.grid.style.font;\n        } else {\n          font = PdfDocument.defaultFont;\n        }\n        this.remainderText = gridRow.cells.getCell(i).value;\n        var width = gridRow.cells.getCell(i).width;\n        if (grid.columns.getColumn(i).isCustomWidth && gridRow.cells.getCell(i).width > grid.columns.getColumn(i).width) {\n          width = grid.columns.getColumn(i).width;\n        }\n        this.slr = layouter.layout(gridRow.cells.getCell(i).value, font, gridRow.cells.getCell(i).stringFormat, new SizeF(width, currentHeight), false, this.currentPageBounds);\n        var height = this.slr.actualSize.height;\n        if (height == 0) {\n          isFit = false;\n          break;\n        }\n        if (gridRow.cells.getCell(i).style != null && gridRow.cells.getCell(i).style.borders != null && gridRow.cells.getCell(i).style.borders.top != null && gridRow.cells.getCell(i).style.borders.bottom != null) height += (gridRow.cells.getCell(i).style.borders.top.width + gridRow.cells.getCell(i).style.borders.bottom.width) * 2;\n        if (this.slr.lineCount > 1 && gridRow.cells.getCell(i).stringFormat != null && gridRow.cells.getCell(i).stringFormat.lineSpacing != 0) height += (this.slr.lineCount - 1) * gridRow.cells.getCell(i).style.stringFormat.lineSpacing;\n        if (gridRow.cells.getCell(i).style.cellPadding == null) {\n          height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;\n        } else {\n          height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;\n        }\n        height += grid.style.cellSpacing;\n        if (currentHeight > height || typeof this.slr.remainder !== 'undefined' && this.slr.remainder !== null) {\n          isFit = true;\n          break;\n        }\n      }\n    }\n    return isFit;\n  };\n  PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n    var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n    if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n      location.x = this.startLocation.x;\n    }\n    result.bounds = new RectangleF(location, new SizeF(0, 0));\n    this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;\n    // Calculate the remaining height.\n    if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n      row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n    }\n    // else {\n    //     row.rowBreakHeight = calculateHeight;\n    //     result.isFinish = false;\n    //     return;\n    // }\n    // No need to explicit break if the row height is equal to grid height.\n    for (var i = 0; i < row.cells.count; i++) {\n      var cell = row.cells.getCell(i);\n      var cellHeight = cell.measureHeight();\n      if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n        row.rowBreakHeight = 0;\n      }\n      // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n      //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n      // }\n    }\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      var cancelSpans = row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1;\n      // if (!cancelSpans) {\n      //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n      //         row.cells.getCell(i + k).isCellMergeContinue = true;\n      //     }\n      //}\n      var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight : this.currentPageBounds.height);\n      // if (size.width === 0) {\n      //     size = new SizeF(row.cells.getCell(i).width, size.height);\n      // }\n      // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n      //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n      //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n      // }\n      var cellstyle1 = row.cells.getCell(i).style;\n      row.cells.getCell(i).style = cellstyle1;\n      var skipcell = false;\n      var stringResult = null;\n      if (!skipcell) {\n        stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n      }\n      //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n      if (row.rowBreakHeight > 0.0) {\n        if (stringResult != null && typeof stringResult.remainder !== 'undefined') {\n          row.cells.getCell(i).FinishedDrawingCell = false;\n          row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n          row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n        }\n      }\n      result.isFinish = !result.isFinish ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;\n      // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n      //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n      // if (!cancelSpans) {\n      //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n      //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n      //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n      //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n      //                             row.cells.getCell(i).style);\n      //     }                \n      if (row.cells.getCell(i).value instanceof PdfGrid) {\n        var grid = row.cells.getCell(i).value;\n        this.rowBreakPageHeightCellIndex = i;\n        // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n        // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n        //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n        //             this.Grid.listOfNavigatePages.push(pageIndex);\n        //     }\n        if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n          location.x = this.rowLayoutBoundsWidth;\n          location.x += grid.style.cellSpacing;\n        } else {\n          location.x += this.Grid.columns.getColumn(i).width;\n        }\n      } else {\n        location.x += this.Grid.columns.getColumn(i).width;\n      }\n    }\n    this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n    result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n  };\n  /**\n   * @hidden\n   * @private\n   */\n  PdfGridLayouter.repeatRowIndex = -1;\n  return PdfGridLayouter;\n}(ElementLayouter);\nexport { PdfGridLayouter };\n// recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\nvar PdfGridLayoutResult = /** @class */function (_super) {\n  __extends(PdfGridLayoutResult, _super);\n  /**\n   * Constructor\n   * @private\n   */\n  function PdfGridLayoutResult(page, bounds) {\n    return _super.call(this, page, bounds) || this;\n  }\n  return PdfGridLayoutResult;\n}(PdfLayoutResult);\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfGridLayoutFormat = /** @class */function (_super) {\n  __extends(PdfGridLayoutFormat, _super);\n  /**\n   * Initializes a new instance of the `PdfGridLayoutFormat` class.\n   * @private\n   */\n  function PdfGridLayoutFormat(baseFormat) {\n    return _super.call(this, baseFormat) || this;\n  }\n  return PdfGridLayoutFormat;\n}(PdfLayoutFormat);\nexport { PdfGridLayoutFormat };\nvar GridCellEventArgs = /** @class */function () {\n  // Constructors\n  /**\n   * Initialize a new instance for `GridCellEventArgs` class.\n   * @private\n   */\n  function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n    this.gridRowIndex = rowIndex;\n    this.gridCellIndex = cellIndex;\n    this.internalValue = value;\n    this.gridBounds = bounds;\n    this.pdfGraphics = graphics;\n  }\n  Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n    // Properties\n    /**\n     * Gets the value of current `row index`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n    /**\n     * Gets the value of current `cell index`.\n     * @private\n     */\n    get: function () {\n      return this.gridCellIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n    /**\n     * Gets the actual `value` of current cell.\n     * @private\n     */\n    get: function () {\n      return this.internalValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n    /**\n     * Gets the `bounds` of current cell.\n     * @private\n     */\n    get: function () {\n      return this.gridBounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n    /**\n     * Gets the instance of `current graphics`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCellEventArgs;\n}();\nexport { GridCellEventArgs };\nvar PdfGridBeginCellDrawEventArgs = /** @class */function (_super) {\n  __extends(PdfGridBeginCellDrawEventArgs, _super);\n  // Constructors\n  /**\n   * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n   * @private\n   */\n  function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n    _this.style = style;\n    return _this;\n  }\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n    // Properties\n    /**\n     * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n     * @private\n     */\n    get: function () {\n      return this.bSkip;\n    },\n    set: function (value) {\n      this.bSkip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n    /**\n     * Gets or sets a `style` value of the cell.\n     * @private\n     */\n    get: function () {\n      return this.cellStyle;\n    },\n    set: function (value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs);\nexport { PdfGridBeginCellDrawEventArgs };\nvar PdfGridEndCellDrawEventArgs = /** @class */function (_super) {\n  __extends(PdfGridEndCellDrawEventArgs, _super);\n  // Constructors\n  /**\n   * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n   * @private\n   */\n  function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n    _this.cellStyle = style;\n    return _this;\n  }\n  Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n    // Propertise\n    /**\n     * Get the `PdfGridCellStyle`.\n     * @private\n     */\n    get: function () {\n      return this.cellStyle;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs);\nexport { PdfGridEndCellDrawEventArgs };\nvar PdfCancelEventArgs = /** @class */function () {\n  function PdfCancelEventArgs() {}\n  Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n    // Properties\n    /**\n     * Gets and Sets the value of `cancel`.\n     * @private\n     */\n    get: function () {\n      return this.isCancel;\n    },\n    set: function (value) {\n      this.isCancel = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfCancelEventArgs;\n}();\nexport { PdfCancelEventArgs };\nvar BeginPageLayoutEventArgs = /** @class */function (_super) {\n  __extends(BeginPageLayoutEventArgs, _super);\n  // Constructors\n  /**\n   * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n   * @private\n   */\n  function BeginPageLayoutEventArgs(bounds, page) {\n    var _this = _super.call(this) || this;\n    _this.bounds = bounds;\n    _this.pdfPage = page;\n    return _this;\n  }\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n    // Properties\n    /**\n     * Gets or sets value that indicates the lay outing `bounds` on the page.\n     * @private\n     */\n    get: function () {\n      return this.cellBounds;\n    },\n    set: function (value) {\n      this.cellBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n    /**\n     * Gets the `page` where the lay outing should start.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs);\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nvar EndPageLayoutEventArgs = /** @class */function (_super) {\n  __extends(EndPageLayoutEventArgs, _super);\n  // Constructors\n  /**\n   * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n   * @private\n   */\n  function EndPageLayoutEventArgs(result) {\n    var _this = _super.call(this) || this;\n    _this.layoutResult = result;\n    return _this;\n  }\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n    // Properties\n    /**\n     * Gets the lay outing `result` of the page.\n     * @private\n     */\n    get: function () {\n      return this.layoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n    /**\n     * Gets or sets a value indicating the `next page` where the element should be layout.\n     * @private\n     */\n    get: function () {\n      return this.nextPdfPage;\n    },\n    set: function (value) {\n      this.nextPdfPage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs);\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridBeginPageLayoutEventArgs = /** @class */function (_super) {\n  __extends(PdfGridBeginPageLayoutEventArgs, _super);\n  // Constructors\n  /**\n   * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n   * @private\n   */\n  function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n    var _this = _super.call(this, bounds, page) || this;\n    _this.startRow = startRow;\n    return _this;\n  }\n  Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n    // Properties\n    /**\n     * Gets the `start row index`.\n     * @private\n     */\n    get: function () {\n      return this.startRow;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs);\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridEndPageLayoutEventArgs = /** @class */function (_super) {\n  __extends(PdfGridEndPageLayoutEventArgs, _super);\n  // Constructors\n  /**\n   * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n   * @private\n   */\n  function PdfGridEndPageLayoutEventArgs(result) {\n    return _super.call(this, result) || this;\n  }\n  return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs);\nexport { PdfGridEndPageLayoutEventArgs };\nvar RowLayoutResult = /** @class */function () {\n  //Constructors\n  /**\n   * Initializes a new instance of the `RowLayoutResult` class.\n   * @private\n   */\n  function RowLayoutResult() {\n    this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n  }\n  Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n    /**\n     * Gets or sets a value indicating whether this instance `is finish`.\n     * @private\n     */\n    get: function () {\n      return this.bIsFinished;\n    },\n    set: function (value) {\n      this.bIsFinished = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n    /**\n     * Gets or sets the `bounds`.\n     * @private\n     */\n    get: function () {\n      return this.layoutedBounds;\n    },\n    set: function (value) {\n      this.layoutedBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RowLayoutResult;\n}();\nexport { RowLayoutResult };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGrid","PdfStringFormat","SizeF","RectangleF","PointF","PdfBorders","PdfLayoutType","PdfLayoutBreakType","PdfLayoutResult","PdfLayoutFormat","ElementLayouter","PdfHorizontalOverflowType","TemporaryDictionary","PdfStringLayouter","PdfDocument","PdfGridLayouter","_super","baseFormat","_this","call","gridInitialWidth","gridSize","parentCellIndex","tempWidth","childheight","isChildGrid","hasRowSpanSpan","isRearranged","pageBounds","listOfNavigatePages","flag","columnRanges","currentLocation","breakRow","slr","remainderText","isPaginate","isOverloadWithPosition","defineProperty","get","elements","enumerable","configurable","getFormat","format","f","layoutInternal","param","gridLayoutFormat","currentPage","page","pageHeight","getClientSize","height","pageWidth","width","currentPageBounds","Error","currentGraphics","graphics","index","section","indexOf","push","break","FitColumnsToPage","currentBounds","bounds","x","y","Grid","columns","clientSize","rows","count","getRow","cells","getCell","style","borders","left","headers","startLocation","hType","horizontalOverflowType","allowHorizontalOverflow","measureColumnsWidth","determineColumnDrawRanges","i","isRowHeightSet","result","layoutOnPage","startColumn","endColumn","cellWidths","availableWidth","getColumn","subWidths","j","endArgs","layoutedPages","startPage","isParentCell","cellBounds","length","range","cellStartIndex","cellEndIndex","returnObject","raiseBeforePageLayout","currentRowIndex","drawHeader","i_1","row","getHeader","headerHeight","isHeader","k","isCellMergeContinue","value","headerResult","drawRow","repeatRowIndex","isFinish","layout","OnePage","getNextPageformat","paginateBounds","length_1","repeatRow","startingHeight","originalHeight","grid","rowResult","splitChildRowIndex","isrowFinish","ParentCell","isGridSplit","rowIndex","rowCollection","tempResult","getLayoutResult","raisePageLayouted","cancel","allowRowBreakAcrossPages","location_1","default","right","top","cellPadding","rowBreakHeight","isRowBreaksNextPage","rowBreakHeightValue","bottom","i_2","noOfPageCount","border","newBound","repeatHeader","j_1","headerRepeat","temp","j_2","tempResult1","i_3","header","checkIsFisished","i_4","isAddNextPage","returnValue","usePaginateBounds","i_5","containsKey","add","NestedGridLayoutResult","recalHeight","ReCalculateHeight","secion","startIndex","endIndex","pageGraphics","location_2","c","cell","cellWidth","totalwidth","i_6","columnWidth","Math","max","drawCellBorders","columnSpan","isPdfGrid","maximumCellBoundsWidth","largeNavigatePage","rowLayoutBoundsWidth","pageIndex","pageindex","NextPage","reArrangePages","FinishedDrawingCell","nextPage","getPages","CheckIfDefaultFormat","defaultFormat","alignment","characterSpacing","clipPath","firstLineIndent","horizontalScalingFactor","lineAlignment","lineLimit","lineSpacing","measureTrailingSpaces","noClip","paragraphIndent","rightToLeft","subSuperScript","wordSpacing","wordWrap","RaiseBeforeCellDraw","cellIndex","args","raiseBeginCellDraw","PdfGridBeginCellDrawEventArgs","onBeginCellDraw","raiseAfterCellDraw","cellstyle","raiseEndCellDraw","PdfGridEndCellDrawEventArgs","onEndCellDraw","document","pages","keys","values","remove","size","count_1","repeatFlag","origin","isChanged","PdfGridLayoutResult","newHeight","remainingString","measureHeight","currentRow","raiseBeginPageLayout","PdfGridBeginPageLayoutEventArgs","onBeginPageLayout","startRowIndex","PdfGridEndPageLayoutEventArgs","raiseEndPageLayout","onEndPageLayout","result_1","RowLayoutResult","rowHeightWithSpan","location_3","rowSpanExists","maxSpan","currRowIndex","rowSpan","calculatedHeight","LayoutFormat","FitPage","drawRowWithBreak","repeatRowNumber","isFit","rowMergeComplete","isFitToCell","Paginate","FitElement","actualSize","remainder","lineCount","skipcell","location_4","cancelSpans","stringFormat","tempValue","stringResult","draw","rowOverflowIndex","undefined","cellSpacing","currentHeight","gridRow","layouter","font","defaultFont","isCustomWidth","calculateHeight","location","gridHeight","cellHeight","cellstyle1","rowBreakPageHeightCellIndex","PdfGridLayoutFormat","GridCellEventArgs","gridRowIndex","gridCellIndex","internalValue","gridBounds","pdfGraphics","bSkip","set","cellStyle","PdfCancelEventArgs","isCancel","BeginPageLayoutEventArgs","pdfPage","EndPageLayoutEventArgs","layoutResult","nextPdfPage","startRow","layoutedBounds","bIsFinished"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\nimport { PdfStringLayouter } from './../../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../../document/pdf-document';\n/**\n * Class `lay outing the text`.\n *\n */\nvar PdfGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfGridLayouter, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridInitialWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        _this.childheight = 0;\n        /**\n         * Check weather it is `child grid or not`.\n         * @private\n         */\n        _this.isChildGrid = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.hasRowSpanSpan = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.flag = true;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.columnRanges = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.currentLocation = new PointF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.slr = null;\n        _this.remainderText = null;\n        _this.isPaginate = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        _this.isOverloadWithPosition = false;\n        return _this;\n    }\n    Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n        //Properties\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    //Public methods\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n    public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n    public layout(graphics : PdfGraphics, bounds : PointF) : void\n    public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n        if (graphics instanceof PdfGraphics) {\n        if (bounds instanceof PointF) {\n            if (bounds.x === 0) {\n                bounds.x = PdfBorders.default.right.width / 2;\n            }\n            if (bounds.y === 0) {\n                bounds.y = PdfBorders.default.top.width / 2;\n            }\n            let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n            this.layout(graphics, boundaries);\n        } else {\n            let width : number = graphics.clientSize.width;\n            let parameter : PdfLayoutParams = new PdfLayoutParams();\n            parameter.bounds = bounds;\n            this.currentGraphics = graphics;\n            if (graphics.layer != null) {\n                let index : number = 0;\n                if (this.currentGraphics.page instanceof PdfPage) {\n                    index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                } else {\n                    index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n                }\n            } else {\n                this.layoutInternal(parameter);\n            }\n        }\n    }\n    }*/\n    /**\n     * Gets the `format`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutInternal = function (param) {\n        var format = this.getFormat(param.format);\n        this.gridLayoutFormat = this.getFormat(param.format);\n        this.currentPage = param.page;\n        if (this.currentPage !== null) {\n            var pageHeight = this.currentPage.getClientSize().height;\n            var pageWidth = this.currentPage.getClientSize().width;\n            this.currentPageBounds = this.currentPage.getClientSize();\n        }\n        else {\n            throw Error('Can not set page as null');\n            //this.currentPageBounds = this.currentGraphics.clientSize;\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n        // if (this.currentGraphics.layer !== null) {\n        //     let index : number = 0;\n        //     if (this.currentGraphics.page instanceof PdfPage) {\n        //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n        //     } else {\n        //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n        //     }\n        //     this.listOfNavigatePages.push(index);\n        // }\n        var index = 0;\n        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        this.listOfNavigatePages.push(index);\n        if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        if (this.Grid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else if (this.Grid.headers.count !== 0) {\n            // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n            //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n            this.currentBounds.width = param.bounds.width;\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n        //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n        //     this.currentBounds.width -= this.currentBounds.x;\n        // }\n        // if (this.Grid.isChildGrid) {\n        //     this.childheight = param.bounds.height;\n        // }\n        // if (param.format !== null && param.format.usePaginateBounds) {\n        //     if (param.format.paginateBounds.height > 0) {\n        //         this.currentBounds.height = param.format.paginateBounds.height;\n        //     }\n        //} else \n        if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.Grid.isChildGrid) {\n            this.hType = this.Grid.style.horizontalOverflowType;\n        }\n        if (!this.Grid.style.allowHorizontalOverflow) {\n            this.columnRanges = [];\n            if (typeof this.Grid.isChildGrid !== 'undefined' && typeof this.Grid.isChildGrid) {\n                this.Grid.measureColumnsWidth(this.currentBounds);\n            }\n            else {\n                this.Grid.measureColumnsWidth(new RectangleF(this.currentBounds.x, this.currentBounds.y, this.currentBounds.x + this.currentBounds.width, this.currentBounds.height));\n            }\n            this.columnRanges.push([0, this.Grid.columns.count - 1]);\n        }\n        else {\n            this.Grid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        if (this.Grid.hasRowSpanSpan) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {\n                    this.Grid.rows.getRow(i).isRowHeightSet = true;\n                }\n            }\n        }\n        var result = this.layoutOnPage(param);\n        return result;\n    };\n    // /* tslint:enable */\n    /**\n     * `Determines the column draw ranges`.\n     * @private\n     */\n    PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.Grid.columns.count; i++) {\n            cellWidths += this.Grid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.Grid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.Grid.columns.getColumn(i).width : 0;\n            }\n        }\n        // if (startColumn !== this.columns.Count) {\n        this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);\n        // }\n    };\n    /**\n     * `Layouts the on page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutOnPage = function (param) {\n        /* tslint:disable */\n        this.pageBounds.x = param.bounds.x;\n        this.pageBounds.y = param.bounds.y;\n        this.pageBounds.height = param.bounds.height;\n        var format = this.getFormat(param.format);\n        var endArgs = null;\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        var isParentCell = false;\n        var cellBounds = [];\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n            this.currentBounds = returnObject.currentBounds;\n            this.currentRowIndex = returnObject.currentRowIndex;\n            // if (returnObject.returnValue) {\n            //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n            //     break;\n            // }\n            //Draw Headers.\n            var drawHeader = void 0;\n            for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n                var row = this.Grid.headers.getHeader(i_1);\n                var headerHeight = this.currentBounds.y;\n                this.isHeader = true;\n                if (startPage != this.currentPage) {\n                    for (var k = this.cellStartIndex; k <= this.cellEndIndex; k++) {\n                        if (row.cells.getCell(k).isCellMergeContinue) {\n                            row.cells.getCell(k).isCellMergeContinue = false;\n                            row.cells.getCell(k).value = \"\";\n                        }\n                    }\n                }\n                // RowLayoutResult\n                var headerResult = this.drawRow(row);\n                if (headerHeight === this.currentBounds.y) {\n                    drawHeader = true;\n                    if (PdfGridLayouter.repeatRowIndex === -1) {\n                        PdfGridLayouter.repeatRowIndex = i_1;\n                    }\n                }\n                else {\n                    drawHeader = false;\n                }\n                if (!headerResult.isFinish && startPage !== null\n                    && format.layout !== PdfLayoutType.OnePage && drawHeader) {\n                    this.startLocation.x = this.currentBounds.x;\n                    this.currentPage = this.getNextPageformat(format);\n                    this.startLocation.y = this.currentBounds.y;\n                    if (typeof format.paginateBounds !== 'undefined' && format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0)\n                        this.currentBounds.x += this.startLocation.x;\n                    this.drawRow(row);\n                }\n                this.isHeader = false;\n            }\n            var i = 0;\n            var length_1 = this.Grid.rows.count;\n            var repeatRow = void 0;\n            var startingHeight = 0;\n            var flag = true;\n            //Here is to draw parent Grid and Cells\n            cellBounds = [];\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < this.Grid.rows.count; j++) {\n                var row = this.Grid.rows.getRow(j);\n                i++;\n                this.currentRowIndex = i - 1;\n                var originalHeight = this.currentBounds.y;\n                startPage = this.currentPage;\n                PdfGridLayouter.repeatRowIndex = -1;\n                if (flag && row.grid.isChildGrid) {\n                    startingHeight = originalHeight;\n                    flag = false;\n                }\n                var rowResult = null;\n                ///rowResult = this.drawRow(row);\n                /*if(!row.isrowFinish) {\n                    if(!row.grid.isgridSplit){\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                        row.isrowDraw = true;\n                    } else {\n                        if(!row.isrowDraw){\n                            rowResult = this.drawRow(row);\n                            row.isrowFinish = true;\n                            row.isrowDraw = true;\n                            row.grid.isgridSplit = false;\n                        } else {\n                            rowResult =  null;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    //row.isrowFinish = false;\n                    //rowResult = this.drawRow(row);\n                    rowResult = null;\n                    break;\n                    \n                }             */\n                if (this.Grid.splitChildRowIndex == -1) {\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                }\n                else {\n                    if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                    }\n                    else if (row.isrowFinish) {\n                        continue;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                //rowResult = this.drawRow(row);\n                cellBounds.push(rowResult.bounds.width);\n                /*if (row.isRowBreaksNextPage)\n                    {\n                        let x : number  = 0;\n                        for (let l : number = 0; l < row.cells.count; l++)\n                        {\n                            let isNestedRowBreak : boolean = false;\n                            if (row.height == row.cells.getCell(l).height)\n                            {\n                                let n : number;\n                                let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                                for (let m : number = grid.rows.count; 0 < m; m--)\n                                {\n                                    if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                                    {\n                                        isNestedRowBreak = true;\n                                        break;\n                                    }\n                                    if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                                    {\n                                        row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                        break;\n                                    }\n                                    row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                                }\n                            }\n                            if (isNestedRowBreak)\n                                break;\n                        }\n                        for (let j : number = 0; j < row.cells.count; j++)\n                        {\n\n                            if (row.height > row.cells.getCell(j).height)\n                            {\n                                row.cells.getCell(j).value = \" \";\n                                let rect : RectangleF ;\n                                let page : PdfPage = this.getNextPage(this.currentPage);\n                                let section : PdfSection = this.currentPage.section;\n                                let index : number = section.indexOf(page);\n                                for (let k : number = 0; k < (section.count - 1) - index; k++)\n                                {\n                                    rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                                    PdfGridLayouter.repeatRowIndex = -1;\n                                    row.cells.getCell(j).draw(page.graphics, rect, false);\n                                    page = this.getNextPage(page);\n                                }\n                                rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n\n                                row.cells.getCell(j).draw(page.graphics, rect, false);\n                            }\n                            x += row.grid.columns.getColumn(j).width;\n                        }\n                    }*/\n                //if height remains same, it is understood that row is not drawn in the page\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    PdfGridLayouter.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage != null) {\n                    var tempResult = this.getLayoutResult();\n                    /*if (startPage != this.currentPage)\n                        {\n                            if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            {\n                                let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                                bounds.x += param.bounds.x;\n                                if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                                {\n                                    bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                                    if (bounds.height > this.currentPageBounds.height)\n                                    {\n                                        bounds.height = this.currentPageBounds.height - bounds.y;\n                                        bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                                    }\n                                }\n                                // Draw border for cells in the nested grid cell's row.\n                                for (let c : number = 0; c < row.cells.count; c++)\n                                {\n                                    let cell : PdfGridCell = row.cells.getCell(c);\n                                    let cellWidth :  number= 0;\n                                    if (cell.columnSpan > 1)\n                                    {\n                                        for (; c < cell.columnSpan; c++)\n                                            cellWidth += row.grid.columns.getColumn(c).width;\n                                    }\n                                    else\n                                        cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                                    cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                                    bounds.x += cellWidth;\n                                    c += (cell.columnSpan - 1);\n                                }\n                            }\n                        }\n                        */\n                    endArgs = this.raisePageLayouted(tempResult);\n                    if (endArgs.cancel || repeatRow)\n                        break;\n                    else if (this.Grid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageformat(format);\n                        originalHeight = this.currentBounds.y;\n                        var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                        if ((format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 &&\n                            format.paginateBounds.height === 0) && (this.startLocation.x === location_1.x && this.startLocation.y === location_1.y)) {\n                            this.currentBounds.x += this.startLocation.x;\n                            this.currentBounds.y += this.startLocation.y;\n                        }\n                        if (this.isPaginate) {\n                            this.startLocation.y = this.currentBounds.y;\n                            this.isPaginate = false;\n                        }\n                        if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n                            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                                }\n                            }\n                        }\n                        if (row.grid.ParentCell != null) {\n                            row.grid.ParentCell.row.isRowBreaksNextPage = true;\n                            row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                            for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n                            }\n                            //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n                        }\n                        /*if (row.noOfPageCount > 1)\n                        {\n                            let temp : number = row.rowBreakHeightValue;\n                            for (let j : number = 1; j < row.noOfPageCount; j++)\n                            {\n                                row.rowBreakHeightValue = 0;\n                                row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                this.drawRow(row);\n                                this.currentPage = this.getNextPageformat(format);\n                                startPage = this.currentPage;\n                            }\n                            row.rowBreakHeightValue = temp;\n                            row.noOfPageCount = 1;\n                            rowResult = this.drawRow(row);\n                        } else {\n                            rowResult = this.drawRow(row);\n                        }\n                        /*if(row.grid.isChildGrid){\n                            row.isrowFinish = false;\n                            row.isrowDraw = false;\n                            row.grid.isgridSplit = true;\n                            row.grid.ParentCell.row.grid.isgridSplit = true;\n                            //rowResult.isFinish = false;\n                            break;\n                        }*/\n                        if (row.grid.isChildGrid) {\n                            //row.grid.isgridSplit = true;\n                            row.isrowFinish = false;\n                            //row.grid.ParentCell.row.grid.isgridSplit = true;\n                            row.grid.splitChildRowIndex = row.rowIndex;\n                            row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n                            if (row.grid.ParentCell.row.grid.isGridSplit) {\n                                row.grid.ParentCell.row.noOfPageCount += 1;\n                                row.grid.ParentCell.row.grid.isGridSplit = false;\n                            }\n                            break;\n                        }\n                        if (row.noOfPageCount < 1) {\n                            if (row.grid.splitChildRowIndex != -1) {\n                                row.grid.isGridSplit = true;\n                            }\n                            if (row.style.border != null && ((row.style.border.left != null && row.style.border.left.width !== 1)\n                                || (row.style.border.top != null && row.style.border.top.width !== 1))) {\n                                var x = row.style.border.left.width / 2;\n                                var y = row.style.border.top.width / 2;\n                                if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {\n                                    var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);\n                                    this.currentBounds = newBound;\n                                }\n                            }\n                            if (this.Grid.repeatHeader) {\n                                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                                    var headerRepeat = this.Grid.headers.getHeader(j_1);\n                                    this.drawRow(headerRepeat);\n                                }\n                            }\n                            rowResult = this.drawRow(row);\n                            if (row.noOfPageCount >= 1) {\n                                var temp = row.rowBreakHeightValue;\n                                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                                    //this.currentPage.section.add();\n                                    var tempResult1 = this.getLayoutResult();\n                                    endArgs = this.raisePageLayouted(tempResult1);\n                                    this.currentPage = this.getNextPageformat(format);\n                                    originalHeight = this.currentBounds.y;\n                                    //row.rowBreakHeightValue = 0;\n                                    if (row.grid.splitChildRowIndex != -1) {\n                                        row.grid.isGridSplit = true;\n                                    }\n                                    this.currentBounds.y = 0.5;\n                                    if (this.Grid.repeatHeader) {\n                                        for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                                            var header = this.Grid.headers.getHeader(i_3);\n                                            this.drawRow(header);\n                                        }\n                                    }\n                                    //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                    this.drawRow(row);\n                                }\n                                // row.rowBreakHeight = temp;\n                                // row.noOfPageCount = 1;\n                                // rowResult = this.drawRow(row);\n                            }\n                            row.grid.splitChildRowIndex = -1;\n                            row.grid.isGridSplit = false;\n                            rowResult.isFinish = this.checkIsFisished(row);\n                            //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n                            //this.currentBounds.y = rowResult.bounds.y;\n                            for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                                }\n                            }\n                        }\n                    }\n                    // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n                    // {\n                    //     this.currentPage = this.getNextPageformat(format);\n                    //     break;\n                    // }\n                    // else if (i >= length)\n                    //     break;\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    // During pagination, cell position is maintained here.\n                    this.startLocation.x = this.currentBounds.x;\n                    var isAddNextPage = false;\n                    this.currentPage = this.getNextPageformat(format);\n                    /*if (!this.Grid.isSingleGrid)\n                    {\n                        for ( let j : number= 0; j < this.Grid.rows.count; j++)\n                        {\n                            let isWidthGreaterthanParent : boolean = false;\n                            for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                            {\n                                if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                                    isWidthGreaterthanParent = true;\n                            }\n                            if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                            {\n                                isAddNextPage = true;\n                            }\n                        }\n                    }\n                    if (!this.Grid.isRearranged && isAddNextPage)\n                         {\n                             let section : PdfSection = this.currentPage.section;\n                             \n                             //this.currentPage = section.add();\n                         \n                             this.currentGraphics = this.currentPage.graphics;\n                             this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                          \n                             let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                         }\n                         else\n                         {\n                             this.currentPage = this.getNextPageformat(format);\n                         }\n                         if (format.paginateBounds.y == 0)\n                             this.currentBounds.y = PdfBorders.default.top.width/2;\n                         else\n                         {\n                             this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                             \n                         }*/\n                    if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex).returnValue) {\n                        break;\n                    }\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.height > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.height = param.bounds.height;\n                    }\n                    if (typeof param.format !== 'undefined' && param.format != null && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && !(param.format.paginateBounds.x === 0 && param.format.paginateBounds.y === 0 && param.format.paginateBounds.width === 0 && param.format.paginateBounds.height === 0) && param.format.paginateBounds.y === 0) {\n                        this.currentBounds.y = PdfBorders.default.top.width / 2;\n                    }\n                    else {\n                        this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                        if (format != null && (format.paginateBounds.x !== 0 || format.paginateBounds.y !== 0 || format.paginateBounds.height !== 0 || format.paginateBounds.width !== 0)) {\n                            this.currentBounds.x = format.paginateBounds.x;\n                            this.currentBounds.width = format.paginateBounds.width;\n                            this.currentBounds.height = format.paginateBounds.height;\n                        }\n                    }\n                    if (typeof param.format !== 'undefined' && (param.format !== null) && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.y > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.y = param.bounds.y;\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if ((format.paginateBounds.x === format.paginateBounds.y) &&\n                        (format.paginateBounds.y === format.paginateBounds.height) &&\n                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    if (this.Grid.repeatHeader) {\n                        for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n                            var header = this.Grid.headers.getHeader(i_5);\n                            this.drawRow(header);\n                        }\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n                if (row.NestedGridLayoutResult != null) {\n                    // Position for next row in the grid.\n                    this.currentPage = row.NestedGridLayoutResult.page;\n                    this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n                    this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n                    var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n                    this.currentBounds.y = recalHeight;\n                    //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n                    if (startPage != this.currentPage) {\n                        var secion = this.currentPage.section;\n                        var startIndex = secion.indexOf(startPage) + 1;\n                        var endIndex = secion.indexOf(this.currentPage);\n                        for (var page = startIndex; page < endIndex + 1; page++) {\n                            var pageGraphics = this.currentPage.graphics;\n                            var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n                            var height = page == endIndex ? (row.NestedGridLayoutResult.bounds.height - param.bounds.y) :\n                                (this.currentBounds.height - location_2.y);\n                            if (height <= pageGraphics.clientSize.height)\n                                height += param.bounds.y;\n                            // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            //     location.x += param.bounds.x;\n                            location_2.y = format == null ? 0.5 : format.paginateBounds.y;\n                            // Draw border for last paginated row containing nested grid.\n                            for (var c = 0; c < row.cells.count; c++) {\n                                var cell = row.cells.getCell(c);\n                                var cellWidth = 0;\n                                var totalwidth = 0;\n                                if (cell.value instanceof PdfGrid) {\n                                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                                        totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                                    }\n                                }\n                                else {\n                                    totalwidth = cell.width;\n                                }\n                                // if (cell.columnSpan > 1)\n                                // {\n                                //     for (; c < cell.columnSpan; c++)\n                                //         cellWidth += row.grid.columns.getColumn(c).width;\n                                // }\n                                // else\n                                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                                location_2.x += cellWidth;\n                                c += (cell.columnSpan - 1);\n                            }\n                        }\n                        // So, nested grid drawing is completed for the current row. Update page.\n                        // Otherwise, the next nested grid of the parent will draw borders from start.\n                        startPage = this.currentPage;\n                    }\n                }\n            }\n            var isPdfGrid = false;\n            var maximumCellBoundsWidth = 0;\n            if (cellBounds.length > 0) {\n                maximumCellBoundsWidth = cellBounds[0];\n            }\n            var largeNavigatePage = [[1, 2]];\n            for (var c = 0; c < this.Grid.rows.count; c++) {\n                if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n                    isPdfGrid = true;\n                    // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n                    // {\n                    //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                    // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n                    // {\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                }\n            }\n            if (!isPdfGrid && cellBounds.length > 0) {\n                for (var c = 0; c < i - 1; c++) {\n                    if (maximumCellBoundsWidth < cellBounds[c]) {\n                        maximumCellBoundsWidth = cellBounds[c];\n                    }\n                }\n                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n            }\n            else {\n                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1\n                && startPage != null && format.layout != PdfLayoutType.OnePage) {\n                isParentCell = this.Grid.isChildGrid;\n                if (largeNavigatePage[0][0] != 0) {\n                    var section = this.currentPage.section;\n                    var pageIndex = section.indexOf(this.currentPage);\n                    this.currentGraphics = this.currentPage.graphics;\n                    this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n                    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n                }\n                else {\n                    this.currentPage = this.getNextPageformat(format);\n                }\n                // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n                // {\n                //     this.currentBounds.x += this.startLocation.x;\n                //     this.currentBounds.y += this.startLocation.y;\n                // }\n            }\n            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageformat(format);\n                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)\n                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                    this.currentBounds.x += this.startLocation.x;\n                    this.currentBounds.y += this.startLocation.y;\n                    //this.currentBounds.height = this.pageBounds.height;\n                }\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        this.raisePageLayouted(result);\n        return result;\n    };\n    PdfGridLayouter.prototype.checkIsFisished = function (row) {\n        var result = true;\n        for (var i = 0; i < row.cells.count; i++) {\n            if (!row.cells.getCell(i).FinishedDrawingCell) {\n                result = false;\n            }\n        }\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getNextPageformat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        this.flag = false;\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n            this.listOfNavigatePages.push(pageindex);\n        }\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        if ((typeof format !== 'undefined') && format != null && format.usePaginateBounds && (typeof format.paginateBounds !== 'undefined') && format.paginateBounds != null && (format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n            && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n            this.currentBounds.x = format.paginateBounds.x;\n            this.currentBounds.y = format.paginateBounds.y;\n            this.currentBounds.height = format.paginateBounds.height;\n        }\n        return nextPage;\n    };\n    PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    /**\n     * `Raises BeforeCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n        var args = null;\n        if (this.Grid.raiseBeginCellDraw) {\n            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n            this.Grid.onBeginCellDraw(args);\n            style = args.style;\n        }\n        return style;\n    };\n    /**\n     * `Raises AfterCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n        var args = null;\n        if (this.Grid.raiseEndCellDraw) {\n            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n            this.Grid.onEndCellDraw(args);\n        }\n    };\n    PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutedPages.keys();\n        var values = layoutedPages.values();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        /* tslint:disable */\n        for (var i = 0; i < layoutedPages.size(); i++) {\n            var count = 0;\n            for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {\n                var page = pages[j];\n                if (typeof page !== 'undefined' && document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n        /* tslint:enable */\n    };\n    /**\n     * Gets the `layout result`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getLayoutResult = function () {\n        if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var row = this.Grid.rows.getRow(i);\n                if (row.rowBreakHeight > 0 && row.repeatFlag) {\n                    this.startLocation.y = this.currentPage.origin.y;\n                }\n            }\n        }\n        var bounds;\n        if (!this.isChanged) {\n            bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n                this.startLocation.y));\n        }\n        // else {\n        //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n        //                              this.currentLocation.y));\n        // }\n        /* tslint:enable */\n        return new PdfGridLayoutResult(this.currentPage, bounds);\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     * @private\n     */\n    PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n        var newHeight = 0.0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' ||\n                typeof row.cells.getCell(i).remainingString === 'undefined')) {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    /**\n     * `Raises BeforePageLayout event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n        var cancel = false;\n        if (this.Grid.raiseBeginPageLayout) {\n            var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n            this.Grid.onBeginPageLayout(args);\n            // if (currentBounds !== args.Bounds) {\n            //     this.isChanged = true;\n            //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n            //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n            //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n            //                                                                 args.Bounds.height)));\n            // }\n            cancel = (typeof args.cancel === 'undefined' ? false : args.cancel);\n            currentBounds = args.bounds;\n            currentRow = args.startRowIndex;\n        }\n        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };\n    };\n    /**\n     * `Raises PageLayout event` if needed.\n     * @private\n     */\n    PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n        var args = new PdfGridEndPageLayoutEventArgs(result);\n        if (this.Grid.raiseEndPageLayout) {\n            this.Grid.onEndPageLayout(args);\n        }\n        return args;\n    };\n    PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n        if (typeof result === 'undefined') {\n            //.. Check if required space available.\n            //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n            var result_1 = new RowLayoutResult();\n            var rowHeightWithSpan = 0;\n            var location_3 = new PointF(0, 0);\n            var size = new SizeF(0, 0);\n            var isHeader = false;\n            if (row.rowSpanExists) {\n                var maxSpan = 0;\n                var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                if (currRowIndex === -1) {\n                    currRowIndex = this.Grid.headers.indexOf(row);\n                    if (currRowIndex !== -1) {\n                        isHeader = true;\n                    }\n                }\n                for (var i = 0; i < row.cells.count; i++) {\n                    var cell = row.cells.getCell(i);\n                    maxSpan = Math.max(maxSpan, cell.rowSpan);\n                }\n                for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n                    rowHeightWithSpan += (isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height);\n                }\n                // let rowMaxHeight : number = rowHeightWithSpan;\n                // for (let i : number = 0; i < row.cells.count; i++ ) {\n                //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n                // }\n                // let flag : boolean = true;\n                // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n                // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n                //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n                //         flag = false;\n                //         break;\n                //     }\n                // }\n                // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n                //     row.height += (rowMaxHeight - rowHeightWithSpan);\n                // }                \n            }\n            var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n            if (typeof this.Grid.isChildGrid !== 'undefined' && this.Grid.isChildGrid && typeof this.Grid.ParentCell !== 'undefined' && this.Grid.ParentCell != null) {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n                //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n                //     if (this.Grid.allowRowBreakAcrossPages) {\n                //         result.isFinish = true;\n                //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n                //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n                //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             }\n                //             this.currentBounds.x = this.startLocation.x;\n                //         }\n                //         result.bounds = this.currentBounds ;\n                //         this.drawRowWithBreak(result, row, calculatedHeight);\n                //     } else {\n                //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n                //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n                //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                //         }\n                //         result.isFinish = false;\n                //         this.drawRow( row, result, calculatedHeight);\n                //     }\n                // } else\n                if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight >\n                    this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom\n                    + calculatedHeight > this.currentBounds.height || this.currentBounds.y +\n                    this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n                    //If a row is repeated and still cannot fit in page, proceed draw.\n                    if (typeof this.Grid.ParentCell.row.grid.LayoutFormat !== 'undefined' && this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                        this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n                            //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                            //     // }\n                            //     this.currentBounds.x = this.startLocation.x;\n                            // }\n                            result_1.bounds = this.currentBounds;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     row.repeatFlag = false;\n                        //     this.drawRow( row, result, calculatedHeight);\n                        // }\n                    }\n                    // else {\n                    //     result.isFinish = false;\n                    // }\n                }\n                else {\n                    result_1.isFinish = true;\n                    if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n                        row.repeatFlag = true;\n                    }\n                    else {\n                        row.repeatFlag = false;\n                        calculatedHeight = row.height;\n                    }\n                    if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n                        if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                        }\n                    }\n                    this.drawRow(row, result_1, calculatedHeight);\n                }\n            }\n            else {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                if (calculatedHeight > this.currentPageBounds.height) {\n                    if (this.Grid.allowRowBreakAcrossPages) {\n                        result_1.isFinish = true;\n                        //result.bounds = this.currentBounds;\n                        this.drawRowWithBreak(result_1, row, calculatedHeight);\n                        row.isrowFinish = true;\n                        row.repeatFlag = true;\n                        if (row.grid.splitChildRowIndex !== -1) {\n                            result_1.isFinish = false;\n                        }\n                    }\n                    // else {\n                    //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    //     result.isFinish = false;\n                    //     this.drawRow( row, result, calculatedHeight);\n                    // }\n                }\n                else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||\n                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||\n                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n                    // If a row is repeated and still cannot fit in page, proceed draw.\n                    var isFit = false;\n                    if ((this.Grid.allowRowBreakAcrossPages && !this.Grid.repeatHeader && !row.isRowHeightSet && !row.rowMergeComplete)) {\n                        if (this.Grid.LayoutFormat !== null && this.Grid.LayoutFormat.paginateBounds.height > 0) {\n                            isFit = this.isFitToCell((this.currentBounds.height + this.startLocation.y) - this.currentBounds.y, this.Grid, row);\n                        }\n                        else\n                            isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n                        if (isFit) {\n                            this.isPaginate = true;\n                        }\n                    }\n                    else if (this.Grid.allowRowBreakAcrossPages && this.Grid.LayoutFormat != null && this.Grid.LayoutFormat.layout == PdfLayoutType.Paginate && this.Grid.LayoutFormat.break != PdfLayoutBreakType.FitElement && row.isRowHeightSet && this.currentBounds.y + height > this.currentPageBounds.height) {\n                        isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n                        if (!isFit)\n                            isFit = !(this.slr !== null && this.slr.actualSize.height == 0 && this.slr.remainder != null && this.slr.remainder.length > 0 && this.remainderText == this.slr.remainder);\n                        if (isFit && this.slr != null && this.slr.lineCount > 1) {\n                            //It may text cutoff issue\n                            isFit = false;\n                        }\n                        this.remainderText = null;\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex || isFit) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                            if (row.grid.splitChildRowIndex !== -1) {\n                                result_1.isFinish = false;\n                            }\n                        }\n                        else {\n                            result_1.isFinish = false;\n                            this.drawRow(row, result_1, calculatedHeight);\n                        }\n                    }\n                    else {\n                        result_1.isFinish = false;\n                    }\n                }\n                else {\n                    result_1.isFinish = true;\n                    this.drawRow(row, result_1, calculatedHeight);\n                    row.repeatFlag = false;\n                }\n            }\n            return result_1;\n        }\n        else {\n            var skipcell = false;\n            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n            //                 this.currentPage.getClientSize().width) {\n            //     location.x = this.startLocation.x;\n            // }\n            result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n            height = this.ReCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));\n                // let cancelSpans : boolean = false;\n                if (!cancelSpans) {\n                    for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(this.Grid.columns.getColumn(i).width, height);\n                // if (size.width > this.currentGraphics.clientSize.width) {\n                //     size.width = this.currentGraphics.clientSize.width;\n                // }\n                // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n                //     if (size.width >= this.currentGraphics.clientSize.width) {\n                //         size.width -= 2 * this.currentBounds.x;\n                //     }\n                // }\n                /* tslint:disable */\n                if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n                    row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n                }\n                var cellstyle = row.cells.getCell(i).style;\n                var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);\n                //row.cells.getCell(i).style = cellstyle;\n                if (!skipcell) {\n                    if (row.cells.getCell(i).value instanceof PdfGrid) {\n                        var grid = row.cells.getCell(i).value;\n                        grid.parentCellIndex = i;\n                    }\n                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex ||\n                        i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                        row.rowOverflowIndex = this.cellEndIndex;\n                    }\n                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan >\n                        this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) &&\n                        row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ?\n                            stringResult.remainder : '' : '';\n                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n                    }\n                }\n                /* tslint:enable */\n                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                if (!cancelSpans) {\n                    this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n                }\n                if (row.cells.getCell(i).value instanceof PdfGrid) {\n                    var grid = row.cells.getCell(i).value;\n                    if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                        location_4.x = grid.rowLayoutBoundsWidth;\n                        location_4.x += grid.style.cellSpacing;\n                    }\n                    else {\n                        location_4.x += this.Grid.columns.getColumn(i).width;\n                    }\n                }\n                else {\n                    location_4.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            if (!row.rowMergeComplete || row.isRowHeightSet) {\n                this.currentBounds.y += height;\n            }\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n        }\n    };\n    PdfGridLayouter.prototype.isFitToCell = function (currentHeight, grid, gridRow) {\n        var isFit = false;\n        var layouter = new PdfStringLayouter();\n        for (var i = 0; i < gridRow.cells.count; i++) {\n            var cell = gridRow.cells.getCell(i);\n            if (typeof cell.value !== 'undefined' && cell.value !== null && typeof cell.value === 'string') {\n                var font = null;\n                if (typeof cell.style.font !== 'undefined' && cell.style.font != null) {\n                    font = cell.style.font;\n                }\n                else if (typeof cell.row.style.font !== 'undefined' && cell.row.style.font != null) {\n                    font = cell.row.style.font;\n                }\n                else if (typeof cell.row.grid.style.font !== 'undefined' && cell.row.grid.style.font != null) {\n                    font = cell.row.grid.style.font;\n                }\n                else {\n                    font = PdfDocument.defaultFont;\n                }\n                this.remainderText = gridRow.cells.getCell(i).value;\n                var width = gridRow.cells.getCell(i).width;\n                if (grid.columns.getColumn(i).isCustomWidth && gridRow.cells.getCell(i).width > grid.columns.getColumn(i).width) {\n                    width = grid.columns.getColumn(i).width;\n                }\n                this.slr = layouter.layout(gridRow.cells.getCell(i).value, font, gridRow.cells.getCell(i).stringFormat, new SizeF(width, currentHeight), false, this.currentPageBounds);\n                var height = this.slr.actualSize.height;\n                if (height == 0) {\n                    isFit = false;\n                    break;\n                }\n                if (gridRow.cells.getCell(i).style != null && gridRow.cells.getCell(i).style.borders != null && gridRow.cells.getCell(i).style.borders.top != null && gridRow.cells.getCell(i).style.borders.bottom != null)\n                    height += (gridRow.cells.getCell(i).style.borders.top.width + gridRow.cells.getCell(i).style.borders.bottom.width) * 2;\n                if (this.slr.lineCount > 1 && gridRow.cells.getCell(i).stringFormat != null && gridRow.cells.getCell(i).stringFormat.lineSpacing != 0)\n                    height += (this.slr.lineCount - 1) * (gridRow.cells.getCell(i).style.stringFormat.lineSpacing);\n                if (gridRow.cells.getCell(i).style.cellPadding == null) {\n                    height += (grid.style.cellPadding.top + grid.style.cellPadding.bottom);\n                }\n                else {\n                    height += (grid.style.cellPadding.top + grid.style.cellPadding.bottom);\n                }\n                height += grid.style.cellSpacing;\n                if (currentHeight > height || (typeof this.slr.remainder !== 'undefined' && this.slr.remainder !== null)) {\n                    isFit = true;\n                    break;\n                }\n            }\n        }\n        return isFit;\n    };\n    PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n            location.x = this.startLocation.x;\n        }\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;\n        // Calculate the remaining height.\n        if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n            row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n        }\n        // else {\n        //     row.rowBreakHeight = calculateHeight;\n        //     result.isFinish = false;\n        //     return;\n        // }\n        // No need to explicit break if the row height is equal to grid height.\n        for (var i = 0; i < row.cells.count; i++) {\n            var cell = row.cells.getCell(i);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n                row.rowBreakHeight = 0;\n            }\n            // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n            //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n            // }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var cancelSpans = ((row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1) &&\n                (row.cells.getCell(i).columnSpan > 1));\n            // if (!cancelSpans) {\n            //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n            //         row.cells.getCell(i + k).isCellMergeContinue = true;\n            //     }\n            //}\n            var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight :\n                this.currentPageBounds.height);\n            // if (size.width === 0) {\n            //     size = new SizeF(row.cells.getCell(i).width, size.height);\n            // }\n            // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n            //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n            //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n            // }\n            var cellstyle1 = row.cells.getCell(i).style;\n            row.cells.getCell(i).style = cellstyle1;\n            var skipcell = false;\n            var stringResult = null;\n            if (!skipcell) {\n                stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n            }\n            //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n            if (row.rowBreakHeight > 0.0) {\n                if (stringResult != null && typeof stringResult.remainder !== 'undefined') {\n                    row.cells.getCell(i).FinishedDrawingCell = false;\n                    row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n                    row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n                }\n            }\n            result.isFinish = (!result.isFinish) ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;\n            // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n            //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n            // if (!cancelSpans) {\n            //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n            //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n            //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n            //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n            //                             row.cells.getCell(i).style);\n            //     }                \n            if (row.cells.getCell(i).value instanceof PdfGrid) {\n                var grid = row.cells.getCell(i).value;\n                this.rowBreakPageHeightCellIndex = i;\n                // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n                // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n                //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n                //             this.Grid.listOfNavigatePages.push(pageIndex);\n                //     }\n                if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                    location.x = this.rowLayoutBoundsWidth;\n                    location.x += grid.style.cellSpacing;\n                }\n                else {\n                    location.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            else {\n                location.x += this.Grid.columns.getColumn(i).width;\n            }\n        }\n        this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    PdfGridLayouter.repeatRowIndex = -1;\n    return PdfGridLayouter;\n}(ElementLayouter));\nexport { PdfGridLayouter };\n// recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\nvar PdfGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutResult, _super);\n    /**\n     * Constructor\n     * @private\n     */\n    function PdfGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     * @private\n     */\n    function PdfGridLayoutFormat(baseFormat) {\n        return _super.call(this, baseFormat) || this;\n    }\n    return PdfGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfGridLayoutFormat };\nvar GridCellEventArgs = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initialize a new instance for `GridCellEventArgs` class.\n     * @private\n     */\n    function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n        this.gridRowIndex = rowIndex;\n        this.gridCellIndex = cellIndex;\n        this.internalValue = value;\n        this.gridBounds = bounds;\n        this.pdfGraphics = graphics;\n    }\n    Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n        // Properties\n        /**\n         * Gets the value of current `row index`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n        /**\n         * Gets the value of current `cell index`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n        /**\n         * Gets the actual `value` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n        /**\n         * Gets the `bounds` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.gridBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n        /**\n         * Gets the instance of `current graphics`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GridCellEventArgs;\n}());\nexport { GridCellEventArgs };\nvar PdfGridBeginCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.style = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n        // Properties\n        /**\n         * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n         * @private\n         */\n        get: function () {\n            return this.bSkip;\n        },\n        set: function (value) {\n            this.bSkip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n        /**\n         * Gets or sets a `style` value of the cell.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridBeginCellDrawEventArgs };\nvar PdfGridEndCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.cellStyle = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n        // Propertise\n        /**\n         * Get the `PdfGridCellStyle`.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridEndCellDrawEventArgs };\nvar PdfCancelEventArgs = /** @class */ (function () {\n    function PdfCancelEventArgs() {\n    }\n    Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n        // Properties\n        /**\n         * Gets and Sets the value of `cancel`.\n         * @private\n         */\n        get: function () {\n            return this.isCancel;\n        },\n        set: function (value) {\n            this.isCancel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCancelEventArgs;\n}());\nexport { PdfCancelEventArgs };\nvar BeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(BeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n     * @private\n     */\n    function BeginPageLayoutEventArgs(bounds, page) {\n        var _this = _super.call(this) || this;\n        _this.bounds = bounds;\n        _this.pdfPage = page;\n        return _this;\n    }\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n        // Properties\n        /**\n         * Gets or sets value that indicates the lay outing `bounds` on the page.\n         * @private\n         */\n        get: function () {\n            return this.cellBounds;\n        },\n        set: function (value) {\n            this.cellBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n        /**\n         * Gets the `page` where the lay outing should start.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nvar EndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(EndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n     * @private\n     */\n    function EndPageLayoutEventArgs(result) {\n        var _this = _super.call(this) || this;\n        _this.layoutResult = result;\n        return _this;\n    }\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n        // Properties\n        /**\n         * Gets the lay outing `result` of the page.\n         * @private\n         */\n        get: function () {\n            return this.layoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n        /**\n         * Gets or sets a value indicating the `next page` where the element should be layout.\n         * @private\n         */\n        get: function () {\n            return this.nextPdfPage;\n        },\n        set: function (value) {\n            this.nextPdfPage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridBeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n        var _this = _super.call(this, bounds, page) || this;\n        _this.startRow = startRow;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n        // Properties\n        /**\n         * Gets the `start row index`.\n         * @private\n         */\n        get: function () {\n            return this.startRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs));\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridEndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndPageLayoutEventArgs(result) {\n        return _super.call(this, result) || this;\n    }\n    return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs));\nexport { PdfGridEndPageLayoutEventArgs };\nvar RowLayoutResult = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `RowLayoutResult` class.\n     * @private\n     */\n    function RowLayoutResult() {\n        this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n    }\n    Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is finish`.\n         * @private\n         */\n        get: function () {\n            return this.bIsFinished;\n        },\n        set: function (value) {\n            this.bIsFinished = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets or sets the `bounds`.\n         * @private\n         */\n        get: function () {\n            return this.layoutedBounds;\n        },\n        set: function (value) {\n            this.layoutedBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RowLayoutResult;\n}());\nexport { RowLayoutResult };\n"],"mappings":"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AACG,CAAC;QACzCgC,SAAS,GAAG,IAAI,CAACpD,WAAW;QAC5BlC,eAAe,CAAC2G,cAAc,GAAG,CAAC,CAAC;QACnC,IAAI5F,IAAI,IAAImF,GAAG,CAACmB,IAAI,CAAC3G,WAAW,EAAE;UAC9ByG,cAAc,GAAGC,cAAc;UAC/BrG,IAAI,GAAG,KAAK;QAChB;QACA,IAAIuG,SAAS,GAAG,IAAI;QACpB;QACA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACgB,IAAI,IAAI,CAAC/D,IAAI,CAACgE,kBAAkB,IAAI,CAAC,CAAC,EAAE;UACpCD,SAAS,GAAG,IAAI,CAACZ,OAAO,CAACR,GAAG,CAAC;UAC7BA,GAAG,CAACsB,WAAW,GAAG,IAAI;QAC1B,CAAC,MACI;UACD,IAAItB,GAAG,CAACmB,IAAI,CAACI,UAAU,CAACvB,GAAG,CAACmB,IAAI,CAACK,WAAW,IAAI,IAAI,CAACnE,IAAI,CAACgE,kBAAkB,IAAIrB,GAAG,CAACyB,QAAQ,EAAE;YAC1FL,SAAS,GAAG,IAAI,CAACZ,OAAO,CAACR,GAAG,CAAC;YAC7BA,GAAG,CAACsB,WAAW,GAAG,IAAI;UAC1B,CAAC,MACI,IAAItB,GAAG,CAACsB,WAAW,EAAE;YACtB;UACJ,CAAC,MACI;YACD;UACJ;QACJ;QACA;QACAhC,UAAU,CAACxC,IAAI,CAACsE,SAAS,CAAClE,MAAM,CAACZ,KAAK,CAAC;QACvC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QAGgB;QACA,IAAI4E,cAAc,KAAK,IAAI,CAACjE,aAAa,CAACG,CAAC,EAAE;UA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"},"metadata":{},"sourceType":"module"}