{"ast":null,"code":"import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfString } from './../primitives/pdf-string';\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\nvar PdfReference = /** @class */function () {\n  function PdfReference(objNumber, genNumber) {\n    /**\n     * Holds the `index` number of the object.\n     * @default -1\n     * @private\n     */\n    this.index3 = -1;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n    this.position3 = -1;\n    /**\n     * Holds the `object number`.\n     * @default 0\n     * @private\n     */\n    this.objNumber = 0;\n    /**\n     * Holds the `generation number` of the object.\n     * @default 0\n     * @private\n     */\n    this.genNumber = 0;\n    if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n      this.objNumber = objNumber;\n      this.genNumber = genNumber;\n      // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n    } else {\n      this.objNumber = Number(objNumber);\n      this.genNumber = Number(genNumber);\n    }\n  }\n  Object.defineProperty(PdfReference.prototype, \"status\", {\n    //Property\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status3;\n    },\n    set: function (value) {\n      this.status3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving3;\n    },\n    set: function (value) {\n      this.isSaving3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index3;\n    },\n    set: function (value) {\n      this.index3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position3;\n    },\n    set: function (value) {\n      this.position3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      var returnObject3 = null;\n      return returnObject3;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //IPdfPrimitives methods\n  /**\n   * `Saves` the object.\n   * @private\n   */\n  PdfReference.prototype.save = function (writer) {\n    writer.write(this.toString());\n  };\n  /**\n   * Returns a `string` representing the object.\n   * @private\n   */\n  PdfReference.prototype.toString = function () {\n    return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n  };\n  /**\n   * Creates a `deep copy` of the IPdfPrimitive object.\n   * @private\n   */\n  PdfReference.prototype.clone = function (crossTable) {\n    return null;\n  };\n  return PdfReference;\n}();\nexport { PdfReference };\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\nvar PdfReferenceHolder = /** @class */function () {\n  function PdfReferenceHolder(obj1, obj2) {\n    /**\n     * Holds the `index` number of the object.\n     * @default -1\n     * @private\n     */\n    this.index4 = -1;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n    this.position4 = -1;\n    /**\n     * The `index` of the object within the object collection.\n     * @default -1\n     * @private\n     */\n    this.objectIndex = -1;\n    /**\n     * @hidden\n     * @private\n     */\n    this.dictionaryProperties = new DictionaryProperties();\n    // if (typeof obj2 === 'undefined') {\n    this.initialize(obj1);\n    // }\n    // else {\n    //     if (obj2 === null) {\n    //         throw new Error('ArgumentNullException : crossTable');\n    //     }\n    //     if (obj1 === null) {\n    //         throw new Error('ArgumentNullException : reference');\n    //     }\n    //     this.crossTable = obj2;\n    //     let tempObj1 : PdfReference = <PdfReference>obj1;\n    //     this.reference = tempObj1;\n    // }\n  }\n\n  Object.defineProperty(PdfReferenceHolder.prototype, \"status\", {\n    //Properties\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status4;\n    },\n    set: function (value) {\n      this.status4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving4;\n    },\n    set: function (value) {\n      this.isSaving4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index4;\n    },\n    set: function (value) {\n      this.index4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position4;\n    },\n    set: function (value) {\n      this.position4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"object\", {\n    /**\n     * Gets the `object` the reference is of.\n     * @private\n     */\n    get: function () {\n      // if ((this.reference != null) || (this.object == null)) {\n      //     this.object = this.GetterObject();\n      // }\n      return this.primitiveObject;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"reference\", {\n    /**\n     * Gets the `reference`.\n     * @private\n     */\n    get: function () {\n      return this.pdfReference;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"index\", {\n    /**\n     * Gets the `index` of the object.\n     * @private\n     */\n    get: function () {\n      // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n      // this.objectIndex = items.GetObjectIndex(this.reference);\n      // if (this.objectIndex < 0) {\n      //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n      //     this.objectIndex = items.Count - 1;\n      // }\n      return this.objectIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"element\", {\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.primitiveObject;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfReferenceHolder.prototype.initialize = function (obj1) {\n    if (obj1 instanceof PdfArray || obj1 instanceof PdfDictionary || obj1 instanceof PdfName || obj1 instanceof PdfNumber || obj1 instanceof PdfStream || obj1 instanceof PdfReference || obj1 instanceof PdfString) {\n      this.primitiveObject = obj1;\n    } else {\n      var tempObj = obj1;\n      this.initialize(tempObj.element);\n    }\n  };\n  /**\n   * `Writes` a reference into a PDF document.\n   * @private\n   */\n  PdfReferenceHolder.prototype.save = function (writer) {\n    // if (writer == null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    var position = writer.position;\n    var cTable = writer.document.crossTable;\n    // if (cTable.Document instanceof PdfDocument) {\n    this.object.isSaving = true;\n    // }\n    var reference = null;\n    // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n    //     if (this.reference === null) {\n    //         reference = cTable.GetReference(this.Object);\n    //     } else {\n    //         reference = this.reference;\n    //     }\n    // } else {\n    //     reference = cTable.GetReference(this.Object);\n    // }\n    // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n    reference = cTable.getReference(this.object);\n    // }\n    // if (writer.Position !== position) {\n    //     writer.Position = position;\n    // }\n    reference.save(writer);\n  };\n  /**\n   * Creates a `copy of PdfReferenceHolder`.\n   * @private\n   */\n  PdfReferenceHolder.prototype.clone = function (crossTable) {\n    var refHolder = null;\n    var temp = null;\n    var refNum = '';\n    var reference = null;\n    // Restricts addition of same object multiple time.\n    /* if (this.Reference != null && this.crossTable != null && this.crossTable.PageCorrespondance.containsKey(this.Reference)) {\n        refHolder = new PdfReferenceHolder(this.crossTable.PageCorrespondance.getValue(this.Reference) as PdfReference, crossTable);\n        return refHolder;\n    }\n    if (Object instanceof PdfNumber) {\n        return new PdfNumber((Object as PdfNumber).IntValue);\n    }\n    */\n    // if (Object instanceof PdfDictionary) {\n    //     // Meaning the referenced page is not available for import.\n    //     let type : PdfName = new PdfName(this.dictionaryProperties.type);\n    //     let dict : PdfDictionary = Object as PdfDictionary;\n    //     if (dict.ContainsKey(type)) {\n    //         let pageName : PdfName = dict.Items.getValue(type.Value) as PdfName;\n    //         if (pageName !== null) {\n    //             if (pageName.Value === 'Page') {\n    //                 return new PdfNull();\n    //             }\n    //         }\n    //     }\n    // }\n    /* if (Object instanceof PdfName) {\n        return new PdfName ((Object as PdfName ).Value);\n    }\n    */\n    // Resolves circular references.\n    // if (crossTable.PrevReference !== null && (crossTable.PrevReference.indexOf(this.Reference) !== -1)) {\n    //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.Reference).ClonedObject;\n    //     if (obj !== null) {\n    //         reference = crossTable.GetReference(obj);\n    //         return new PdfReferenceHolder(reference, crossTable);\n    //     } else {\n    //         return new PdfNull();\n    //     }\n    // }\n    /*if (this.Reference !== null) {\n        crossTable.PrevReference.push(this.Reference);\n    }\n    reference = crossTable.GetReference(temp);\n    refHolder = new PdfReferenceHolder(reference, crossTable);\n    return refHolder;\n    */\n    return null;\n  };\n  return PdfReferenceHolder;\n}();\nexport { PdfReferenceHolder };","map":{"version":3,"names":["DictionaryProperties","PdfStream","PdfArray","PdfNumber","PdfName","PdfDictionary","PdfString","PdfReference","objNumber","genNumber","index3","position3","Number","Object","defineProperty","prototype","get","status3","set","value","enumerable","configurable","isSaving3","returnObject3","save","writer","write","toString","clone","crossTable","PdfReferenceHolder","obj1","obj2","index4","position4","objectIndex","dictionaryProperties","initialize","status4","isSaving4","primitiveObject","pdfReference","tempObj","element","position","cTable","document","object","isSaving","reference","getReference","refHolder","temp","refNum"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-reference.js"],"sourcesContent":["import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfString } from './../primitives/pdf-string';\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\nvar PdfReference = /** @class */ (function () {\n    function PdfReference(objNumber, genNumber) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index3 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position3 = -1;\n        /**\n         * Holds the `object number`.\n         * @default 0\n         * @private\n         */\n        this.objNumber = 0;\n        /**\n         * Holds the `generation number` of the object.\n         * @default 0\n         * @private\n         */\n        this.genNumber = 0;\n        if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n            this.objNumber = objNumber;\n            this.genNumber = genNumber;\n            // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n        }\n        else {\n            this.objNumber = Number(objNumber);\n            this.genNumber = Number(genNumber);\n        }\n    }\n    Object.defineProperty(PdfReference.prototype, \"status\", {\n        //Property\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status3;\n        },\n        set: function (value) {\n            this.status3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving3;\n        },\n        set: function (value) {\n            this.isSaving3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index3;\n        },\n        set: function (value) {\n            this.index3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position3;\n        },\n        set: function (value) {\n            this.position3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            var returnObject3 = null;\n            return returnObject3;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //IPdfPrimitives methods\n    /**\n     * `Saves` the object.\n     * @private\n     */\n    PdfReference.prototype.save = function (writer) {\n        writer.write(this.toString());\n    };\n    /**\n     * Returns a `string` representing the object.\n     * @private\n     */\n    PdfReference.prototype.toString = function () {\n        return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n    };\n    /**\n     * Creates a `deep copy` of the IPdfPrimitive object.\n     * @private\n     */\n    PdfReference.prototype.clone = function (crossTable) {\n        return null;\n    };\n    return PdfReference;\n}());\nexport { PdfReference };\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\nvar PdfReferenceHolder = /** @class */ (function () {\n    function PdfReferenceHolder(obj1, obj2) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index4 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position4 = -1;\n        /**\n         * The `index` of the object within the object collection.\n         * @default -1\n         * @private\n         */\n        this.objectIndex = -1;\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // if (typeof obj2 === 'undefined') {\n        this.initialize(obj1);\n        // }\n        // else {\n        //     if (obj2 === null) {\n        //         throw new Error('ArgumentNullException : crossTable');\n        //     }\n        //     if (obj1 === null) {\n        //         throw new Error('ArgumentNullException : reference');\n        //     }\n        //     this.crossTable = obj2;\n        //     let tempObj1 : PdfReference = <PdfReference>obj1;\n        //     this.reference = tempObj1;\n        // }\n    }\n    Object.defineProperty(PdfReferenceHolder.prototype, \"status\", {\n        //Properties\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status4;\n        },\n        set: function (value) {\n            this.status4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving4;\n        },\n        set: function (value) {\n            this.isSaving4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index4;\n        },\n        set: function (value) {\n            this.index4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position4;\n        },\n        set: function (value) {\n            this.position4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"object\", {\n        /**\n         * Gets the `object` the reference is of.\n         * @private\n         */\n        get: function () {\n            // if ((this.reference != null) || (this.object == null)) {\n            //     this.object = this.GetterObject();\n            // }\n            return this.primitiveObject;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"reference\", {\n        /**\n         * Gets the `reference`.\n         * @private\n         */\n        get: function () {\n            return this.pdfReference;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"index\", {\n        /**\n         * Gets the `index` of the object.\n         * @private\n         */\n        get: function () {\n            // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n            // this.objectIndex = items.GetObjectIndex(this.reference);\n            // if (this.objectIndex < 0) {\n            //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n            //     this.objectIndex = items.Count - 1;\n            // }\n            return this.objectIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"element\", {\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.primitiveObject;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfReferenceHolder.prototype.initialize = function (obj1) {\n        if (obj1 instanceof PdfArray\n            || obj1 instanceof PdfDictionary\n            || obj1 instanceof PdfName\n            || obj1 instanceof PdfNumber\n            || obj1 instanceof PdfStream\n            || obj1 instanceof PdfReference\n            || obj1 instanceof PdfString) {\n            this.primitiveObject = obj1;\n        }\n        else {\n            var tempObj = obj1;\n            this.initialize(tempObj.element);\n        }\n    };\n    /**\n     * `Writes` a reference into a PDF document.\n     * @private\n     */\n    PdfReferenceHolder.prototype.save = function (writer) {\n        // if (writer == null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        var position = writer.position;\n        var cTable = writer.document.crossTable;\n        // if (cTable.Document instanceof PdfDocument) {\n        this.object.isSaving = true;\n        // }\n        var reference = null;\n        // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n        //     if (this.reference === null) {\n        //         reference = cTable.GetReference(this.Object);\n        //     } else {\n        //         reference = this.reference;\n        //     }\n        // } else {\n        //     reference = cTable.GetReference(this.Object);\n        // }\n        // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n        reference = cTable.getReference(this.object);\n        // }\n        // if (writer.Position !== position) {\n        //     writer.Position = position;\n        // }\n        reference.save(writer);\n    };\n    /**\n     * Creates a `copy of PdfReferenceHolder`.\n     * @private\n     */\n    PdfReferenceHolder.prototype.clone = function (crossTable) {\n        var refHolder = null;\n        var temp = null;\n        var refNum = '';\n        var reference = null;\n        // Restricts addition of same object multiple time.\n        /* if (this.Reference != null && this.crossTable != null && this.crossTable.PageCorrespondance.containsKey(this.Reference)) {\n            refHolder = new PdfReferenceHolder(this.crossTable.PageCorrespondance.getValue(this.Reference) as PdfReference, crossTable);\n            return refHolder;\n        }\n        if (Object instanceof PdfNumber) {\n            return new PdfNumber((Object as PdfNumber).IntValue);\n        }\n        */\n        // if (Object instanceof PdfDictionary) {\n        //     // Meaning the referenced page is not available for import.\n        //     let type : PdfName = new PdfName(this.dictionaryProperties.type);\n        //     let dict : PdfDictionary = Object as PdfDictionary;\n        //     if (dict.ContainsKey(type)) {\n        //         let pageName : PdfName = dict.Items.getValue(type.Value) as PdfName;\n        //         if (pageName !== null) {\n        //             if (pageName.Value === 'Page') {\n        //                 return new PdfNull();\n        //             }\n        //         }\n        //     }\n        // }\n        /* if (Object instanceof PdfName) {\n            return new PdfName ((Object as PdfName ).Value);\n        }\n        */\n        // Resolves circular references.\n        // if (crossTable.PrevReference !== null && (crossTable.PrevReference.indexOf(this.Reference) !== -1)) {\n        //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.Reference).ClonedObject;\n        //     if (obj !== null) {\n        //         reference = crossTable.GetReference(obj);\n        //         return new PdfReferenceHolder(reference, crossTable);\n        //     } else {\n        //         return new PdfNull();\n        //     }\n        // }\n        /*if (this.Reference !== null) {\n            crossTable.PrevReference.push(this.Reference);\n        }\n        reference = crossTable.GetReference(temp);\n        refHolder = new PdfReferenceHolder(reference, crossTable);\n        return refHolder;\n        */\n        return null;\n    };\n    return PdfReferenceHolder;\n}());\nexport { PdfReferenceHolder };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}