{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro16/Desktop/cs222/client/src/maps/map.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: \"/features.json\",\n      children: _ref => {\n        let {\n          geographies\n        } = _ref;\n        return geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this);\n_c = WorldMap;\nexport default WorldMap;\n\n/**\n * import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\n\nconst geoUrl = \"/features.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then((data) => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const d = data.find((s) => s.ISO3 === geo.id);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n\n */\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","ReactDOM","ComposableMap","Geographies","Geography","WorldMap","geographies","map","geo","rsmKey"],"sources":["/Users/macbookpro16/Desktop/cs222/client/src/maps/map.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\n\nimport \"./styles.css\";\n\nconst WorldMap = () => (\n  <div>\n    <ComposableMap>\n      <Geographies geography=\"/features.json\">\n        {({ geographies }) =>\n          geographies.map((geo) => (\n            <Geography key={geo.rsmKey} geography={geo} />\n          ))\n        }\n      </Geographies>\n    </ComposableMap>\n  </div>\n);\n\nexport default WorldMap;\n\n/**\n * import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\n\nconst geoUrl = \"/features.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then((data) => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const d = data.find((s) => s.ISO3 === geo.id);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n\n */"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,aAAa,EAAEC,WAAW,EAAEC,SAAS,QAAQ,mBAAmB;AAEzE,OAAO,cAAc;AAAC;AAEtB,MAAMC,QAAQ,GAAG,mBACf;EAAA,uBACE,QAAC,aAAa;IAAA,uBACZ,QAAC,WAAW;MAAC,SAAS,EAAC,gBAAgB;MAAA,UACpC;QAAA,IAAC;UAAEC;QAAY,CAAC;QAAA,OACfA,WAAW,CAACC,GAAG,CAAEC,GAAG,iBAClB,QAAC,SAAS;UAAkB,SAAS,EAAEA;QAAI,GAA3BA,GAAG,CAACC,MAAM;UAAA;UAAA;UAAA;QAAA,QAC3B,CAAC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAEQ;IAAA;IAAA;IAAA;EAAA;AACA;EAAA;EAAA;EAAA;AAAA,QAEnB;AAAC,KAZIJ,QAAQ;AAcd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA;AAAA"},"metadata":{},"sourceType":"module"}