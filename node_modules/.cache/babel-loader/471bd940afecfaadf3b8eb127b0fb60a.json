{"ast":null,"code":"import { PdfPage } from './pdf-page';\nimport { Dictionary } from './../collections/dictionary';\n/**\n * Represents a virtual collection of all the pages in the document.\n * @private\n */\nvar PdfDocumentPageCollection = /** @class */function () {\n  //constructor\n  /**\n   * Initializes a new instance of the `PdfPageCollection` class.\n   * @private\n   */\n  function PdfDocumentPageCollection(document) {\n    /**\n     * It holds the page collection with the `index`.\n     * @private\n     */\n    this.pdfPageCollectionIndex = new Dictionary();\n    this.document = document;\n  }\n  Object.defineProperty(PdfDocumentPageCollection.prototype, \"count\", {\n    //Property\n    /**\n     * Gets the total `number of the pages`.\n     * @private\n     */\n    get: function () {\n      return this.countPages();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentPageCollection.prototype, \"pageCollectionIndex\", {\n    /**\n     * Gets a `page index` from the document.\n     * @private\n     */\n    get: function () {\n      return this.pdfPageCollectionIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfDocumentPageCollection.prototype.add = function (page) {\n    if (typeof page === 'undefined') {\n      var page_1 = new PdfPage();\n      this.add(page_1);\n      return page_1;\n    } else {\n      var section = this.getLastSection();\n      section.add(page);\n    }\n  };\n  /**\n   * Returns `last section` in the document.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.getLastSection = function () {\n    var sc = this.document.sections;\n    if (sc.section.length === 0) {\n      sc.add();\n    }\n    var section = sc.section[sc.section.length - 1];\n    return section;\n  };\n  /**\n   * Called when `new page has been added`.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.onPageAdded = function (args) {\n    // if (PageAdded !== null)\n    // {\n    //     PageAdded(this, args);\n    // }\n  };\n  /**\n   * Gets the `total number of pages`.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.countPages = function () {\n    var sc = this.document.sections;\n    var count = 0;\n    for (var index = 0; index < sc.section.length; index++) {\n      count += sc.section[index].count;\n    }\n    return count;\n  };\n  /**\n   * Gets the `page object` from page index.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.getPageByIndex = function (index) {\n    return this.getPage(index);\n  };\n  /**\n   * Gets a page by its `index` in the document.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.getPage = function (index) {\n    if (index < 0 || index >= this.count) {\n      throw Error('ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\")');\n    }\n    var page = null;\n    var sectionStartIndex = 0;\n    var sectionCount = 0;\n    var pageIndex = 0;\n    var length = this.document.sections.count;\n    for (var i = 0; i < length; i++) {\n      var section = this.document.sections.section[i];\n      sectionCount = section.count;\n      pageIndex = index - sectionStartIndex;\n      // We found a section containing the page.\n      if (index >= sectionStartIndex && pageIndex < sectionCount) {\n        page = section.getPages()[pageIndex];\n        break;\n      }\n      sectionStartIndex += sectionCount;\n    }\n    return page;\n  };\n  /**\n   * Gets the `index of` the page in the document.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.indexOf = function (page) {\n    var index = -1;\n    if (page == null) {\n      throw new Error('ArgumentNullException: page');\n    } else {\n      var numPages = 0;\n      for (var i = 0, len = this.document.sections.count; i < len; i++) {\n        var section = this.document.sections.pdfSectionCollection(i);\n        index = section.indexOf(page);\n        if (index >= 0) {\n          index += numPages;\n          break;\n        } else {\n          index = -1;\n        }\n        numPages += section.count;\n      }\n    }\n    return index;\n  };\n  /**\n   * `Removes` the specified page.\n   * @private\n   */\n  PdfDocumentPageCollection.prototype.remove = function (page) {\n    if (page == null) {\n      throw Error('ArgumentNullException(\"page\")');\n    }\n    var section = null;\n    var len;\n    for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {\n      section = this.document.sections.pdfSectionCollection(i);\n      if (section.pages.contains(page)) {\n        section.pages.remove(page);\n        break;\n      }\n    }\n    return section;\n  };\n  return PdfDocumentPageCollection;\n}();\nexport { PdfDocumentPageCollection };","map":{"version":3,"names":["PdfPage","Dictionary","PdfDocumentPageCollection","document","pdfPageCollectionIndex","Object","defineProperty","prototype","get","countPages","enumerable","configurable","add","page","page_1","section","getLastSection","sc","sections","length","onPageAdded","args","count","index","getPageByIndex","getPage","Error","sectionStartIndex","sectionCount","pageIndex","i","getPages","indexOf","numPages","len","pdfSectionCollection","remove","len_1","pages","contains"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-document-page-collection.js"],"sourcesContent":["import { PdfPage } from './pdf-page';\nimport { Dictionary } from './../collections/dictionary';\n/**\n * Represents a virtual collection of all the pages in the document.\n * @private\n */\nvar PdfDocumentPageCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfPageCollection` class.\n     * @private\n     */\n    function PdfDocumentPageCollection(document) {\n        /**\n         * It holds the page collection with the `index`.\n         * @private\n         */\n        this.pdfPageCollectionIndex = new Dictionary();\n        this.document = document;\n    }\n    Object.defineProperty(PdfDocumentPageCollection.prototype, \"count\", {\n        //Property\n        /**\n         * Gets the total `number of the pages`.\n         * @private\n         */\n        get: function () {\n            return this.countPages();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentPageCollection.prototype, \"pageCollectionIndex\", {\n        /**\n         * Gets a `page index` from the document.\n         * @private\n         */\n        get: function () {\n            return this.pdfPageCollectionIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfDocumentPageCollection.prototype.add = function (page) {\n        if (typeof page === 'undefined') {\n            var page_1 = new PdfPage();\n            this.add(page_1);\n            return page_1;\n        }\n        else {\n            var section = this.getLastSection();\n            section.add(page);\n        }\n    };\n    /**\n     * Returns `last section` in the document.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.getLastSection = function () {\n        var sc = this.document.sections;\n        if (sc.section.length === 0) {\n            sc.add();\n        }\n        var section = sc.section[sc.section.length - 1];\n        return section;\n    };\n    /**\n     * Called when `new page has been added`.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.onPageAdded = function (args) {\n        // if (PageAdded !== null)\n        // {\n        //     PageAdded(this, args);\n        // }\n    };\n    /**\n     * Gets the `total number of pages`.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.countPages = function () {\n        var sc = this.document.sections;\n        var count = 0;\n        for (var index = 0; index < sc.section.length; index++) {\n            count += sc.section[index].count;\n        }\n        return count;\n    };\n    /**\n     * Gets the `page object` from page index.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.getPageByIndex = function (index) {\n        return this.getPage(index);\n    };\n    /**\n     * Gets a page by its `index` in the document.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.getPage = function (index) {\n        if ((index < 0) || (index >= this.count)) {\n            throw Error('ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\")');\n        }\n        var page = null;\n        var sectionStartIndex = 0;\n        var sectionCount = 0;\n        var pageIndex = 0;\n        var length = this.document.sections.count;\n        for (var i = 0; i < length; i++) {\n            var section = this.document.sections.section[i];\n            sectionCount = section.count;\n            pageIndex = index - sectionStartIndex;\n            // We found a section containing the page.\n            if ((index >= sectionStartIndex && pageIndex < sectionCount)) {\n                page = section.getPages()[pageIndex];\n                break;\n            }\n            sectionStartIndex += sectionCount;\n        }\n        return page;\n    };\n    /**\n     * Gets the `index of` the page in the document.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.indexOf = function (page) {\n        var index = -1;\n        if (page == null) {\n            throw new Error('ArgumentNullException: page');\n        }\n        else {\n            var numPages = 0;\n            for (var i = 0, len = this.document.sections.count; i < len; i++) {\n                var section = this.document.sections.pdfSectionCollection(i);\n                index = section.indexOf(page);\n                if (index >= 0) {\n                    index += numPages;\n                    break;\n                }\n                else {\n                    index = -1;\n                }\n                numPages += section.count;\n            }\n        }\n        return index;\n    };\n    /**\n     * `Removes` the specified page.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.remove = function (page) {\n        if (page == null) {\n            throw Error('ArgumentNullException(\"page\")');\n        }\n        var section = null;\n        var len;\n        for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {\n            section = this.document.sections.pdfSectionCollection(i);\n            if (section.pages.contains(page)) {\n                section.pages.remove(page);\n                break;\n            }\n        }\n        return section;\n    };\n    return PdfDocumentPageCollection;\n}());\nexport { PdfDocumentPageCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}