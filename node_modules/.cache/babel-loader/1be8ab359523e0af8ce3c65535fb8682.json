{"ast":null,"code":"/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\nvar TtfReader = /** @class */function () {\n  //Constructors\n  function TtfReader(fontData) {\n    this.int32Size = 4;\n    this.isTtcFont = false;\n    this.isMacTtf = false;\n    this.metricsName = '';\n    this.isMacTTF = false;\n    this.missedGlyphs = 0;\n    this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n    this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n    this.fontData = fontData;\n    this.initialize();\n  }\n  Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n    //Properties\n    /**\n     * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n     */\n    get: function () {\n      if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n        this.macintoshDictionary = new Dictionary();\n      }\n      return this.macintoshDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n    /**\n     * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n     */\n    get: function () {\n      if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n        this.microsoftDictionary = new Dictionary();\n      }\n      return this.microsoftDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n    /**\n     * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n     */\n    get: function () {\n      if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n        this.internalMacintoshGlyphs = new Dictionary();\n      }\n      return this.internalMacintoshGlyphs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n    /**\n     * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n     */\n    get: function () {\n      if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n        this.internalMicrosoftGlyphs = new Dictionary();\n      }\n      return this.internalMicrosoftGlyphs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  TtfReader.prototype.initialize = function () {\n    if (this.metrics === undefined) {\n      this.metrics = new TtfMetrics();\n    }\n    this.readFontDictionary();\n    var nameTable = this.readNameTable();\n    var headTable = this.readHeadTable();\n    this.initializeFontName(nameTable);\n    this.metrics.macStyle = headTable.macStyle;\n  };\n  TtfReader.prototype.readFontDictionary = function () {\n    this.offset = 0;\n    var version = this.checkPreambula();\n    //this.offset += 4;\n    var numTables = this.readInt16(this.offset);\n    var searchRange = this.readInt16(this.offset);\n    var entrySelector = this.readInt16(this.offset);\n    var rangeShift = this.readInt16(this.offset);\n    if (this.tableDirectory === undefined) {\n      this.tableDirectory = new Dictionary();\n    }\n    for (var i = 0; i < numTables; ++i) {\n      var table = new TtfTableInfo();\n      var tableKey = this.readString(this.int32Size);\n      table.checksum = this.readInt32(this.offset);\n      table.offset = this.readInt32(this.offset);\n      table.length = this.readInt32(this.offset);\n      this.tableDirectory.setValue(tableKey, table);\n    }\n    this.lowestPosition = this.offset;\n    if (!this.isTtcFont) {\n      this.fixOffsets();\n    }\n  };\n  TtfReader.prototype.fixOffsets = function () {\n    var minOffset = Number.MAX_VALUE;\n    // Search for a smallest offset and compare it with the lowest position found.\n    var tableKeys = this.tableDirectory.keys();\n    for (var i = 0; i < tableKeys.length; i++) {\n      var value = this.tableDirectory.getValue(tableKeys[i]);\n      var offset = value.offset;\n      if (minOffset > offset) {\n        minOffset = offset;\n        if (minOffset <= this.lowestPosition) {\n          break;\n        }\n      }\n    }\n    var shift = minOffset - this.lowestPosition;\n    if (shift !== 0) {\n      var table = new Dictionary();\n      for (var i = 0; i < tableKeys.length; i++) {\n        var value = this.tableDirectory.getValue(tableKeys[i]);\n        value.offset -= shift;\n        table.setValue(tableKeys[i], value);\n      }\n      this.tableDirectory = table;\n    }\n  };\n  TtfReader.prototype.checkPreambula = function () {\n    var version = this.readInt32(this.offset);\n    this.isMacTtf = version === 0x74727565 ? true : false;\n    if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n      this.isTtcFont = true;\n      this.offset = 0;\n      var fontTag = this.readString(4);\n      if (fontTag !== 'ttcf') {\n        throw new Error('Can not read TTF font data');\n      }\n      //skip 4\n      this.offset += 4;\n      var ttcIdentificationNumber = this.readInt32(this.offset);\n      if (ttcIdentificationNumber < 0) {\n        throw new Error('Can not read TTF font data');\n      }\n      this.offset = this.readInt32(this.offset);\n      version = this.readInt32(this.offset);\n    }\n    return version;\n  };\n  TtfReader.prototype.readNameTable = function () {\n    var tableInfo = this.getTable('name');\n    this.offset = tableInfo.offset;\n    var table = new TtfNameTable();\n    table.formatSelector = this.readUInt16(this.offset);\n    table.recordsCount = this.readUInt16(this.offset);\n    table.offset = this.readUInt16(this.offset);\n    table.nameRecords = [];\n    var recordSize = 12;\n    var position = this.offset;\n    for (var i = 0; i < table.recordsCount; i++) {\n      this.offset = position;\n      var record = new TtfNameRecord();\n      record.platformID = this.readUInt16(this.offset);\n      record.encodingID = this.readUInt16(this.offset);\n      record.languageID = this.readUInt16(this.offset);\n      record.nameID = this.readUInt16(this.offset);\n      record.length = this.readUInt16(this.offset);\n      record.offset = this.readUInt16(this.offset);\n      this.offset = tableInfo.offset + table.offset + record.offset;\n      var unicode = record.platformID === 0 || record.platformID === 3;\n      record.name = this.readString(record.length, unicode);\n      table.nameRecords[i] = record;\n      position += recordSize;\n    }\n    return table;\n  };\n  TtfReader.prototype.readHeadTable = function () {\n    var tableInfo = this.getTable('head');\n    this.offset = tableInfo.offset;\n    var table = new TtfHeadTable();\n    table.version = this.readFixed(this.offset);\n    table.fontRevision = this.readFixed(this.offset);\n    table.checkSumAdjustment = this.readUInt32(this.offset);\n    table.magicNumber = this.readUInt32(this.offset);\n    table.flags = this.readUInt16(this.offset);\n    table.unitsPerEm = this.readUInt16(this.offset);\n    table.created = this.readInt64(this.offset);\n    table.modified = this.readInt64(this.offset);\n    table.xMin = this.readInt16(this.offset);\n    table.yMin = this.readInt16(this.offset);\n    table.xMax = this.readInt16(this.offset);\n    table.yMax = this.readInt16(this.offset);\n    table.macStyle = this.readUInt16(this.offset);\n    table.lowestReadableSize = this.readUInt16(this.offset);\n    table.fontDirectionHint = this.readInt16(this.offset);\n    table.indexToLocalFormat = this.readInt16(this.offset);\n    table.glyphDataFormat = this.readInt16(this.offset);\n    return table;\n  };\n  TtfReader.prototype.readHorizontalHeaderTable = function () {\n    var tableInfo = this.getTable('hhea');\n    this.offset = tableInfo.offset;\n    var table = new TtfHorizontalHeaderTable();\n    table.version = this.readFixed(this.offset);\n    table.ascender = this.readInt16(this.offset);\n    table.descender = this.readInt16(this.offset);\n    table.lineGap = this.readInt16(this.offset);\n    table.advanceWidthMax = this.readUInt16(this.offset);\n    table.minLeftSideBearing = this.readInt16(this.offset);\n    table.minRightSideBearing = this.readInt16(this.offset);\n    table.xMaxExtent = this.readInt16(this.offset);\n    table.caretSlopeRise = this.readInt16(this.offset);\n    table.caretSlopeRun = this.readInt16(this.offset);\n    //skip 2 * 5\n    this.offset += 10;\n    table.metricDataFormat = this.readInt16(this.offset);\n    table.numberOfHMetrics = this.readUInt16(this.offset);\n    return table;\n  };\n  TtfReader.prototype.readOS2Table = function () {\n    var tableInfo = this.getTable('OS/2');\n    this.offset = tableInfo.offset;\n    var table = new TtfOS2Table();\n    table.version = this.readUInt16(this.offset);\n    table.xAvgCharWidth = this.readInt16(this.offset);\n    table.usWeightClass = this.readUInt16(this.offset);\n    table.usWidthClass = this.readUInt16(this.offset);\n    table.fsType = this.readInt16(this.offset);\n    table.ySubscriptXSize = this.readInt16(this.offset);\n    table.ySubscriptYSize = this.readInt16(this.offset);\n    table.ySubscriptXOffset = this.readInt16(this.offset);\n    table.ySubscriptYOffset = this.readInt16(this.offset);\n    table.ySuperscriptXSize = this.readInt16(this.offset);\n    table.ySuperscriptYSize = this.readInt16(this.offset);\n    table.ySuperscriptXOffset = this.readInt16(this.offset);\n    table.ySuperscriptYOffset = this.readInt16(this.offset);\n    table.yStrikeoutSize = this.readInt16(this.offset);\n    table.yStrikeoutPosition = this.readInt16(this.offset);\n    table.sFamilyClass = this.readInt16(this.offset);\n    table.panose = this.readBytes(10);\n    table.ulUnicodeRange1 = this.readUInt32(this.offset);\n    table.ulUnicodeRange2 = this.readUInt32(this.offset);\n    table.ulUnicodeRange3 = this.readUInt32(this.offset);\n    table.ulUnicodeRange4 = this.readUInt32(this.offset);\n    table.vendorIdentifier = this.readBytes(4);\n    table.fsSelection = this.readUInt16(this.offset);\n    table.usFirstCharIndex = this.readUInt16(this.offset);\n    table.usLastCharIndex = this.readUInt16(this.offset);\n    table.sTypoAscender = this.readInt16(this.offset);\n    table.sTypoDescender = this.readInt16(this.offset);\n    table.sTypoLineGap = this.readInt16(this.offset);\n    table.usWinAscent = this.readUInt16(this.offset);\n    table.usWinDescent = this.readUInt16(this.offset);\n    table.ulCodePageRange1 = this.readUInt32(this.offset);\n    table.ulCodePageRange2 = this.readUInt32(this.offset);\n    if (table.version > 1) {\n      table.sxHeight = this.readInt16(this.offset);\n      table.sCapHeight = this.readInt16(this.offset);\n      table.usDefaultChar = this.readUInt16(this.offset);\n      table.usBreakChar = this.readUInt16(this.offset);\n      table.usMaxContext = this.readUInt16(this.offset);\n    } else {\n      table.sxHeight = 0;\n      table.sCapHeight = 0;\n      table.usDefaultChar = 0;\n      table.usBreakChar = 0;\n      table.usMaxContext = 0;\n    }\n    return table;\n  };\n  TtfReader.prototype.readPostTable = function () {\n    var tableInfo = this.getTable('post');\n    this.offset = tableInfo.offset;\n    var table = new TtfPostTable();\n    table.formatType = this.readFixed(this.offset);\n    table.italicAngle = this.readFixed(this.offset);\n    table.underlinePosition = this.readInt16(this.offset);\n    table.underlineThickness = this.readInt16(this.offset);\n    table.isFixedPitch = this.readUInt32(this.offset);\n    table.minType42 = this.readUInt32(this.offset);\n    table.maxType42 = this.readUInt32(this.offset);\n    table.minType1 = this.readUInt32(this.offset);\n    table.maxType1 = this.readUInt32(this.offset);\n    return table;\n  };\n  /**\n   * Reads Width of the glyphs.\n   */\n  TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n    var tableInfo = this.getTable('hmtx');\n    this.offset = tableInfo.offset;\n    var width = [];\n    for (var i = 0; i < glyphCount; i++) {\n      var glyph = new TtfLongHorMetric();\n      glyph.advanceWidth = this.readUInt16(this.offset);\n      glyph.lsb = this.readInt16(this.offset);\n      var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n      width.push(Math.floor(glyphWidth));\n    }\n    return width;\n  };\n  /**\n   * Reads the cmap table.\n   */\n  TtfReader.prototype.readCmapTable = function () {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset;\n    var table = new TtfCmapTable();\n    table.version = this.readUInt16(this.offset);\n    table.tablesCount = this.readUInt16(this.offset);\n    var position = this.offset;\n    var subTables = [];\n    for (var i = 0; i < table.tablesCount; i++) {\n      this.offset = position;\n      var subTable = new TtfCmapSubTable();\n      subTable.platformID = this.readUInt16(this.offset);\n      subTable.encodingID = this.readUInt16(this.offset);\n      subTable.offset = this.readUInt32(this.offset);\n      position = this.offset;\n      this.readCmapSubTable(subTable);\n      subTables[i] = subTable;\n    }\n    return subTables;\n  };\n  /**\n   * Reads the cmap sub table.\n   */\n  TtfReader.prototype.readCmapSubTable = function (subTable) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var format = this.readUInt16(this.offset);\n    var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n    var platform = encoding === TtfCmapEncoding.Macintosh ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n    if (encoding !== TtfCmapEncoding.Unknown) {\n      switch (format) {\n        case TtfCmapFormat.Apple:\n          this.readAppleCmapTable(subTable, encoding);\n          break;\n        case TtfCmapFormat.Microsoft:\n          this.readMicrosoftCmapTable(subTable, encoding);\n          break;\n        case TtfCmapFormat.Trimmed:\n          this.readTrimmedCmapTable(subTable, encoding);\n          break;\n      }\n    }\n  };\n  /**\n   * Reads Symbol cmap table.\n   */\n  TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var table = new TtfAppleCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n      this.maxMacIndex = 0;\n    }\n    for (var i = 0; i < 256; ++i) {\n      var glyphInfo = new TtfGlyphInfo();\n      glyphInfo.index = this.readByte(this.offset);\n      glyphInfo.width = this.getWidth(glyphInfo.index);\n      glyphInfo.charCode = i;\n      this.macintosh.setValue(i, glyphInfo);\n      this.addGlyph(glyphInfo, encoding);\n      // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n      this.maxMacIndex = Math.max(i, this.maxMacIndex);\n    }\n  };\n  /**\n   * Reads Symbol cmap table.\n   */\n  TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var collection = encoding === TtfCmapEncoding.Unicode ? this.microsoft : this.macintosh;\n    var table = new TtfMicrosoftCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    table.segCountX2 = this.readUInt16(this.offset);\n    table.searchRange = this.readUInt16(this.offset);\n    table.entrySelector = this.readUInt16(this.offset);\n    table.rangeShift = this.readUInt16(this.offset);\n    var segCount = table.segCountX2 / 2;\n    table.endCount = this.readUshortArray(segCount);\n    table.reservedPad = this.readUInt16(this.offset);\n    table.startCount = this.readUshortArray(segCount);\n    table.idDelta = this.readUshortArray(segCount);\n    table.idRangeOffset = this.readUshortArray(segCount);\n    var length = table.length / 2 - 8 - segCount * 4;\n    table.glyphID = this.readUshortArray(length);\n    // Process glyphIdArray array.\n    var codeOffset = 0;\n    var index = 0;\n    for (var j = 0; j < segCount; j++) {\n      for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n        if (table.idRangeOffset[j] === 0) {\n          codeOffset = k + table.idDelta[j] & 65535;\n        } else {\n          index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n          if (index >= table.glyphID.length) {\n            continue;\n          }\n          codeOffset = table.glyphID[index] + table.idDelta[j] & 65535;\n        }\n        var glyph = new TtfGlyphInfo();\n        glyph.index = codeOffset;\n        glyph.width = this.getWidth(glyph.index);\n        var id = encoding === TtfCmapEncoding.Symbol ? (k & 0xff00) === 0xf000 ? k & 0xff : k : k;\n        glyph.charCode = id;\n        collection.setValue(id, glyph);\n        this.addGlyph(glyph, encoding);\n      }\n    }\n  };\n  /**\n   * Reads Trimed cmap table.\n   */\n  TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var table = new TtfTrimmedCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    table.firstCode = this.readUInt16(this.offset);\n    table.entryCount = this.readUInt16(this.offset);\n    for (var i = 0; i < table.entryCount; ++i) {\n      var glyphInfo = new TtfGlyphInfo();\n      glyphInfo.index = this.readUInt16(this.offset);\n      glyphInfo.width = this.getWidth(glyphInfo.index);\n      glyphInfo.charCode = i + table.firstCode;\n      this.macintosh.setValue(i, glyphInfo);\n      this.addGlyph(glyphInfo, encoding);\n      // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n      this.maxMacIndex = Math.max(i, this.maxMacIndex);\n    }\n  };\n  TtfReader.prototype.initializeFontName = function (nameTable) {\n    for (var i = 0; i < nameTable.recordsCount; i++) {\n      var record = nameTable.nameRecords[i];\n      if (record.nameID === 1) {\n        //font family\n        this.metrics.fontFamily = record.name;\n      } else if (record.nameID === 6) {\n        //post script name\n        this.metrics.postScriptName = record.name;\n      }\n      /* tslint:disable */\n      if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n        break;\n      }\n      /* tslint:disable */\n    }\n  };\n\n  TtfReader.prototype.getTable = function (name) {\n    // if (name === null) {\n    //     throw new Error('Argument Null Exception : name');\n    // }\n    var table = new TtfTableInfo();\n    var obj;\n    if (this.tableDirectory.containsKey(name)) {\n      obj = this.tableDirectory.getValue(name);\n    }\n    if (obj !== null && obj !== undefined) {\n      table = obj;\n    }\n    return table;\n  };\n  /**\n   * Returns width of the glyph.\n   */\n  TtfReader.prototype.getWidth = function (glyphCode) {\n    glyphCode = glyphCode < this.width.length ? glyphCode : this.width.length - 1;\n    return this.width[glyphCode];\n  };\n  /**\n   * Gets CMAP encoding based on platform ID and encoding ID.\n   */\n  /* tslint:disable */\n  TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n    var format = TtfCmapEncoding.Unknown;\n    if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n      // When building a symbol font for Windows,\n      // the platform ID should be 3 and the encoding ID should be 0.\n      format = TtfCmapEncoding.Symbol;\n    } else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n      // When building a Unicode font for Windows,\n      // the platform ID should be 3 and the encoding ID should be 1.\n      format = TtfCmapEncoding.Unicode;\n    } else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n      // When building a font that will be used on the Macintosh,\n      // the platform ID should be 1 and the encoding ID should be 0.\n      format = TtfCmapEncoding.Macintosh;\n    }\n    return format;\n  };\n  /* tslint:enable */\n  /**\n   * Adds glyph to the collection.\n   */\n  TtfReader.prototype.addGlyph = function (glyph, encoding) {\n    var collection = null;\n    switch (encoding) {\n      case TtfCmapEncoding.Unicode:\n        collection = this.microsoftGlyphs;\n        break;\n      case TtfCmapEncoding.Macintosh:\n      case TtfCmapEncoding.Symbol:\n        collection = this.macintoshGlyphs;\n        break;\n    }\n    collection.setValue(glyph.index, glyph);\n  };\n  /**\n   * Initializes metrics.\n   */\n  /* tslint:disable */\n  TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n    /* tslint:enable */\n    // if (cmapTables === null) {\n    //     throw new Error('ArgumentNullException : cmapTables');\n    // }\n    this.initializeFontName(nameTable);\n    // Get font encoding.\n    var bSymbol = false;\n    for (var i = 0; i < cmapTables.length; i++) {\n      var subTable = cmapTables[i];\n      var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n      if (encoding === TtfCmapEncoding.Symbol) {\n        bSymbol = true;\n        break;\n      }\n    }\n    this.metrics.isSymbol = bSymbol;\n    this.metrics.macStyle = headTable.macStyle;\n    this.metrics.isFixedPitch = postTable.isFixedPitch !== 0;\n    this.metrics.italicAngle = postTable.italicAngle;\n    var factor = 1000 / headTable.unitsPerEm;\n    this.metrics.winAscent = os2Table.sTypoAscender * factor;\n    this.metrics.macAscent = horizontalHeadTable.ascender * factor;\n    //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n    // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n    this.metrics.capHeight = os2Table.sCapHeight !== 0 ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n    this.metrics.winDescent = os2Table.sTypoDescender * factor;\n    this.metrics.macDescent = horizontalHeadTable.descender * factor;\n    //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n    this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n    this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n    var left = headTable.xMin * factor;\n    var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n    var right = headTable.xMax * factor;\n    var bottom = this.metrics.macDescent;\n    this.metrics.fontBox = new Rectangle(left, top, right, bottom);\n    // NOTE: Strange!\n    this.metrics.stemV = 80;\n    this.metrics.widthTable = this.updateWidth();\n    this.metrics.contains = this.tableDirectory.containsKey('CFF');\n    this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n    this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n  };\n  /**\n   * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n   */\n  TtfReader.prototype.updateWidth = function () {\n    var count = 256;\n    var bytes = [];\n    if (this.metrics.isSymbol) {\n      for (var i = 0; i < count; i++) {\n        var glyphInfo = this.getGlyph(String.fromCharCode(i));\n        bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;\n      }\n    } else {\n      var byteToProcess = [];\n      var unknown = '?';\n      var space = String.fromCharCode(32);\n      for (var i = 0; i < count; i++) {\n        byteToProcess[0] = i;\n        var text = this.getString(byteToProcess, 0, byteToProcess.length);\n        var ch = text.length > 0 ? text[0] : unknown;\n        var glyphInfo = this.getGlyph(ch);\n        if (!glyphInfo.empty) {\n          bytes[i] = glyphInfo.width;\n        } else {\n          glyphInfo = this.getGlyph(space);\n          bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;\n        }\n      }\n    }\n    return bytes;\n  };\n  /**\n   * Returns default glyph.\n   */\n  TtfReader.prototype.getDefaultGlyph = function () {\n    var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n    return glyph;\n  };\n  /**\n   * Reads unicode string from byte array.\n   */\n  TtfReader.prototype.getString = function (byteToProcess, start, length) {\n    var result = '';\n    for (var index = 0; index < length; index++) {\n      result += String.fromCharCode(byteToProcess[index + start]);\n    }\n    return result;\n  };\n  /**\n   * Reads loca table.\n   */\n  TtfReader.prototype.readLocaTable = function (bShort) {\n    var tableInfo = this.getTable('loca');\n    this.offset = tableInfo.offset;\n    var table = new TtfLocaTable();\n    var buffer = null;\n    if (bShort) {\n      var len = tableInfo.length / 2;\n      buffer = [];\n      for (var i = 0; i < len; i++) {\n        buffer[i] = this.readUInt16(this.offset) * 2;\n      }\n    } else {\n      var len = tableInfo.length / 4;\n      buffer = [];\n      for (var i = 0; i < len; i++) {\n        buffer[i] = this.readUInt32(this.offset);\n      }\n    }\n    table.offsets = buffer;\n    return table;\n  };\n  /**\n   * Updates hash table of used glyphs.\n   */\n  TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    // Add zero key.\n    if (!glyphChars.containsKey(0)) {\n      glyphChars.setValue(0, 0);\n    }\n    var clone = new Dictionary();\n    var glyphCharKeys = glyphChars.keys();\n    for (var i = 0; i < glyphCharKeys.length; i++) {\n      clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n    }\n    for (var i = 0; i < glyphCharKeys.length; i++) {\n      var nextKey = glyphCharKeys[i];\n      this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n    }\n  };\n  /**\n   * Checks if glyph is composite or not.\n   */\n  TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    // Is in range.\n    if (glyph < locaTable.offsets.length - 1) {\n      var glyphOffset = locaTable.offsets[glyph];\n      if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n        var tableInfo = this.getTable('glyf');\n        this.offset = tableInfo.offset + glyphOffset;\n        var glyphHeader = new TtfGlyphHeader();\n        glyphHeader.numberOfContours = this.readInt16(this.offset);\n        glyphHeader.xMin = this.readInt16(this.offset);\n        glyphHeader.yMin = this.readInt16(this.offset);\n        glyphHeader.xMax = this.readInt16(this.offset);\n        glyphHeader.yMax = this.readInt16(this.offset);\n        // Glyph is composite.\n        if (glyphHeader.numberOfContours < 0) {\n          var skipBytes = 0;\n          var entry = true;\n          while (entry) {\n            var flags = this.readUInt16(this.offset);\n            var glyphIndex = this.readUInt16(this.offset);\n            if (!glyphChars.containsKey(glyphIndex)) {\n              glyphChars.setValue(glyphIndex, 0);\n            }\n            if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n              break;\n            }\n            skipBytes = (flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0 ? 4 : 2;\n            if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n              skipBytes += 2;\n            } else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n              skipBytes += 4;\n            } else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n              skipBytes += 2 * 4;\n            }\n            this.offset += skipBytes;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Creates new glyph tables based on chars that are used for output.\n   */\n  /* tslint:disable */\n  TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n    /* tslint:enable */\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    newLocaTable = [];\n    // Sorting used glyphs keys.\n    var activeGlyphs = glyphChars.keys();\n    activeGlyphs.sort(function (a, b) {\n      return a - b;\n    });\n    var glyphSize = 0;\n    for (var i = 0; i < activeGlyphs.length; i++) {\n      var glyphIndex = activeGlyphs[i];\n      if (locaTable.offsets.length > 0) {\n        glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n      }\n    }\n    var glyphSizeAligned = this.align(glyphSize);\n    newGlyphTable = [];\n    for (var i = 0; i < glyphSizeAligned; i++) {\n      newGlyphTable.push(0);\n    }\n    var nextGlyphOffset = 0;\n    var nextGlyphIndex = 0;\n    var table = this.getTable('glyf');\n    // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n    for (var i = 0; i < locaTable.offsets.length; i++) {\n      newLocaTable.push(nextGlyphOffset);\n      if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n        ++nextGlyphIndex;\n        newLocaTable[i] = nextGlyphOffset;\n        var oldGlyphOffset = locaTable.offsets[i];\n        var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n        if (oldNextGlyphOffset > 0) {\n          this.offset = table.offset + oldGlyphOffset;\n          var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n          newGlyphTable = result.buffer;\n          nextGlyphOffset += oldNextGlyphOffset;\n        }\n      }\n    }\n    return {\n      glyphTableSize: glyphSize,\n      newLocaTable: newLocaTable,\n      newGlyphTable: newGlyphTable\n    };\n  };\n  /**\n   * Updates new Loca table.\n   */\n  /* tslint:disable */\n  TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n    /* tslint:enable */\n    if (newLocaTable === null) {\n      throw new Error('Argument Null Exception : newLocaTable');\n    }\n    var size = bLocaIsShort ? newLocaTable.length * 2 : newLocaTable.length * 4;\n    var count = this.align(size);\n    //BigEndianWiter\n    var writer = new BigEndianWriter(count);\n    for (var i = 0; i < newLocaTable.length; i++) {\n      var value = newLocaTable[i];\n      if (bLocaIsShort) {\n        value /= 2;\n        writer.writeShort(value);\n      } else {\n        writer.writeInt(value);\n      }\n    }\n    return {\n      newLocaUpdated: writer.data,\n      newLocaSize: size\n    };\n  };\n  /**\n   * Aligns number to be divisible on 4.\n   */\n  TtfReader.prototype.align = function (value) {\n    return value + 3 & ~3;\n  };\n  /**\n   * Returns font program data.\n   */\n  /* tslint:disable */\n  TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n    /* tslint:enable */\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n    var tableNames = this.tableNames;\n    var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n    var fontProgramLength = result.fontProgramLength;\n    var numTables = result.numTables;\n    var writer = new BigEndianWriter(fontProgramLength);\n    writer.writeInt(0x10000);\n    writer.writeShort(numTables);\n    var entrySelector = this.entrySelectors[numTables];\n    writer.writeShort((1 << (entrySelector & 31)) * 16);\n    writer.writeShort(entrySelector);\n    writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);\n    // Writing to destination buffer - checksums && sizes of used tables.\n    this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);\n    // // Writing to destination buffer - used glyphs.\n    this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n    return writer.data;\n  };\n  /* tslint:disable */\n  TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n    /* tslint:enable */\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n    // glyf and loca are used by default;\n    numTables = 2;\n    var tableNames = this.tableNames;\n    var fontProgramLength = 0;\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      if (tableName !== 'glyf' && tableName !== 'loca') {\n        var table = this.getTable(tableName);\n        if (!table.empty) {\n          ++numTables;\n          fontProgramLength += this.align(table.length);\n        }\n      }\n    }\n    fontProgramLength += newLocaTableOut.length;\n    fontProgramLength += newGlyphTable.length;\n    var usedTablesSize = numTables * 16 + 3 * 4;\n    fontProgramLength += usedTablesSize;\n    return {\n      fontProgramLength: fontProgramLength,\n      numTables: numTables\n    };\n  };\n  /**\n   * Writing to destination buffer - checksums and sizes of used tables.\n   */\n  /* tslint:disable */\n  TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n    /* tslint:enable */\n    if (writer === null) {\n      throw new Error('Argument Null Exception : writer');\n    }\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n    var tableNames = this.tableNames;\n    var usedTablesSize = numTables * 16 + 3 * 4;\n    var nextTableSize = 0;\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      var tableInfo = this.getTable(tableName);\n      if (tableInfo.empty) {\n        continue;\n      }\n      writer.writeString(tableName);\n      if (tableName === 'glyf') {\n        var checksum = this.calculateCheckSum(newGlyphTable);\n        writer.writeInt(checksum);\n        nextTableSize = glyphTableSize;\n      } else if (tableName === 'loca') {\n        var checksum = this.calculateCheckSum(newLocaTableOut);\n        writer.writeInt(checksum);\n        nextTableSize = locaTableSize;\n      } else {\n        writer.writeInt(tableInfo.checksum);\n        nextTableSize = tableInfo.length;\n      }\n      writer.writeUInt(usedTablesSize);\n      writer.writeUInt(nextTableSize);\n      usedTablesSize += this.align(nextTableSize);\n    }\n  };\n  /**\n   * Gets checksum from source buffer.\n   */\n  TtfReader.prototype.calculateCheckSum = function (bytes) {\n    if (bytes === null) {\n      throw new Error('Argument Null Exception : bytes');\n    }\n    var pos = 0;\n    var byte1 = 0;\n    var byte2 = 0;\n    var byte3 = 0;\n    var byte4 = 0;\n    for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n      byte4 += bytes[pos++] & 255;\n      byte3 += bytes[pos++] & 255;\n      byte2 += bytes[pos++] & 255;\n      byte1 += bytes[pos++] & 255;\n    }\n    var result = byte1;\n    result += byte2 << 8;\n    result += byte3 << 16;\n    result += byte4 << 24;\n    return result;\n  };\n  /**\n   * Writing to destination buffer - used glyphs.\n   */\n  TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n    if (writer === null) {\n      throw new Error('Argument Null Exception : writer');\n    }\n    if (newLocaTable === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n    var tableNames = this.tableNames;\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      var tableInfo = this.getTable(tableName);\n      if (tableInfo.empty) {\n        continue;\n      }\n      if (tableName === 'glyf') {\n        writer.writeBytes(newGlyphTable);\n      } else if (tableName === 'loca') {\n        writer.writeBytes(newLocaTable);\n      } else {\n        var count = this.align(tableInfo.length);\n        var buff = [];\n        for (var i_1 = 0; i_1 < count; i_1++) {\n          buff.push(0);\n        }\n        this.offset = tableInfo.offset;\n        var result = this.read(buff, 0, tableInfo.length);\n        writer.writeBytes(result.buffer);\n      }\n    }\n  };\n  //public methods\n  /**\n   * Sets position value of font data.\n   */\n  TtfReader.prototype.setOffset = function (offset) {\n    this.offset = offset;\n  };\n  /**\n   * Creates font Internals\n   * @private\n   */\n  TtfReader.prototype.createInternals = function () {\n    this.metrics = new TtfMetrics();\n    var nameTable = this.readNameTable();\n    var headTable = this.readHeadTable();\n    this.bIsLocaShort = headTable.indexToLocalFormat === 0;\n    var horizontalHeadTable = this.readHorizontalHeaderTable();\n    var os2Table = this.readOS2Table();\n    var postTable = this.readPostTable();\n    this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n    var subTables = this.readCmapTable();\n    this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n  };\n  TtfReader.prototype.getGlyph = function (charCode) {\n    if (typeof charCode === 'number') {\n      var obj1 = null;\n      if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n        if (this.microsoftGlyphs.containsKey(charCode)) {\n          obj1 = this.microsoftGlyphs.getValue(charCode);\n        }\n      } else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n        if (this.macintoshGlyphs.containsKey(charCode)) {\n          obj1 = this.macintoshGlyphs.getValue(charCode);\n        }\n      }\n      var glyph = obj1 != null ? obj1 : this.getDefaultGlyph();\n      return glyph;\n    } else {\n      var obj = null;\n      var code = charCode.charCodeAt(0);\n      if (!this.metrics.isSymbol && this.microsoft !== null) {\n        if (this.microsoft.containsKey(code)) {\n          obj = this.microsoft.getValue(code);\n          if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n            this.isFontPresent = true;\n          }\n        } else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n          this.isFontPresent = false;\n        }\n      } else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n        // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n        if (this.maxMacIndex !== 0) {\n          code %= this.maxMacIndex + 1;\n        } else {\n          code = (code & 0xff00) === 0xf000 ? code & 0xff : code;\n        }\n        if (this.macintosh.containsKey(code)) {\n          obj = this.macintosh.getValue(code);\n          this.isFontPresent = true;\n        }\n      }\n      // Fix for StackOverFlow exception in XPS to PDF converter\n      if (charCode === StringTokenizer.whiteSpace && obj === null) {\n        obj = new TtfGlyphInfo();\n      }\n      var glyph = obj !== null ? obj : this.getDefaultGlyph();\n      return glyph;\n    }\n  };\n  /**\n   * Gets hash table with chars indexed by glyph index.\n   */\n  TtfReader.prototype.getGlyphChars = function (chars) {\n    if (chars === null || chars === undefined) {\n      throw new Error('Argument Null Exception : chars');\n    }\n    var dictionary = new Dictionary();\n    var charKeys = chars.keys();\n    for (var i = 0; i < charKeys.length; i++) {\n      var ch = charKeys[i];\n      var glyph = this.getGlyph(ch);\n      if (!glyph.empty) {\n        dictionary.setValue(glyph.index, ch.charCodeAt(0));\n      }\n    }\n    return dictionary;\n  };\n  /**\n   * Gets all glyphs.\n   */\n  TtfReader.prototype.getAllGlyphs = function () {\n    var allGlyphInfo = [];\n    var info = new TtfGlyphInfo();\n    var index = 0;\n    for (var i = 0; i < this.width.length; i++) {\n      var width = this.width[i];\n      info.index = index;\n      info.width = width;\n      allGlyphInfo.push(info);\n      index++;\n    }\n    return allGlyphInfo;\n  };\n  /**\n   * Reads a font's program.\n   * @private\n   */\n  TtfReader.prototype.readFontProgram = function (chars) {\n    var glyphChars = this.getGlyphChars(chars);\n    var locaTable = this.readLocaTable(this.bIsLocaShort);\n    if (glyphChars.size() < chars.size()) {\n      this.missedGlyphs = chars.size() - glyphChars.size();\n    }\n    this.updateGlyphChars(glyphChars, locaTable);\n    /* tslint:disable */\n    var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n    /* tslint:enable */\n    var glyphTableSize = result1.glyphTableSize;\n    var newLocaTable = result1.newLocaTable;\n    var newGlyphTable = result1.newGlyphTable;\n    var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n    var newLocaSize = result2.newLocaSize;\n    var newLocaUpdated = result2.newLocaUpdated;\n    var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n    return fontProgram;\n  };\n  /**\n   * Reconverts string to be in proper format saved into PDF file.\n   */\n  TtfReader.prototype.convertString = function (text) {\n    if (text === null) {\n      throw new Error('Argument Null Exception : text');\n    }\n    var glyph = '';\n    var i = 0;\n    for (var k = 0; k < text.length; k++) {\n      var ch = text[k];\n      var glyphInfo = this.getGlyph(ch);\n      if (!glyphInfo.empty) {\n        glyph += String.fromCharCode(glyphInfo.index);\n        i++;\n      }\n    }\n    return glyph;\n  };\n  /**\n   * Gets char width.\n   */\n  TtfReader.prototype.getCharWidth = function (code) {\n    var glyphInfo = this.getGlyph(code);\n    glyphInfo = !glyphInfo.empty ? glyphInfo : this.getDefaultGlyph();\n    var codeWidth = !glyphInfo.empty ? glyphInfo.width : 0;\n    return codeWidth;\n  };\n  TtfReader.prototype.readString = function (length, isUnicode) {\n    if (isUnicode === undefined) {\n      return this.readString(length, false);\n    } else {\n      //let buffer : number[] = this.readBytes(length);\n      var result = '';\n      if (isUnicode) {\n        for (var i = 0; i < length; i++) {\n          if (i % 2 !== 0) {\n            result += String.fromCharCode(this.fontData[this.offset]);\n          }\n          this.offset += 1;\n        }\n      } else {\n        for (var i = 0; i < length; i++) {\n          result += String.fromCharCode(this.fontData[this.offset]);\n          this.offset += 1;\n        }\n      }\n      return result;\n    }\n  };\n  TtfReader.prototype.readFixed = function (offset) {\n    var integer = this.readInt16(offset);\n    var sFraction = this.readInt16(offset + 2);\n    var fraction = sFraction / 16384;\n    return integer + fraction;\n  };\n  TtfReader.prototype.readInt32 = function (offset) {\n    var i1 = this.fontData[offset + 3];\n    var i2 = this.fontData[offset + 2];\n    var i3 = this.fontData[offset + 1];\n    var i4 = this.fontData[offset];\n    this.offset += 4;\n    return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n  };\n  TtfReader.prototype.readUInt32 = function (offset) {\n    var i1 = this.fontData[offset + 3];\n    var i2 = this.fontData[offset + 2];\n    var i3 = this.fontData[offset + 1];\n    var i4 = this.fontData[offset];\n    this.offset += 4;\n    return i1 | i2 << 8 | i3 << 16 | i4 << 24;\n  };\n  // private readInt16(offset : number) : number {\n  //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n  //     this.offset += 2;\n  //     return result;\n  // }\n  TtfReader.prototype.readInt16 = function (offset) {\n    var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    result = result & 1 << 15 ? result - 0x10000 : result;\n    this.offset += 2;\n    return result;\n  };\n  TtfReader.prototype.readInt64 = function (offset) {\n    var low = this.readInt32(offset + 4);\n    var n = this.readInt32(offset) * 4294967296.0 + low;\n    if (low < 0) {\n      n += 4294967296;\n    }\n    return n;\n  };\n  TtfReader.prototype.readUInt16 = function (offset) {\n    var result = this.fontData[offset] << 8 | this.fontData[offset + 1];\n    this.offset += 2;\n    return result;\n  };\n  /**\n   * Reads ushort array.\n   */\n  TtfReader.prototype.readUshortArray = function (length) {\n    var buffer = [];\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.readUInt16(this.offset);\n    }\n    return buffer;\n  };\n  TtfReader.prototype.readBytes = function (length) {\n    var result = [];\n    for (var i = 0; i < length; i++) {\n      result.push(this.fontData[this.offset]);\n      this.offset += 1;\n    }\n    return result;\n  };\n  TtfReader.prototype.readByte = function (offset) {\n    var result = this.fontData[offset];\n    this.offset += 1;\n    return result;\n  };\n  /**\n   * Reads bytes to array in BigEndian order.\n   * @private\n   */\n  TtfReader.prototype.read = function (buffer, index, count) {\n    if (buffer === null) {\n      throw new Error('Argument Null Exception : buffer');\n    }\n    var written = 0;\n    var read = 0;\n    do {\n      for (var i = 0; i < count - written && this.offset + i < this.fontData.length; i++) {\n        buffer[index + i] = this.fontData[this.offset + i];\n      }\n      read = count - written;\n      this.offset += read;\n      written += read;\n    } while (written < count);\n    return {\n      buffer: buffer,\n      written: written\n    };\n  };\n  return TtfReader;\n}();\nexport { TtfReader };","map":{"version":3,"names":["TtfTableInfo","Dictionary","TtfNameTable","TtfNameRecord","TtfHeadTable","TtfMetrics","TtfHorizontalHeaderTable","TtfOS2Table","TtfPostTable","TtfLongHorMetric","TtfCmapSubTable","TtfCmapTable","TtfGlyphInfo","TtfLocaTable","TtfAppleCmapSubTable","TtfMicrosoftCmapSubTable","TtfTrimmedCmapSubTable","TtfGlyphHeader","Rectangle","StringTokenizer","TtfCmapFormat","TtfCmapEncoding","TtfPlatformID","TtfMicrosoftEncodingID","TtfMacintoshEncodingID","TtfCompositeGlyphFlags","BigEndianWriter","TtfReader","fontData","int32Size","isTtcFont","isMacTtf","metricsName","isMacTTF","missedGlyphs","tableNames","entrySelectors","initialize","Object","defineProperty","prototype","get","macintoshDictionary","undefined","enumerable","configurable","microsoftDictionary","internalMacintoshGlyphs","internalMicrosoftGlyphs","metrics","readFontDictionary","nameTable","readNameTable","headTable","readHeadTable","initializeFontName","macStyle","offset","version","checkPreambula","numTables","readInt16","searchRange","entrySelector","rangeShift","tableDirectory","i","table","tableKey","readString","checksum","readInt32","length","setValue","lowestPosition","fixOffsets","minOffset","Number","MAX_VALUE","tableKeys","keys","value","getValue","shift","fontTag","Error","ttcIdentificationNumber","tableInfo","getTable","formatSelector","readUInt16","recordsCount","nameRecords","recordSize","position","record","platformID","encodingID","languageID","nameID","unicode","name","readFixed","fontRevision","checkSumAdjustment","readUInt32","magicNumber","flags","unitsPerEm","created","readInt64","modified","xMin","yMin","xMax","yMax","lowestReadableSize","fontDirectionHint","indexToLocalFormat","glyphDataFormat","readHorizontalHeaderTable","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","metricDataFormat","numberOfHMetrics","readOS2Table","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","readBytes","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","vendorIdentifier","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefaultChar","usBreakChar","usMaxContext","readPostTable","formatType","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minType42","maxType42","minType1","maxType1","readWidthTable","glyphCount","width","glyph","advanceWidth","lsb","glyphWidth","push","Math","floor","readCmapTable","tablesCount","subTables","subTable","readCmapSubTable","format","encoding","getCmapEncoding","platform","Macintosh","Microsoft","Unknown","Apple","readAppleCmapTable","readMicrosoftCmapTable","Trimmed","readTrimmedCmapTable","maxMacIndex","glyphInfo","index","readByte","getWidth","charCode","macintosh","addGlyph","max","collection","Unicode","microsoft","segCountX2","segCount","endCount","readUshortArray","reservedPad","startCount","idDelta","idRangeOffset","glyphID","codeOffset","j","k","id","Symbol","firstCode","entryCount","fontFamily","postScriptName","obj","containsKey","glyphCode","Undefined","Roman","microsoftGlyphs","macintoshGlyphs","initializeMetrics","horizontalHeadTable","os2Table","postTable","cmapTables","bSymbol","isSymbol","factor","winAscent","macAscent","capHeight","winDescent","macDescent","leading","ceil","left","top","right","bottom","fontBox","stemV","widthTable","updateWidth","contains","subScriptSizeFactor","superscriptSizeFactor","count","bytes","getGlyph","String","fromCharCode","empty","byteToProcess","unknown","space","text","getString","ch","getDefaultGlyph","whiteSpace","start","result","readLocaTable","bShort","buffer","len","offsets","updateGlyphChars","glyphChars","locaTable","clone","glyphCharKeys","nextKey","processCompositeGlyph","glyphOffset","glyphHeader","numberOfContours","skipBytes","entry","glyphIndex","MoreComponents","Arg1And2AreWords","WeHaveScale","WeHaveAnXyScale","WeHaveTwoByTwo","generateGlyphTable","newLocaTable","newGlyphTable","activeGlyphs","sort","a","b","glyphSize","glyphSizeAligned","align","nextGlyphOffset","nextGlyphIndex","oldGlyphOffset","oldNextGlyphOffset","read","glyphTableSize","updateLocaTable","bLocaIsShort","newLocaTableOut","size","writer","writeShort","writeInt","newLocaUpdated","data","newLocaSize","getFontProgram","locaTableSize","getFontProgramLength","fontProgramLength","writeCheckSums","writeGlyphs","tableName","usedTablesSize","nextTableSize","writeString","calculateCheckSum","writeUInt","pos","byte1","byte2","byte3","byte4","writeBytes","buff","i_1","setOffset","createInternals","bIsLocaShort","obj1","code","charCodeAt","isFontPresent","getGlyphChars","chars","dictionary","charKeys","getAllGlyphs","allGlyphInfo","info","readFontProgram","result1","result2","fontProgram","convertString","getCharWidth","codeWidth","isUnicode","integer","sFraction","fraction","i1","i2","i3","i4","low","n","written"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js"],"sourcesContent":["/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\nvar TtfReader = /** @class */ (function () {\n    //Constructors\n    function TtfReader(fontData) {\n        this.int32Size = 4;\n        this.isTtcFont = false;\n        this.isMacTtf = false;\n        this.metricsName = '';\n        this.isMacTTF = false;\n        this.missedGlyphs = 0;\n        this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n        this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n        this.fontData = fontData;\n        this.initialize();\n    }\n    Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n        //Properties\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n                this.macintoshDictionary = new Dictionary();\n            }\n            return this.macintoshDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n        /**\n         * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n                this.microsoftDictionary = new Dictionary();\n            }\n            return this.microsoftDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n                this.internalMacintoshGlyphs = new Dictionary();\n            }\n            return this.internalMacintoshGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n        /**\n         * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n                this.internalMicrosoftGlyphs = new Dictionary();\n            }\n            return this.internalMicrosoftGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    TtfReader.prototype.initialize = function () {\n        if (this.metrics === undefined) {\n            this.metrics = new TtfMetrics();\n        }\n        this.readFontDictionary();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.initializeFontName(nameTable);\n        this.metrics.macStyle = headTable.macStyle;\n    };\n    TtfReader.prototype.readFontDictionary = function () {\n        this.offset = 0;\n        var version = this.checkPreambula();\n        //this.offset += 4;\n        var numTables = this.readInt16(this.offset);\n        var searchRange = this.readInt16(this.offset);\n        var entrySelector = this.readInt16(this.offset);\n        var rangeShift = this.readInt16(this.offset);\n        if (this.tableDirectory === undefined) {\n            this.tableDirectory = new Dictionary();\n        }\n        for (var i = 0; i < numTables; ++i) {\n            var table = new TtfTableInfo();\n            var tableKey = this.readString(this.int32Size);\n            table.checksum = this.readInt32(this.offset);\n            table.offset = this.readInt32(this.offset);\n            table.length = this.readInt32(this.offset);\n            this.tableDirectory.setValue(tableKey, table);\n        }\n        this.lowestPosition = this.offset;\n        if (!this.isTtcFont) {\n            this.fixOffsets();\n        }\n    };\n    TtfReader.prototype.fixOffsets = function () {\n        var minOffset = Number.MAX_VALUE;\n        // Search for a smallest offset and compare it with the lowest position found.\n        var tableKeys = this.tableDirectory.keys();\n        for (var i = 0; i < tableKeys.length; i++) {\n            var value = this.tableDirectory.getValue(tableKeys[i]);\n            var offset = value.offset;\n            if (minOffset > offset) {\n                minOffset = offset;\n                if (minOffset <= this.lowestPosition) {\n                    break;\n                }\n            }\n        }\n        var shift = minOffset - this.lowestPosition;\n        if (shift !== 0) {\n            var table = new Dictionary();\n            for (var i = 0; i < tableKeys.length; i++) {\n                var value = this.tableDirectory.getValue(tableKeys[i]);\n                value.offset -= shift;\n                table.setValue(tableKeys[i], value);\n            }\n            this.tableDirectory = table;\n        }\n    };\n    TtfReader.prototype.checkPreambula = function () {\n        var version = this.readInt32(this.offset);\n        this.isMacTtf = (version === 0x74727565) ? true : false;\n        if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n            this.isTtcFont = true;\n            this.offset = 0;\n            var fontTag = this.readString(4);\n            if (fontTag !== 'ttcf') {\n                throw new Error('Can not read TTF font data');\n            }\n            //skip 4\n            this.offset += 4;\n            var ttcIdentificationNumber = this.readInt32(this.offset);\n            if (ttcIdentificationNumber < 0) {\n                throw new Error('Can not read TTF font data');\n            }\n            this.offset = this.readInt32(this.offset);\n            version = this.readInt32(this.offset);\n        }\n        return version;\n    };\n    TtfReader.prototype.readNameTable = function () {\n        var tableInfo = this.getTable('name');\n        this.offset = tableInfo.offset;\n        var table = new TtfNameTable();\n        table.formatSelector = this.readUInt16(this.offset);\n        table.recordsCount = this.readUInt16(this.offset);\n        table.offset = this.readUInt16(this.offset);\n        table.nameRecords = [];\n        var recordSize = 12;\n        var position = this.offset;\n        for (var i = 0; i < table.recordsCount; i++) {\n            this.offset = position;\n            var record = new TtfNameRecord();\n            record.platformID = this.readUInt16(this.offset);\n            record.encodingID = this.readUInt16(this.offset);\n            record.languageID = this.readUInt16(this.offset);\n            record.nameID = this.readUInt16(this.offset);\n            record.length = this.readUInt16(this.offset);\n            record.offset = this.readUInt16(this.offset);\n            this.offset = tableInfo.offset + table.offset + record.offset;\n            var unicode = (record.platformID === 0 || record.platformID === 3);\n            record.name = this.readString(record.length, unicode);\n            table.nameRecords[i] = record;\n            position += recordSize;\n        }\n        return table;\n    };\n    TtfReader.prototype.readHeadTable = function () {\n        var tableInfo = this.getTable('head');\n        this.offset = tableInfo.offset;\n        var table = new TtfHeadTable();\n        table.version = this.readFixed(this.offset);\n        table.fontRevision = this.readFixed(this.offset);\n        table.checkSumAdjustment = this.readUInt32(this.offset);\n        table.magicNumber = this.readUInt32(this.offset);\n        table.flags = this.readUInt16(this.offset);\n        table.unitsPerEm = this.readUInt16(this.offset);\n        table.created = this.readInt64(this.offset);\n        table.modified = this.readInt64(this.offset);\n        table.xMin = this.readInt16(this.offset);\n        table.yMin = this.readInt16(this.offset);\n        table.xMax = this.readInt16(this.offset);\n        table.yMax = this.readInt16(this.offset);\n        table.macStyle = this.readUInt16(this.offset);\n        table.lowestReadableSize = this.readUInt16(this.offset);\n        table.fontDirectionHint = this.readInt16(this.offset);\n        table.indexToLocalFormat = this.readInt16(this.offset);\n        table.glyphDataFormat = this.readInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readHorizontalHeaderTable = function () {\n        var tableInfo = this.getTable('hhea');\n        this.offset = tableInfo.offset;\n        var table = new TtfHorizontalHeaderTable();\n        table.version = this.readFixed(this.offset);\n        table.ascender = this.readInt16(this.offset);\n        table.descender = this.readInt16(this.offset);\n        table.lineGap = this.readInt16(this.offset);\n        table.advanceWidthMax = this.readUInt16(this.offset);\n        table.minLeftSideBearing = this.readInt16(this.offset);\n        table.minRightSideBearing = this.readInt16(this.offset);\n        table.xMaxExtent = this.readInt16(this.offset);\n        table.caretSlopeRise = this.readInt16(this.offset);\n        table.caretSlopeRun = this.readInt16(this.offset);\n        //skip 2 * 5\n        this.offset += 10;\n        table.metricDataFormat = this.readInt16(this.offset);\n        table.numberOfHMetrics = this.readUInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readOS2Table = function () {\n        var tableInfo = this.getTable('OS/2');\n        this.offset = tableInfo.offset;\n        var table = new TtfOS2Table();\n        table.version = this.readUInt16(this.offset);\n        table.xAvgCharWidth = this.readInt16(this.offset);\n        table.usWeightClass = this.readUInt16(this.offset);\n        table.usWidthClass = this.readUInt16(this.offset);\n        table.fsType = this.readInt16(this.offset);\n        table.ySubscriptXSize = this.readInt16(this.offset);\n        table.ySubscriptYSize = this.readInt16(this.offset);\n        table.ySubscriptXOffset = this.readInt16(this.offset);\n        table.ySubscriptYOffset = this.readInt16(this.offset);\n        table.ySuperscriptXSize = this.readInt16(this.offset);\n        table.ySuperscriptYSize = this.readInt16(this.offset);\n        table.ySuperscriptXOffset = this.readInt16(this.offset);\n        table.ySuperscriptYOffset = this.readInt16(this.offset);\n        table.yStrikeoutSize = this.readInt16(this.offset);\n        table.yStrikeoutPosition = this.readInt16(this.offset);\n        table.sFamilyClass = this.readInt16(this.offset);\n        table.panose = this.readBytes(10);\n        table.ulUnicodeRange1 = this.readUInt32(this.offset);\n        table.ulUnicodeRange2 = this.readUInt32(this.offset);\n        table.ulUnicodeRange3 = this.readUInt32(this.offset);\n        table.ulUnicodeRange4 = this.readUInt32(this.offset);\n        table.vendorIdentifier = this.readBytes(4);\n        table.fsSelection = this.readUInt16(this.offset);\n        table.usFirstCharIndex = this.readUInt16(this.offset);\n        table.usLastCharIndex = this.readUInt16(this.offset);\n        table.sTypoAscender = this.readInt16(this.offset);\n        table.sTypoDescender = this.readInt16(this.offset);\n        table.sTypoLineGap = this.readInt16(this.offset);\n        table.usWinAscent = this.readUInt16(this.offset);\n        table.usWinDescent = this.readUInt16(this.offset);\n        table.ulCodePageRange1 = this.readUInt32(this.offset);\n        table.ulCodePageRange2 = this.readUInt32(this.offset);\n        if (table.version > 1) {\n            table.sxHeight = this.readInt16(this.offset);\n            table.sCapHeight = this.readInt16(this.offset);\n            table.usDefaultChar = this.readUInt16(this.offset);\n            table.usBreakChar = this.readUInt16(this.offset);\n            table.usMaxContext = this.readUInt16(this.offset);\n        }\n        else {\n            table.sxHeight = 0;\n            table.sCapHeight = 0;\n            table.usDefaultChar = 0;\n            table.usBreakChar = 0;\n            table.usMaxContext = 0;\n        }\n        return table;\n    };\n    TtfReader.prototype.readPostTable = function () {\n        var tableInfo = this.getTable('post');\n        this.offset = tableInfo.offset;\n        var table = new TtfPostTable();\n        table.formatType = this.readFixed(this.offset);\n        table.italicAngle = this.readFixed(this.offset);\n        table.underlinePosition = this.readInt16(this.offset);\n        table.underlineThickness = this.readInt16(this.offset);\n        table.isFixedPitch = this.readUInt32(this.offset);\n        table.minType42 = this.readUInt32(this.offset);\n        table.maxType42 = this.readUInt32(this.offset);\n        table.minType1 = this.readUInt32(this.offset);\n        table.maxType1 = this.readUInt32(this.offset);\n        return table;\n    };\n    /**\n     * Reads Width of the glyphs.\n     */\n    TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n        var tableInfo = this.getTable('hmtx');\n        this.offset = tableInfo.offset;\n        var width = [];\n        for (var i = 0; i < glyphCount; i++) {\n            var glyph = new TtfLongHorMetric();\n            glyph.advanceWidth = this.readUInt16(this.offset);\n            glyph.lsb = this.readInt16(this.offset);\n            var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n            width.push(Math.floor(glyphWidth));\n        }\n        return width;\n    };\n    /**\n     * Reads the cmap table.\n     */\n    TtfReader.prototype.readCmapTable = function () {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset;\n        var table = new TtfCmapTable();\n        table.version = this.readUInt16(this.offset);\n        table.tablesCount = this.readUInt16(this.offset);\n        var position = this.offset;\n        var subTables = [];\n        for (var i = 0; i < table.tablesCount; i++) {\n            this.offset = position;\n            var subTable = new TtfCmapSubTable();\n            subTable.platformID = this.readUInt16(this.offset);\n            subTable.encodingID = this.readUInt16(this.offset);\n            subTable.offset = this.readUInt32(this.offset);\n            position = this.offset;\n            this.readCmapSubTable(subTable);\n            subTables[i] = subTable;\n        }\n        return subTables;\n    };\n    /**\n     * Reads the cmap sub table.\n     */\n    TtfReader.prototype.readCmapSubTable = function (subTable) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var format = this.readUInt16(this.offset);\n        var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n        var platform = (encoding === TtfCmapEncoding.Macintosh) ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n        if (encoding !== TtfCmapEncoding.Unknown) {\n            switch (format) {\n                case TtfCmapFormat.Apple:\n                    this.readAppleCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Microsoft:\n                    this.readMicrosoftCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Trimmed:\n                    this.readTrimmedCmapTable(subTable, encoding);\n                    break;\n            }\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfAppleCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n            this.maxMacIndex = 0;\n        }\n        for (var i = 0; i < 256; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readByte(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var collection = (encoding === TtfCmapEncoding.Unicode) ? this.microsoft : this.macintosh;\n        var table = new TtfMicrosoftCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.segCountX2 = this.readUInt16(this.offset);\n        table.searchRange = this.readUInt16(this.offset);\n        table.entrySelector = this.readUInt16(this.offset);\n        table.rangeShift = this.readUInt16(this.offset);\n        var segCount = table.segCountX2 / 2;\n        table.endCount = this.readUshortArray(segCount);\n        table.reservedPad = this.readUInt16(this.offset);\n        table.startCount = this.readUshortArray(segCount);\n        table.idDelta = this.readUshortArray(segCount);\n        table.idRangeOffset = this.readUshortArray(segCount);\n        var length = (table.length / 2 - 8) - (segCount * 4);\n        table.glyphID = this.readUshortArray(length);\n        // Process glyphIdArray array.\n        var codeOffset = 0;\n        var index = 0;\n        for (var j = 0; j < segCount; j++) {\n            for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n                if (table.idRangeOffset[j] === 0) {\n                    codeOffset = (k + table.idDelta[j]) & 65535;\n                }\n                else {\n                    index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n                    if (index >= table.glyphID.length) {\n                        continue;\n                    }\n                    codeOffset = (table.glyphID[index] + table.idDelta[j]) & 65535;\n                }\n                var glyph = new TtfGlyphInfo();\n                glyph.index = codeOffset;\n                glyph.width = this.getWidth(glyph.index);\n                var id = (encoding === TtfCmapEncoding.Symbol) ? ((k & 0xff00) === 0xf000 ? k & 0xff : k) : k;\n                glyph.charCode = id;\n                collection.setValue(id, glyph);\n                this.addGlyph(glyph, encoding);\n            }\n        }\n    };\n    /**\n     * Reads Trimed cmap table.\n     */\n    TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfTrimmedCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.firstCode = this.readUInt16(this.offset);\n        table.entryCount = this.readUInt16(this.offset);\n        for (var i = 0; i < table.entryCount; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readUInt16(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i + table.firstCode;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    TtfReader.prototype.initializeFontName = function (nameTable) {\n        for (var i = 0; i < nameTable.recordsCount; i++) {\n            var record = nameTable.nameRecords[i];\n            if (record.nameID === 1) {\n                //font family\n                this.metrics.fontFamily = record.name;\n            }\n            else if (record.nameID === 6) {\n                //post script name\n                this.metrics.postScriptName = record.name;\n            }\n            /* tslint:disable */\n            if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n                break;\n            }\n            /* tslint:disable */\n        }\n    };\n    TtfReader.prototype.getTable = function (name) {\n        // if (name === null) {\n        //     throw new Error('Argument Null Exception : name');\n        // }\n        var table = new TtfTableInfo();\n        var obj;\n        if (this.tableDirectory.containsKey(name)) {\n            obj = this.tableDirectory.getValue(name);\n        }\n        if (obj !== null && obj !== undefined) {\n            table = obj;\n        }\n        return table;\n    };\n    /**\n     * Returns width of the glyph.\n     */\n    TtfReader.prototype.getWidth = function (glyphCode) {\n        glyphCode = (glyphCode < this.width.length) ? glyphCode : this.width.length - 1;\n        return this.width[glyphCode];\n    };\n    /**\n     * Gets CMAP encoding based on platform ID and encoding ID.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n        var format = TtfCmapEncoding.Unknown;\n        if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n            // When building a symbol font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Symbol;\n        }\n        else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n            // When building a Unicode font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 1.\n            format = TtfCmapEncoding.Unicode;\n        }\n        else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n            // When building a font that will be used on the Macintosh,\n            // the platform ID should be 1 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Macintosh;\n        }\n        return format;\n    };\n    /* tslint:enable */\n    /**\n     * Adds glyph to the collection.\n     */\n    TtfReader.prototype.addGlyph = function (glyph, encoding) {\n        var collection = null;\n        switch (encoding) {\n            case TtfCmapEncoding.Unicode:\n                collection = this.microsoftGlyphs;\n                break;\n            case TtfCmapEncoding.Macintosh:\n            case TtfCmapEncoding.Symbol:\n                collection = this.macintoshGlyphs;\n                break;\n        }\n        collection.setValue(glyph.index, glyph);\n    };\n    /**\n     * Initializes metrics.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n        /* tslint:enable */\n        // if (cmapTables === null) {\n        //     throw new Error('ArgumentNullException : cmapTables');\n        // }\n        this.initializeFontName(nameTable);\n        // Get font encoding.\n        var bSymbol = false;\n        for (var i = 0; i < cmapTables.length; i++) {\n            var subTable = cmapTables[i];\n            var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n            if (encoding === TtfCmapEncoding.Symbol) {\n                bSymbol = true;\n                break;\n            }\n        }\n        this.metrics.isSymbol = bSymbol;\n        this.metrics.macStyle = headTable.macStyle;\n        this.metrics.isFixedPitch = (postTable.isFixedPitch !== 0);\n        this.metrics.italicAngle = postTable.italicAngle;\n        var factor = 1000 / headTable.unitsPerEm;\n        this.metrics.winAscent = os2Table.sTypoAscender * factor;\n        this.metrics.macAscent = horizontalHeadTable.ascender * factor;\n        //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n        // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n        this.metrics.capHeight = (os2Table.sCapHeight !== 0) ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n        this.metrics.winDescent = os2Table.sTypoDescender * factor;\n        this.metrics.macDescent = horizontalHeadTable.descender * factor;\n        //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n        this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n        this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n        var left = headTable.xMin * factor;\n        var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n        var right = headTable.xMax * factor;\n        var bottom = this.metrics.macDescent;\n        this.metrics.fontBox = new Rectangle(left, top, right, bottom);\n        // NOTE: Strange!\n        this.metrics.stemV = 80;\n        this.metrics.widthTable = this.updateWidth();\n        this.metrics.contains = this.tableDirectory.containsKey('CFF');\n        this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n        this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n    };\n    /**\n     * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n     */\n    TtfReader.prototype.updateWidth = function () {\n        var count = 256;\n        var bytes = [];\n        if (this.metrics.isSymbol) {\n            for (var i = 0; i < count; i++) {\n                var glyphInfo = this.getGlyph(String.fromCharCode(i));\n                bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n            }\n        }\n        else {\n            var byteToProcess = [];\n            var unknown = '?';\n            var space = String.fromCharCode(32);\n            for (var i = 0; i < count; i++) {\n                byteToProcess[0] = i;\n                var text = this.getString(byteToProcess, 0, byteToProcess.length);\n                var ch = (text.length > 0) ? text[0] : unknown;\n                var glyphInfo = this.getGlyph(ch);\n                if (!glyphInfo.empty) {\n                    bytes[i] = glyphInfo.width;\n                }\n                else {\n                    glyphInfo = this.getGlyph(space);\n                    bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n                }\n            }\n        }\n        return bytes;\n    };\n    /**\n     * Returns default glyph.\n     */\n    TtfReader.prototype.getDefaultGlyph = function () {\n        var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n        return glyph;\n    };\n    /**\n     * Reads unicode string from byte array.\n     */\n    TtfReader.prototype.getString = function (byteToProcess, start, length) {\n        var result = '';\n        for (var index = 0; index < length; index++) {\n            result += String.fromCharCode(byteToProcess[index + start]);\n        }\n        return result;\n    };\n    /**\n     * Reads loca table.\n     */\n    TtfReader.prototype.readLocaTable = function (bShort) {\n        var tableInfo = this.getTable('loca');\n        this.offset = tableInfo.offset;\n        var table = new TtfLocaTable();\n        var buffer = null;\n        if (bShort) {\n            var len = tableInfo.length / 2;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt16(this.offset) * 2;\n            }\n        }\n        else {\n            var len = tableInfo.length / 4;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt32(this.offset);\n            }\n        }\n        table.offsets = buffer;\n        return table;\n    };\n    /**\n     * Updates hash table of used glyphs.\n     */\n    TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Add zero key.\n        if (!glyphChars.containsKey(0)) {\n            glyphChars.setValue(0, 0);\n        }\n        var clone = new Dictionary();\n        var glyphCharKeys = glyphChars.keys();\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n        }\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            var nextKey = glyphCharKeys[i];\n            this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n        }\n    };\n    /**\n     * Checks if glyph is composite or not.\n     */\n    TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Is in range.\n        if (glyph < locaTable.offsets.length - 1) {\n            var glyphOffset = locaTable.offsets[glyph];\n            if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n                var tableInfo = this.getTable('glyf');\n                this.offset = tableInfo.offset + glyphOffset;\n                var glyphHeader = new TtfGlyphHeader();\n                glyphHeader.numberOfContours = this.readInt16(this.offset);\n                glyphHeader.xMin = this.readInt16(this.offset);\n                glyphHeader.yMin = this.readInt16(this.offset);\n                glyphHeader.xMax = this.readInt16(this.offset);\n                glyphHeader.yMax = this.readInt16(this.offset);\n                // Glyph is composite.\n                if (glyphHeader.numberOfContours < 0) {\n                    var skipBytes = 0;\n                    var entry = true;\n                    while (entry) {\n                        var flags = this.readUInt16(this.offset);\n                        var glyphIndex = this.readUInt16(this.offset);\n                        if (!glyphChars.containsKey(glyphIndex)) {\n                            glyphChars.setValue(glyphIndex, 0);\n                        }\n                        if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n                            break;\n                        }\n                        skipBytes = ((flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0) ? 4 : 2;\n                        if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n                            skipBytes += 2;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n                            skipBytes += 4;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n                            skipBytes += 2 * 4;\n                        }\n                        this.offset += skipBytes;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Creates new glyph tables based on chars that are used for output.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n        /* tslint:enable */\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        newLocaTable = [];\n        // Sorting used glyphs keys.\n        var activeGlyphs = glyphChars.keys();\n        activeGlyphs.sort(function (a, b) { return a - b; });\n        var glyphSize = 0;\n        for (var i = 0; i < activeGlyphs.length; i++) {\n            var glyphIndex = activeGlyphs[i];\n            if (locaTable.offsets.length > 0) {\n                glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n            }\n        }\n        var glyphSizeAligned = this.align(glyphSize);\n        newGlyphTable = [];\n        for (var i = 0; i < glyphSizeAligned; i++) {\n            newGlyphTable.push(0);\n        }\n        var nextGlyphOffset = 0;\n        var nextGlyphIndex = 0;\n        var table = this.getTable('glyf');\n        // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n        for (var i = 0; i < locaTable.offsets.length; i++) {\n            newLocaTable.push(nextGlyphOffset);\n            if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n                ++nextGlyphIndex;\n                newLocaTable[i] = nextGlyphOffset;\n                var oldGlyphOffset = locaTable.offsets[i];\n                var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n                if (oldNextGlyphOffset > 0) {\n                    this.offset = table.offset + oldGlyphOffset;\n                    var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n                    newGlyphTable = result.buffer;\n                    nextGlyphOffset += oldNextGlyphOffset;\n                }\n            }\n        }\n        return { glyphTableSize: glyphSize, newLocaTable: newLocaTable, newGlyphTable: newGlyphTable };\n    };\n    /**\n     * Updates new Loca table.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n        /* tslint:enable */\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTable');\n        }\n        var size = (bLocaIsShort) ? newLocaTable.length * 2 : newLocaTable.length * 4;\n        var count = this.align(size);\n        //BigEndianWiter\n        var writer = new BigEndianWriter(count);\n        for (var i = 0; i < newLocaTable.length; i++) {\n            var value = newLocaTable[i];\n            if (bLocaIsShort) {\n                value /= 2;\n                writer.writeShort(value);\n            }\n            else {\n                writer.writeInt(value);\n            }\n        }\n        return { newLocaUpdated: writer.data, newLocaSize: size };\n    };\n    /**\n     * Aligns number to be divisible on 4.\n     */\n    TtfReader.prototype.align = function (value) {\n        return (value + 3) & (~3);\n    };\n    /**\n     * Returns font program data.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n        var fontProgramLength = result.fontProgramLength;\n        var numTables = result.numTables;\n        var writer = new BigEndianWriter(fontProgramLength);\n        writer.writeInt(0x10000);\n        writer.writeShort(numTables);\n        var entrySelector = this.entrySelectors[numTables];\n        writer.writeShort((1 << (entrySelector & 31)) * 16);\n        writer.writeShort(entrySelector);\n        writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);\n        // Writing to destination buffer - checksums && sizes of used tables.\n        this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);\n        // // Writing to destination buffer - used glyphs.\n        this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n        return writer.data;\n    };\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        // glyf and loca are used by default;\n        numTables = 2;\n        var tableNames = this.tableNames;\n        var fontProgramLength = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            if (tableName !== 'glyf' && tableName !== 'loca') {\n                var table = this.getTable(tableName);\n                if (!table.empty) {\n                    ++numTables;\n                    fontProgramLength += this.align(table.length);\n                }\n            }\n        }\n        fontProgramLength += newLocaTableOut.length;\n        fontProgramLength += newGlyphTable.length;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        fontProgramLength += usedTablesSize;\n        return { fontProgramLength: fontProgramLength, numTables: numTables };\n    };\n    /**\n     * Writing to destination buffer - checksums and sizes of used tables.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        var nextTableSize = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            writer.writeString(tableName);\n            if (tableName === 'glyf') {\n                var checksum = this.calculateCheckSum(newGlyphTable);\n                writer.writeInt(checksum);\n                nextTableSize = glyphTableSize;\n            }\n            else if (tableName === 'loca') {\n                var checksum = this.calculateCheckSum(newLocaTableOut);\n                writer.writeInt(checksum);\n                nextTableSize = locaTableSize;\n            }\n            else {\n                writer.writeInt(tableInfo.checksum);\n                nextTableSize = tableInfo.length;\n            }\n            writer.writeUInt(usedTablesSize);\n            writer.writeUInt(nextTableSize);\n            usedTablesSize += this.align(nextTableSize);\n        }\n    };\n    /**\n     * Gets checksum from source buffer.\n     */\n    TtfReader.prototype.calculateCheckSum = function (bytes) {\n        if (bytes === null) {\n            throw new Error('Argument Null Exception : bytes');\n        }\n        var pos = 0;\n        var byte1 = 0;\n        var byte2 = 0;\n        var byte3 = 0;\n        var byte4 = 0;\n        for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n            byte4 += (bytes[pos++] & 255);\n            byte3 += (bytes[pos++] & 255);\n            byte2 += (bytes[pos++] & 255);\n            byte1 += (bytes[pos++] & 255);\n        }\n        var result = byte1;\n        result += (byte2 << 8);\n        result += (byte3 << 16);\n        result += (byte4 << 24);\n        return result;\n    };\n    /**\n     * Writing to destination buffer - used glyphs.\n     */\n    TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            if (tableName === 'glyf') {\n                writer.writeBytes(newGlyphTable);\n            }\n            else if (tableName === 'loca') {\n                writer.writeBytes(newLocaTable);\n            }\n            else {\n                var count = this.align(tableInfo.length);\n                var buff = [];\n                for (var i_1 = 0; i_1 < count; i_1++) {\n                    buff.push(0);\n                }\n                this.offset = tableInfo.offset;\n                var result = this.read(buff, 0, tableInfo.length);\n                writer.writeBytes(result.buffer);\n            }\n        }\n    };\n    //public methods\n    /**\n     * Sets position value of font data.\n     */\n    TtfReader.prototype.setOffset = function (offset) {\n        this.offset = offset;\n    };\n    /**\n     * Creates font Internals\n     * @private\n     */\n    TtfReader.prototype.createInternals = function () {\n        this.metrics = new TtfMetrics();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.bIsLocaShort = (headTable.indexToLocalFormat === 0);\n        var horizontalHeadTable = this.readHorizontalHeaderTable();\n        var os2Table = this.readOS2Table();\n        var postTable = this.readPostTable();\n        this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n        var subTables = this.readCmapTable();\n        this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n    };\n    TtfReader.prototype.getGlyph = function (charCode) {\n        if (typeof charCode === 'number') {\n            var obj1 = null;\n            if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n                if (this.microsoftGlyphs.containsKey(charCode)) {\n                    obj1 = this.microsoftGlyphs.getValue(charCode);\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n                if (this.macintoshGlyphs.containsKey(charCode)) {\n                    obj1 = this.macintoshGlyphs.getValue(charCode);\n                }\n            }\n            var glyph = (obj1 != null) ? obj1 : this.getDefaultGlyph();\n            return glyph;\n        }\n        else {\n            var obj = null;\n            var code = charCode.charCodeAt(0);\n            if (!this.metrics.isSymbol && this.microsoft !== null) {\n                if (this.microsoft.containsKey(code)) {\n                    obj = this.microsoft.getValue(code);\n                    if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                        this.isFontPresent = true;\n                    }\n                }\n                else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                    this.isFontPresent = false;\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n                // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n                if (this.maxMacIndex !== 0) {\n                    code %= this.maxMacIndex + 1;\n                }\n                else {\n                    code = ((code & 0xff00) === 0xf000 ? code & 0xff : code);\n                }\n                if (this.macintosh.containsKey(code)) {\n                    obj = this.macintosh.getValue(code);\n                    this.isFontPresent = true;\n                }\n            }\n            // Fix for StackOverFlow exception in XPS to PDF converter\n            if (charCode === StringTokenizer.whiteSpace && obj === null) {\n                obj = new TtfGlyphInfo();\n            }\n            var glyph = (obj !== null) ? obj : this.getDefaultGlyph();\n            return glyph;\n        }\n    };\n    /**\n     * Gets hash table with chars indexed by glyph index.\n     */\n    TtfReader.prototype.getGlyphChars = function (chars) {\n        if (chars === null || chars === undefined) {\n            throw new Error('Argument Null Exception : chars');\n        }\n        var dictionary = new Dictionary();\n        var charKeys = chars.keys();\n        for (var i = 0; i < charKeys.length; i++) {\n            var ch = charKeys[i];\n            var glyph = this.getGlyph(ch);\n            if (!glyph.empty) {\n                dictionary.setValue(glyph.index, ch.charCodeAt(0));\n            }\n        }\n        return dictionary;\n    };\n    /**\n     * Gets all glyphs.\n     */\n    TtfReader.prototype.getAllGlyphs = function () {\n        var allGlyphInfo = [];\n        var info = new TtfGlyphInfo();\n        var index = 0;\n        for (var i = 0; i < this.width.length; i++) {\n            var width = this.width[i];\n            info.index = index;\n            info.width = width;\n            allGlyphInfo.push(info);\n            index++;\n        }\n        return allGlyphInfo;\n    };\n    /**\n     * Reads a font's program.\n     * @private\n     */\n    TtfReader.prototype.readFontProgram = function (chars) {\n        var glyphChars = this.getGlyphChars(chars);\n        var locaTable = this.readLocaTable(this.bIsLocaShort);\n        if (glyphChars.size() < chars.size()) {\n            this.missedGlyphs = chars.size() - glyphChars.size();\n        }\n        this.updateGlyphChars(glyphChars, locaTable);\n        /* tslint:disable */\n        var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n        /* tslint:enable */\n        var glyphTableSize = result1.glyphTableSize;\n        var newLocaTable = result1.newLocaTable;\n        var newGlyphTable = result1.newGlyphTable;\n        var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n        var newLocaSize = result2.newLocaSize;\n        var newLocaUpdated = result2.newLocaUpdated;\n        var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n        return fontProgram;\n    };\n    /**\n     * Reconverts string to be in proper format saved into PDF file.\n     */\n    TtfReader.prototype.convertString = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        var glyph = '';\n        var i = 0;\n        for (var k = 0; k < text.length; k++) {\n            var ch = text[k];\n            var glyphInfo = this.getGlyph(ch);\n            if (!glyphInfo.empty) {\n                glyph += String.fromCharCode(glyphInfo.index);\n                i++;\n            }\n        }\n        return glyph;\n    };\n    /**\n     * Gets char width.\n     */\n    TtfReader.prototype.getCharWidth = function (code) {\n        var glyphInfo = this.getGlyph(code);\n        glyphInfo = (!glyphInfo.empty) ? glyphInfo : this.getDefaultGlyph();\n        var codeWidth = (!glyphInfo.empty) ? glyphInfo.width : 0;\n        return codeWidth;\n    };\n    TtfReader.prototype.readString = function (length, isUnicode) {\n        if (isUnicode === undefined) {\n            return this.readString(length, false);\n        }\n        else {\n            //let buffer : number[] = this.readBytes(length);\n            var result = '';\n            if (isUnicode) {\n                for (var i = 0; i < length; i++) {\n                    if (i % 2 !== 0) {\n                        result += String.fromCharCode(this.fontData[this.offset]);\n                    }\n                    this.offset += 1;\n                }\n            }\n            else {\n                for (var i = 0; i < length; i++) {\n                    result += String.fromCharCode(this.fontData[this.offset]);\n                    this.offset += 1;\n                }\n            }\n            return result;\n        }\n    };\n    TtfReader.prototype.readFixed = function (offset) {\n        var integer = this.readInt16(offset);\n        var sFraction = this.readInt16(offset + 2);\n        var fraction = sFraction / 16384;\n        return integer + fraction;\n    };\n    TtfReader.prototype.readInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n    };\n    TtfReader.prototype.readUInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return (i1 | i2 << 8 | i3 << 16 | i4 << 24);\n    };\n    // private readInt16(offset : number) : number {\n    //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    //     this.offset += 2;\n    //     return result;\n    // }\n    TtfReader.prototype.readInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n        result = result & (1 << 15) ? result - 0x10000 : result;\n        this.offset += 2;\n        return result;\n    };\n    TtfReader.prototype.readInt64 = function (offset) {\n        var low = this.readInt32(offset + 4);\n        var n = this.readInt32(offset) * 4294967296.0 + low;\n        if (low < 0) {\n            n += 4294967296;\n        }\n        return n;\n    };\n    TtfReader.prototype.readUInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) | this.fontData[offset + 1];\n        this.offset += 2;\n        return result;\n    };\n    /**\n     * Reads ushort array.\n     */\n    TtfReader.prototype.readUshortArray = function (length) {\n        var buffer = [];\n        for (var i = 0; i < length; i++) {\n            buffer[i] = this.readUInt16(this.offset);\n        }\n        return buffer;\n    };\n    TtfReader.prototype.readBytes = function (length) {\n        var result = [];\n        for (var i = 0; i < length; i++) {\n            result.push(this.fontData[this.offset]);\n            this.offset += 1;\n        }\n        return result;\n    };\n    TtfReader.prototype.readByte = function (offset) {\n        var result = this.fontData[offset];\n        this.offset += 1;\n        return result;\n    };\n    /**\n     * Reads bytes to array in BigEndian order.\n     * @private\n     */\n    TtfReader.prototype.read = function (buffer, index, count) {\n        if (buffer === null) {\n            throw new Error('Argument Null Exception : buffer');\n        }\n        var written = 0;\n        var read = 0;\n        do {\n            for (var i = 0; (i < count - written) && (this.offset + i < this.fontData.length); i++) {\n                buffer[index + i] = this.fontData[this.offset + i];\n            }\n            read = count - written;\n            this.offset += read;\n            written += read;\n        } while (written < count);\n        return { buffer: buffer, written: written };\n    };\n    return TtfReader;\n}());\nexport { TtfReader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}