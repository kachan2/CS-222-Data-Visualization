{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { PdfFontFamily, PdfFontStyle, FontEncoding } from './enum';\nimport { PdfFont } from './pdf-font';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStandardFontMetricsFactory } from './pdf-standard-font-metrics-factory';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStandardFont = /** @class */function (_super) {\n  __extends(PdfStandardFont, _super);\n  function PdfStandardFont(fontFamilyPrototype, size, style) {\n    var _this = _super.call(this, size, typeof style === 'undefined' ? fontFamilyPrototype instanceof PdfStandardFont ? fontFamilyPrototype.style : PdfFontStyle.Regular : style) || this;\n    /**\n     * Gets `ascent` of the font.\n     * @private\n     */\n    _this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Gets `encodings` for internal class use.\n     * @hidden\n     * @private\n     */\n    _this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding', 'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n    if (typeof fontFamilyPrototype === 'undefined') {\n      _this.pdfFontFamily = PdfFontFamily.Helvetica;\n    } else if (fontFamilyPrototype instanceof PdfStandardFont) {\n      _this.pdfFontFamily = fontFamilyPrototype.fontFamily;\n    } else {\n      _this.pdfFontFamily = fontFamilyPrototype;\n    }\n    _this.checkStyle();\n    _this.initializeInternals();\n    return _this;\n  }\n  Object.defineProperty(PdfStandardFont.prototype, \"fontFamily\", {\n    /* tslint:enable */\n    //Properties\n    /**\n     * Gets the `FontFamily`.\n     * @private\n     */\n    get: function () {\n      return this.pdfFontFamily;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //methods\n  /**\n   * Checks font `style` of the font.\n   * @private\n   */\n  PdfStandardFont.prototype.checkStyle = function () {\n    if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n      var style = this.style;\n      style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n      this.setStyle(style);\n    }\n  };\n  /**\n   * Returns `width` of the line.\n   * @public\n   */\n  PdfStandardFont.prototype.getLineWidth = function (line, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException:line');\n    }\n    var width = 0;\n    var name = this.name;\n    line = PdfStandardFont.convert(line);\n    for (var i = 0, len = line.length; i < len; i++) {\n      var ch = line[i];\n      var charWidth = this.getCharWidthInternal(ch, format);\n      width += charWidth;\n    }\n    var size = this.metrics.getSize(format);\n    width *= PdfFont.charSizeMultiplier * size;\n    width = this.applyFormatSettings(line, format, width);\n    return width;\n  };\n  /**\n   * Checks whether fonts are `equals`.\n   * @private\n   */\n  PdfStandardFont.prototype.equalsToFont = function (font) {\n    var equal = false;\n    var stFont = font;\n    if (stFont != null) {\n      var fontFamilyEqual = this.fontFamily === stFont.fontFamily;\n      var lineReducer = ~(PdfFontStyle.Underline | PdfFontStyle.Strikeout);\n      var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n      equal = fontFamilyEqual && styleEqual;\n    }\n    return equal;\n  };\n  /**\n   * `Initializes` font internals..\n   * @private\n   */\n  PdfStandardFont.prototype.initializeInternals = function () {\n    var equalFont = null;\n    // if (PdfDocument.EnableCache) {\n    equalFont = PdfDocument.cache.search(this);\n    // }\n    var internals = null;\n    // if (equalFont == null) {\n    // Create font metrics.\n    var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n    this.metrics = metrics;\n    internals = this.createInternals();\n    this.setInternals(internals);\n  };\n  /**\n   * `Creates` font`s dictionary.\n   * @private\n   */\n  PdfStandardFont.prototype.createInternals = function () {\n    var dictionary = new PdfDictionary();\n    dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n    dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n    if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n      var encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n      dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n    }\n    return dictionary;\n  };\n  /**\n   * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n   * @private\n   */\n  PdfStandardFont.prototype.getCharWidthInternal = function (charCode, format) {\n    var width = 0;\n    var code = 0;\n    code = charCode.charCodeAt(0);\n    if (this.name === '0' || this.name === '1' || this.name === '2' || this.name === '3' || this.name === '4') {\n      code = code - PdfStandardFont.charOffset;\n    }\n    code = code >= 0 && code !== 128 ? code : 0;\n    var metrics = this.metrics;\n    var widthTable = metrics.widthTable;\n    width = widthTable.items(code);\n    return width;\n  };\n  /**\n   * `Converts` the specified text.\n   * @private\n   */\n  PdfStandardFont.convert = function (text) {\n    return text;\n  };\n  //Constants\n  /**\n   * First character `position`.\n   * @private\n   */\n  PdfStandardFont.charOffset = 32;\n  return PdfStandardFont;\n}(PdfFont);\nexport { PdfStandardFont };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfFontFamily","PdfFontStyle","FontEncoding","PdfFont","PdfDocument","PdfStandardFontMetricsFactory","PdfDictionary","DictionaryProperties","PdfName","PdfStandardFont","_super","fontFamilyPrototype","size","style","_this","call","Regular","dictionaryProperties","encodings","pdfFontFamily","Helvetica","fontFamily","checkStyle","initializeInternals","defineProperty","get","enumerable","configurable","Symbol","ZapfDingbats","Bold","Italic","setStyle","getLineWidth","line","format","Error","width","name","convert","i","len","length","ch","charWidth","getCharWidthInternal","metrics","getSize","charSizeMultiplier","applyFormatSettings","equalsToFont","font","equal","stFont","fontFamilyEqual","lineReducer","Underline","Strikeout","styleEqual","equalFont","cache","search","internals","getMetrics","createInternals","setInternals","dictionary","items","setValue","type","subtype","type1","baseFont","postScriptName","encoding","WinAnsiEncoding","charCode","code","charCodeAt","charOffset","widthTable","text"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfFontFamily, PdfFontStyle, FontEncoding } from './enum';\nimport { PdfFont } from './pdf-font';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStandardFontMetricsFactory } from './pdf-standard-font-metrics-factory';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStandardFont = /** @class */ (function (_super) {\n    __extends(PdfStandardFont, _super);\n    function PdfStandardFont(fontFamilyPrototype, size, style) {\n        var _this = _super.call(this, size, (typeof style === 'undefined') ? ((fontFamilyPrototype instanceof PdfStandardFont) ? fontFamilyPrototype.style : PdfFontStyle.Regular) : style) || this;\n        /**\n         * Gets `ascent` of the font.\n         * @private\n         */\n        _this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Gets `encodings` for internal class use.\n         * @hidden\n         * @private\n         */\n        _this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding',\n            'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n        if (typeof fontFamilyPrototype === 'undefined') {\n            _this.pdfFontFamily = PdfFontFamily.Helvetica;\n        }\n        else if ((fontFamilyPrototype instanceof PdfStandardFont)) {\n            _this.pdfFontFamily = fontFamilyPrototype.fontFamily;\n        }\n        else {\n            _this.pdfFontFamily = fontFamilyPrototype;\n        }\n        _this.checkStyle();\n        _this.initializeInternals();\n        return _this;\n    }\n    Object.defineProperty(PdfStandardFont.prototype, \"fontFamily\", {\n        /* tslint:enable */\n        //Properties\n        /**\n         * Gets the `FontFamily`.\n         * @private\n         */\n        get: function () {\n            return this.pdfFontFamily;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //methods\n    /**\n     * Checks font `style` of the font.\n     * @private\n     */\n    PdfStandardFont.prototype.checkStyle = function () {\n        if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n            var style = this.style;\n            style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n            this.setStyle(style);\n        }\n    };\n    /**\n     * Returns `width` of the line.\n     * @public\n     */\n    PdfStandardFont.prototype.getLineWidth = function (line, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException:line');\n        }\n        var width = 0;\n        var name = this.name;\n        line = PdfStandardFont.convert(line);\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidthInternal(ch, format);\n            width += charWidth;\n        }\n        var size = this.metrics.getSize(format);\n        width *= (PdfFont.charSizeMultiplier * size);\n        width = this.applyFormatSettings(line, format, width);\n        return width;\n    };\n    /**\n     * Checks whether fonts are `equals`.\n     * @private\n     */\n    PdfStandardFont.prototype.equalsToFont = function (font) {\n        var equal = false;\n        var stFont = font;\n        if (stFont != null) {\n            var fontFamilyEqual = (this.fontFamily === stFont.fontFamily);\n            var lineReducer = (~(PdfFontStyle.Underline | PdfFontStyle.Strikeout));\n            var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n            equal = (fontFamilyEqual && styleEqual);\n        }\n        return equal;\n    };\n    /**\n     * `Initializes` font internals..\n     * @private\n     */\n    PdfStandardFont.prototype.initializeInternals = function () {\n        var equalFont = null;\n        // if (PdfDocument.EnableCache) {\n        equalFont = PdfDocument.cache.search(this);\n        // }\n        var internals = null;\n        // if (equalFont == null) {\n        // Create font metrics.\n        var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n        this.metrics = metrics;\n        internals = this.createInternals();\n        this.setInternals(internals);\n    };\n    /**\n     * `Creates` font`s dictionary.\n     * @private\n     */\n    PdfStandardFont.prototype.createInternals = function () {\n        var dictionary = new PdfDictionary();\n        dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n        dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n        if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n            var encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n            dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n        }\n        return dictionary;\n    };\n    /**\n     * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n     * @private\n     */\n    PdfStandardFont.prototype.getCharWidthInternal = function (charCode, format) {\n        var width = 0;\n        var code = 0;\n        code = charCode.charCodeAt(0);\n        if (this.name === '0' || this.name === '1' || this.name === '2' ||\n            this.name === '3' || this.name === '4') {\n            code = code - PdfStandardFont.charOffset;\n        }\n        code = (code >= 0 && code !== 128) ? code : 0;\n        var metrics = this.metrics;\n        var widthTable = metrics.widthTable;\n        width = widthTable.items(code);\n        return width;\n    };\n    /**\n     * `Converts` the specified text.\n     * @private\n     */\n    PdfStandardFont.convert = function (text) {\n        return text;\n    };\n    //Constants\n    /**\n     * First character `position`.\n     * @private\n     */\n    PdfStandardFont.charOffset = 32;\n    return PdfStandardFont;\n}(PdfFont));\nexport { PdfStandardFont };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}