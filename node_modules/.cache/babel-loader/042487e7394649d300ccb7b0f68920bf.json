{"ast":null,"code":"import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\nvar PdfGridColumn = /** @class */function () {\n  //Constructors\n  /**\n   * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n   * @private\n   */\n  function PdfGridColumn(grid) {\n    /**\n     * The `width` of the column.\n     * @default 0\n     * @private\n     */\n    this.columnWidth = 0;\n    this.grid = grid;\n  }\n  Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the 'PdfGridColumn'.\n     * @private\n     */\n    get: function () {\n      return this.columnWidth;\n    },\n    set: function (value) {\n      this.isCustomWidth = true;\n      this.columnWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n    /**\n     * Gets or sets the information about the text `formatting`.\n     * @private\n     */\n    get: function () {\n      if (this.stringFormat == null) {\n        this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n      }\n\n      return this.stringFormat;\n    },\n    set: function (value) {\n      this.stringFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridColumn;\n}();\nexport { PdfGridColumn };\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\nvar PdfGridColumnCollection = /** @class */function () {\n  //properties\n  //Constructors\n  /**\n   * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n   * @private\n   */\n  function PdfGridColumnCollection(grid) {\n    /**\n     * @hidden\n     * @private\n     */\n    this.internalColumns = [];\n    /**\n     * @hidden\n     * @private\n     */\n    this.columnWidth = 0;\n    this.grid = grid;\n    this.internalColumns = [];\n  }\n  //Iplementation\n  /**\n   * `Add` a new column to the 'PdfGrid'.\n   * @private\n   */\n  PdfGridColumnCollection.prototype.add = function (count) {\n    // public add(column : PdfGridColumn) : void\n    // public add(arg : number|PdfGridColumn) : void {\n    // if (typeof arg === 'number') {\n    for (var i = 0; i < count; i++) {\n      this.internalColumns.push(new PdfGridColumn(this.grid));\n      for (var index = 0; index < this.grid.rows.count; index++) {\n        var row = this.grid.rows.getRow(index);\n        var cell = new PdfGridCell();\n        cell.value = '';\n        row.cells.add(cell);\n      }\n    }\n    // } else {\n    //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n    //     this.columns.push(column);\n    //     return column;\n    // }\n  };\n\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n    /**\n     * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n     * @private\n     */\n    get: function () {\n      return this.internalColumns.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n    /**\n     * Gets the `widths`.\n     * @private\n     */\n    get: function () {\n      if (this.columnWidth === 0) {\n        this.columnWidth = this.measureColumnsWidth();\n      }\n      if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n        this.columnWidth = this.grid.initialWidth;\n        this.grid.isPageWidth = true;\n      }\n      return this.columnWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n    /**\n     * Gets the `array of PdfGridColumn`.[Read-Only]\n     * @private\n     */\n    get: function () {\n      return this.internalColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n   * @private\n   */\n  PdfGridColumnCollection.prototype.getColumn = function (index) {\n    if (index >= 0 && index <= this.columns.length) {\n      return this.columns[index];\n    } else {\n      throw Error('can not get the column from the index: ' + index);\n    }\n  };\n  //Implementation\n  /**\n   * `Calculates the column widths`.\n   * @private\n   */\n  PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n    var totalWidth = 0;\n    this.grid.measureColumnsWidth();\n    for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n      totalWidth += this.internalColumns[i].width;\n    }\n    return totalWidth;\n  };\n  /**\n   * Gets the `widths of the columns`.\n   * @private\n   */\n  PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n    var widths = [];\n    var summ = 0.0;\n    var subFactor = this.count;\n    for (var i = 0; i < this.count; i++) {\n      if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n        this.internalColumns[i].width = 0;\n      } else {\n        widths[i] = this.internalColumns[i].width;\n        if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n          totalWidth -= this.internalColumns[i].width;\n          subFactor--;\n        } else {\n          widths[i] = 0;\n        }\n      }\n    }\n    for (var i = 0; i < this.count; i++) {\n      var width = totalWidth / subFactor;\n      if (widths[i] <= 0) {\n        widths[i] = width;\n      }\n    }\n    return widths;\n  };\n  return PdfGridColumnCollection;\n}();\nexport { PdfGridColumnCollection };","map":{"version":3,"names":["PdfGridCell","PdfStringFormat","PdfGridColumn","grid","columnWidth","Object","defineProperty","prototype","get","set","value","isCustomWidth","enumerable","configurable","stringFormat","PdfGridColumnCollection","internalColumns","add","count","i","push","index","rows","row","getRow","cell","cells","length","measureColumnsWidth","initialWidth","style","allowHorizontalOverflow","isPageWidth","getColumn","columns","Error","totalWidth","width","getDefaultWidths","widths","summ","subFactor"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-column.js"],"sourcesContent":["import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\nvar PdfGridColumn = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n     * @private\n     */\n    function PdfGridColumn(grid) {\n        /**\n         * The `width` of the column.\n         * @default 0\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n    }\n    Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the 'PdfGridColumn'.\n         * @private\n         */\n        get: function () {\n            return this.columnWidth;\n        },\n        set: function (value) {\n            this.isCustomWidth = true;\n            this.columnWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n        /**\n         * Gets or sets the information about the text `formatting`.\n         * @private\n         */\n        get: function () {\n            if (this.stringFormat == null) {\n                this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n            }\n            return this.stringFormat;\n        },\n        set: function (value) {\n            this.stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridColumn;\n}());\nexport { PdfGridColumn };\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\nvar PdfGridColumnCollection = /** @class */ (function () {\n    //properties\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridColumnCollection(grid) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.internalColumns = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n        this.internalColumns = [];\n    }\n    //Iplementation\n    /**\n     * `Add` a new column to the 'PdfGrid'.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.add = function (count) {\n        // public add(column : PdfGridColumn) : void\n        // public add(arg : number|PdfGridColumn) : void {\n        // if (typeof arg === 'number') {\n        for (var i = 0; i < count; i++) {\n            this.internalColumns.push(new PdfGridColumn(this.grid));\n            for (var index = 0; index < this.grid.rows.count; index++) {\n                var row = this.grid.rows.getRow(index);\n                var cell = new PdfGridCell();\n                cell.value = '';\n                row.cells.add(cell);\n            }\n        }\n        // } else {\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n        //     this.columns.push(column);\n        //     return column;\n        // }\n    };\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.internalColumns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n        /**\n         * Gets the `widths`.\n         * @private\n         */\n        get: function () {\n            if (this.columnWidth === 0) {\n                this.columnWidth = this.measureColumnsWidth();\n            }\n            if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n                this.columnWidth = this.grid.initialWidth;\n                this.grid.isPageWidth = true;\n            }\n            return this.columnWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n        /**\n         * Gets the `array of PdfGridColumn`.[Read-Only]\n         * @private\n         */\n        get: function () {\n            return this.internalColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n     * @private\n     */\n    PdfGridColumnCollection.prototype.getColumn = function (index) {\n        if (index >= 0 && index <= this.columns.length) {\n            return this.columns[index];\n        }\n        else {\n            throw Error('can not get the column from the index: ' + index);\n        }\n    };\n    //Implementation\n    /**\n     * `Calculates the column widths`.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n        var totalWidth = 0;\n        this.grid.measureColumnsWidth();\n        for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n            totalWidth += this.internalColumns[i].width;\n        }\n        return totalWidth;\n    };\n    /**\n     * Gets the `widths of the columns`.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n        var widths = [];\n        var summ = 0.0;\n        var subFactor = this.count;\n        for (var i = 0; i < this.count; i++) {\n            if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n                this.internalColumns[i].width = 0;\n            }\n            else {\n                widths[i] = this.internalColumns[i].width;\n                if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n                    totalWidth -= this.internalColumns[i].width;\n                    subFactor--;\n                }\n                else {\n                    widths[i] = 0;\n                }\n            }\n        }\n        for (var i = 0; i < this.count; i++) {\n            var width = totalWidth / subFactor;\n            if (widths[i] <= 0) {\n                widths[i] = width;\n            }\n        }\n        return widths;\n    };\n    return PdfGridColumnCollection;\n}());\nexport { PdfGridColumnCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}