{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfColorBlend.ts class for EJ2-PDF\n */\nimport { PdfColorSpace } from './../enum';\nimport { PdfSampledFunction } from './../../general/functions/pdf-sampled-function';\nimport { PdfBlend } from './pdf-blend';\n/**\n * `PdfColorBlend` Represents the arrays of colors and positions used for\n *  interpolating color blending in a multicolor gradient.\n * @private\n */\nvar PdfColorBlend = /** @class */function (_super) {\n  __extends(PdfColorBlend, _super);\n  function PdfColorBlend(count) {\n    var _this = _super.call(this) || this;\n    if (typeof count === 'number') {\n      _this = _super.call(this, count) || this;\n    }\n    return _this;\n  }\n  Object.defineProperty(PdfColorBlend.prototype, \"colors\", {\n    //Properties\n    /**\n     * Gets or sets the array of colors.\n     * @public\n     */\n    get: function () {\n      return this.mcolors;\n    },\n    set: function (value) {\n      if (value == null) {\n        throw new Error('ArgumentNullException : Colors');\n      }\n      this.mcolors = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  /**\n   * Gets the function.\n   * @param colorSpace The color space.\n   * @public\n   */\n  PdfColorBlend.prototype.getFunction = function (colorSpace) {\n    var domain = [0, 1];\n    var colourComponents = this.getColorComponentsCount(colorSpace);\n    var maxComponentValue = this.getMaxComponentValue(colorSpace);\n    var range = this.setRange(colourComponents, maxComponentValue);\n    var func = null;\n    if (this.mbrush == null && typeof this.mbrush === 'undefined') {\n      var sizes = [1];\n      var samplesCount = void 0;\n      var step = 1;\n      if (this.positions.length === 2) {\n        samplesCount = 2;\n      } else {\n        var positions = this.positions;\n        var intervals = this.getIntervals(positions);\n        var gcd = this.gcd(intervals);\n        step = gcd;\n        samplesCount = 1 / gcd + 1;\n      }\n      sizes[0] = samplesCount;\n      var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);\n      func = new PdfSampledFunction(domain, range, sizes, samples);\n      return func;\n    }\n    return func;\n  };\n  /**\n   * 'cloneColorBlend' Clones this instance.\n   * @public\n   */\n  PdfColorBlend.prototype.cloneColorBlend = function () {\n    var cBlend = this;\n    if (this.mcolors != null && typeof this.mcolors !== 'undefined') {\n      cBlend.colors = this.mcolors;\n    }\n    if (this.positions != null && typeof this.positions !== 'undefined') {\n      cBlend.positions = this.positions;\n    }\n    return cBlend;\n  };\n  /**\n   * Sets the range.\n   * @param colourComponents The colour components.\n   * @param maxValue The max value.\n   */\n  PdfColorBlend.prototype.setRange = function (colourComponents, maxValue) {\n    var range = [colourComponents * 2];\n    for (var i = 0; i < colourComponents; ++i) {\n      range[i * 2] = 0;\n      range[i * 2 + 1] = 1;\n    }\n    return range;\n  };\n  /**\n   * Calculates the color components count according to colour space.\n   * @param colorSpace The color space.\n   */\n  PdfColorBlend.prototype.getColorComponentsCount = function (colorSpace) {\n    var count = 0;\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        count = 3;\n        break;\n      case PdfColorSpace.Cmyk:\n        count = 4;\n        break;\n      case PdfColorSpace.GrayScale:\n        count = 1;\n        break;\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n    }\n    return count;\n  };\n  /**\n   * Gets samples values for specified colour space.\n   * @param colorSpace The color space.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n  PdfColorBlend.prototype.getSamplesValues = function (colorSpace, sampleCount, maxComponentValue, step) {\n    var values;\n    switch (colorSpace) {\n      case PdfColorSpace.GrayScale:\n        values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);\n        break;\n      case PdfColorSpace.Cmyk:\n        values = this.getCmykSamples(sampleCount, maxComponentValue, step);\n        break;\n      case PdfColorSpace.Rgb:\n        values = this.getRgbSamples(sampleCount, maxComponentValue, step);\n        break;\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n    }\n    return values;\n  };\n  /**\n   * Gets the grayscale samples.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n  PdfColorBlend.prototype.getGrayscaleSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 2];\n    for (var i = 0; i < sampleCount; ++i) {\n      var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);\n      var index = i * 2;\n    }\n    return values;\n  };\n  /**\n   * Gets the RGB samples.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n  PdfColorBlend.prototype.getRgbSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 3];\n    for (var i = 0; i < sampleCount; ++i) {\n      var color = this.getNextColor(i, step, PdfColorSpace.Rgb);\n      var index = i * 3;\n      values[index] = color.r;\n      values[index + 1] = color.g;\n      values[index + 2] = color.b;\n    }\n    return values;\n  };\n  /**\n   * Gets the CMYK samples.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n  PdfColorBlend.prototype.getCmykSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 4];\n    for (var i = 0; i < sampleCount; i++) {\n      var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);\n      var index = i * 4;\n      values[index] = color.c * maxComponentValue;\n      values[index + 1] = color.m * maxComponentValue;\n      values[index + 2] = color.y * maxComponentValue;\n      values[index + 3] = color.k * maxComponentValue;\n    }\n    return values;\n  };\n  /**\n   * Calculates the color that should be at the specified index.\n   * @param index The index.\n   * @param step The step.\n   * @param colorSpace The color space.\n   */\n  PdfColorBlend.prototype.getNextColor = function (index, step, colorSpace) {\n    var position = step * index;\n    var indexHi;\n    var indexLow;\n    var result = this.getIndices(position, indexLow, indexHi);\n    indexLow = result.indexLow;\n    indexHi = result.indexHi;\n    var color;\n    if (indexLow === indexHi) {\n      color = this.mcolors[indexLow];\n    } else {\n      var positionLow = this.positions[indexLow];\n      var positionHi = this.positions[indexHi];\n      var colorLow = this.mcolors[indexLow];\n      var colorHi = this.mcolors[indexHi];\n      var t = (position - positionLow) / (positionHi - positionLow);\n      color = this.interpolate(t, colorLow, colorHi, colorSpace);\n    }\n    return color;\n  };\n  /**\n   * Gets the indices.\n   * @param position The position.\n   * @param indexLow The index low.\n   * @param indexHi The index hi.\n   */\n  PdfColorBlend.prototype.getIndices = function (position, indexLow, indexHi) {\n    var positions = this.positions;\n    indexLow = 0;\n    indexHi = 0;\n    for (var i = 0; i < this.mcolors.length; ++i) {\n      var currPos = positions[i];\n      if (currPos === position) {\n        indexHi = i;\n        indexLow = i;\n        break;\n      } else if (currPos > position) {\n        indexHi = i;\n        break;\n      }\n      indexLow = i;\n      indexHi = i;\n    }\n    return {\n      indexLow: indexLow,\n      indexHi: indexHi\n    };\n  };\n  /**\n   * Calculates the max component value.\n   * @param colorSpace The color space.\n   */\n  PdfColorBlend.prototype.getMaxComponentValue = function (colorSpace) {\n    var result = 0;\n    switch (colorSpace) {\n      case PdfColorSpace.Cmyk:\n      case PdfColorSpace.Rgb:\n        result = 255;\n        break;\n      case PdfColorSpace.GrayScale:\n        result = 65535;\n        break;\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + 'colorSpace');\n    }\n    return result;\n  };\n  /**\n   * Gets an intervals array from the positions array.\n   * @param positions The positions array.\n   */\n  PdfColorBlend.prototype.getIntervals = function (positions) {\n    var count = positions.length;\n    var intervals = [count - 1];\n    var prev = positions[0];\n    for (var i = 1; i < count; ++i) {\n      var v = positions[i];\n      intervals[i - 1] = v - prev;\n      prev = v;\n    }\n    return intervals;\n  };\n  return PdfColorBlend;\n}(PdfBlend);\nexport { PdfColorBlend };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfColorSpace","PdfSampledFunction","PdfBlend","PdfColorBlend","_super","count","_this","call","defineProperty","get","mcolors","set","value","Error","enumerable","configurable","getFunction","colorSpace","domain","colourComponents","getColorComponentsCount","maxComponentValue","getMaxComponentValue","range","setRange","func","mbrush","sizes","samplesCount","step","positions","length","intervals","getIntervals","gcd","samples","getSamplesValues","cloneColorBlend","cBlend","colors","maxValue","i","Rgb","Cmyk","GrayScale","sampleCount","values","getGrayscaleSamples","getCmykSamples","getRgbSamples","color","getNextColor","index","r","g","c","m","y","k","position","indexHi","indexLow","result","getIndices","positionLow","positionHi","colorLow","colorHi","t","interpolate","currPos","prev","v"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-color-blend.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfColorBlend.ts class for EJ2-PDF\n */\nimport { PdfColorSpace } from './../enum';\nimport { PdfSampledFunction } from './../../general/functions/pdf-sampled-function';\nimport { PdfBlend } from './pdf-blend';\n/**\n * `PdfColorBlend` Represents the arrays of colors and positions used for\n *  interpolating color blending in a multicolor gradient.\n * @private\n */\nvar PdfColorBlend = /** @class */ (function (_super) {\n    __extends(PdfColorBlend, _super);\n    function PdfColorBlend(count) {\n        var _this = _super.call(this) || this;\n        if (typeof count === 'number') {\n            _this = _super.call(this, count) || this;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfColorBlend.prototype, \"colors\", {\n        //Properties\n        /**\n         * Gets or sets the array of colors.\n         * @public\n         */\n        get: function () {\n            return this.mcolors;\n        },\n        set: function (value) {\n            if ((value == null)) {\n                throw new Error('ArgumentNullException : Colors');\n            }\n            this.mcolors = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * Gets the function.\n     * @param colorSpace The color space.\n     * @public\n     */\n    PdfColorBlend.prototype.getFunction = function (colorSpace) {\n        var domain = [0, 1];\n        var colourComponents = this.getColorComponentsCount(colorSpace);\n        var maxComponentValue = this.getMaxComponentValue(colorSpace);\n        var range = this.setRange(colourComponents, maxComponentValue);\n        var func = null;\n        if ((this.mbrush == null && typeof this.mbrush === 'undefined')) {\n            var sizes = [1];\n            var samplesCount = void 0;\n            var step = 1;\n            if (this.positions.length === 2) {\n                samplesCount = 2;\n            }\n            else {\n                var positions = this.positions;\n                var intervals = this.getIntervals(positions);\n                var gcd = this.gcd(intervals);\n                step = gcd;\n                samplesCount = (((1 / gcd)) + 1);\n            }\n            sizes[0] = samplesCount;\n            var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);\n            func = new PdfSampledFunction(domain, range, sizes, samples);\n            return func;\n        }\n        return func;\n    };\n    /**\n     * 'cloneColorBlend' Clones this instance.\n     * @public\n     */\n    PdfColorBlend.prototype.cloneColorBlend = function () {\n        var cBlend = this;\n        if ((this.mcolors != null && typeof this.mcolors !== 'undefined')) {\n            cBlend.colors = (this.mcolors);\n        }\n        if ((this.positions != null && typeof this.positions !== 'undefined')) {\n            cBlend.positions = (this.positions);\n        }\n        return cBlend;\n    };\n    /**\n     * Sets the range.\n     * @param colourComponents The colour components.\n     * @param maxValue The max value.\n     */\n    PdfColorBlend.prototype.setRange = function (colourComponents, maxValue) {\n        var range = [(colourComponents * 2)];\n        for (var i = 0; (i < colourComponents); ++i) {\n            range[(i * 2)] = 0;\n            range[((i * 2) + 1)] = 1;\n        }\n        return range;\n    };\n    /**\n     * Calculates the color components count according to colour space.\n     * @param colorSpace The color space.\n     */\n    PdfColorBlend.prototype.getColorComponentsCount = function (colorSpace) {\n        var count = 0;\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                count = 3;\n                break;\n            case PdfColorSpace.Cmyk:\n                count = 4;\n                break;\n            case PdfColorSpace.GrayScale:\n                count = 1;\n                break;\n            default:\n                throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n        }\n        return count;\n    };\n    /**\n     * Gets samples values for specified colour space.\n     * @param colorSpace The color space.\n     * @param sampleCount The sample count.\n     * @param maxComponentValue The max component value.\n     * @param step The step.\n     */\n    PdfColorBlend.prototype.getSamplesValues = function (colorSpace, sampleCount, maxComponentValue, step) {\n        var values;\n        switch (colorSpace) {\n            case PdfColorSpace.GrayScale:\n                values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);\n                break;\n            case PdfColorSpace.Cmyk:\n                values = this.getCmykSamples(sampleCount, maxComponentValue, step);\n                break;\n            case PdfColorSpace.Rgb:\n                values = this.getRgbSamples(sampleCount, maxComponentValue, step);\n                break;\n            default:\n                throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n        }\n        return values;\n    };\n    /**\n     * Gets the grayscale samples.\n     * @param sampleCount The sample count.\n     * @param maxComponentValue The max component value.\n     * @param step The step.\n     */\n    PdfColorBlend.prototype.getGrayscaleSamples = function (sampleCount, maxComponentValue, step) {\n        var values = [(sampleCount * 2)];\n        for (var i = 0; (i < sampleCount); ++i) {\n            var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);\n            var index = (i * 2);\n        }\n        return values;\n    };\n    /**\n     * Gets the RGB samples.\n     * @param sampleCount The sample count.\n     * @param maxComponentValue The max component value.\n     * @param step The step.\n     */\n    PdfColorBlend.prototype.getRgbSamples = function (sampleCount, maxComponentValue, step) {\n        var values = [(sampleCount * 3)];\n        for (var i = 0; (i < sampleCount); ++i) {\n            var color = this.getNextColor(i, step, PdfColorSpace.Rgb);\n            var index = (i * 3);\n            values[index] = color.r;\n            values[(index + 1)] = color.g;\n            values[(index + 2)] = color.b;\n        }\n        return values;\n    };\n    /**\n     * Gets the CMYK samples.\n     * @param sampleCount The sample count.\n     * @param maxComponentValue The max component value.\n     * @param step The step.\n     */\n    PdfColorBlend.prototype.getCmykSamples = function (sampleCount, maxComponentValue, step) {\n        var values = [(sampleCount * 4)];\n        for (var i = 0; (i < sampleCount); i++) {\n            var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);\n            var index = (i * 4);\n            values[index] = ((color.c * maxComponentValue));\n            values[(index + 1)] = ((color.m * maxComponentValue));\n            values[(index + 2)] = ((color.y * maxComponentValue));\n            values[(index + 3)] = ((color.k * maxComponentValue));\n        }\n        return values;\n    };\n    /**\n     * Calculates the color that should be at the specified index.\n     * @param index The index.\n     * @param step The step.\n     * @param colorSpace The color space.\n     */\n    PdfColorBlend.prototype.getNextColor = function (index, step, colorSpace) {\n        var position = (step * index);\n        var indexHi;\n        var indexLow;\n        var result = this.getIndices(position, indexLow, indexHi);\n        indexLow = result.indexLow;\n        indexHi = result.indexHi;\n        var color;\n        if (indexLow === indexHi) {\n            color = this.mcolors[indexLow];\n        }\n        else {\n            var positionLow = this.positions[indexLow];\n            var positionHi = this.positions[indexHi];\n            var colorLow = this.mcolors[indexLow];\n            var colorHi = this.mcolors[indexHi];\n            var t = ((position - positionLow) / (positionHi - positionLow));\n            color = this.interpolate(t, colorLow, colorHi, colorSpace);\n        }\n        return color;\n    };\n    /**\n     * Gets the indices.\n     * @param position The position.\n     * @param indexLow The index low.\n     * @param indexHi The index hi.\n     */\n    PdfColorBlend.prototype.getIndices = function (position, indexLow, indexHi) {\n        var positions = this.positions;\n        indexLow = 0;\n        indexHi = 0;\n        for (var i = 0; (i < this.mcolors.length); ++i) {\n            var currPos = positions[i];\n            if ((currPos === position)) {\n                indexHi = i;\n                indexLow = i;\n                break;\n            }\n            else if ((currPos > position)) {\n                indexHi = i;\n                break;\n            }\n            indexLow = i;\n            indexHi = i;\n        }\n        return { indexLow: indexLow, indexHi: indexHi };\n    };\n    /**\n     * Calculates the max component value.\n     * @param colorSpace The color space.\n     */\n    PdfColorBlend.prototype.getMaxComponentValue = function (colorSpace) {\n        var result = 0;\n        switch (colorSpace) {\n            case PdfColorSpace.Cmyk:\n            case PdfColorSpace.Rgb:\n                result = 255;\n                break;\n            case PdfColorSpace.GrayScale:\n                result = 65535;\n                break;\n            default:\n                throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + 'colorSpace');\n        }\n        return result;\n    };\n    /**\n     * Gets an intervals array from the positions array.\n     * @param positions The positions array.\n     */\n    PdfColorBlend.prototype.getIntervals = function (positions) {\n        var count = positions.length;\n        var intervals = [(count - 1)];\n        var prev = positions[0];\n        for (var i = 1; (i < count); ++i) {\n            var v = positions[i];\n            intervals[(i - 1)] = (v - prev);\n            prev = v;\n        }\n        return intervals;\n    };\n    return PdfColorBlend;\n}(PdfBlend));\nexport { PdfColorBlend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}