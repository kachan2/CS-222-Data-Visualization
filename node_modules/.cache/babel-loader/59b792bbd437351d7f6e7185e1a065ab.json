{"ast":null,"code":"/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStringFormat = /** @class */function () {\n  function PdfStringFormat(arg1, arg2) {\n    /**\n     * The `scaling factor` of the text being drawn.\n     * @private\n     */\n    this.scalingFactor = 100.0;\n    /**\n     * Indicates text `wrapping` type.\n     * @private\n     */\n    this.wordWrapType = PdfWordWrapType.Word;\n    this.internalLineLimit = true;\n    this.wordWrapType = PdfWordWrapType.Word;\n    if (typeof arg1 !== 'undefined' && typeof arg1 !== 'string') {\n      this.textAlignment = arg1;\n    }\n    if (typeof arg2 !== 'undefined') {\n      this.verticalAlignment = arg2;\n    }\n  }\n  Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n    //Properties\n    /**\n     * Gets or sets the `horizontal` text alignment\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the text alignment\n     * stringFormat.alignment = PdfTextAlignment.Center;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.textAlignment;\n    },\n    set: function (value) {\n      this.textAlignment = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n    get: function () {\n      return this.direction;\n    },\n    set: function (value) {\n      this.direction = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n    /**\n     * Gets or sets the `vertical` text alignment.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the vertical alignment\n     * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n        return PdfVerticalAlignment.Top;\n      } else {\n        return this.verticalAlignment;\n      }\n    },\n    set: function (value) {\n      this.verticalAlignment = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n    /**\n     * Gets or sets the value that indicates text `direction` mode.\n     * @private\n     */\n    get: function () {\n      if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n        return false;\n      } else {\n        return this.isRightToLeft;\n      }\n    },\n    set: function (value) {\n      this.isRightToLeft = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets value that indicates a `size` among the characters in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set character spacing\n     * stringFormat.characterSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n        return 0;\n      } else {\n        return this.internalCharacterSpacing;\n      }\n    },\n    set: function (value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets value that indicates a `size` among the words in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set word spacing\n     * stringFormat.wordSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n        return 0;\n      } else {\n        return this.internalWordSpacing;\n      }\n    },\n    set: function (value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n    /**\n     * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // set string\n     * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n     * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n     * // set rectangle bounds\n     * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set line spacing\n     * stringFormat.lineSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.leading === 'undefined' || this.leading == null) {\n        return 0;\n      } else {\n        return this.leading;\n      }\n    },\n    set: function (value) {\n      this.leading = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n    /**\n     * Gets or sets a value indicating whether the text is `clipped` or not.\n     * @private\n     */\n    get: function () {\n      if (typeof this.clip === 'undefined' || this.clip == null) {\n        return false;\n      } else {\n        return this.clip;\n      }\n    },\n    set: function (value) {\n      this.clip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n    /**\n     * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n     * @private\n     */\n    get: function () {\n      if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n        return PdfSubSuperScript.None;\n      } else {\n        return this.pdfSubSuperScript;\n      }\n    },\n    set: function (value) {\n      this.pdfSubSuperScript = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n    /**\n     * Gets or sets the `indent` of the first line in the paragraph.\n     * @private\n     */\n    get: function () {\n      if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n        return 0;\n      } else {\n        return this.internalParagraphIndent;\n      }\n    },\n    set: function (value) {\n      this.internalParagraphIndent = value;\n      this.firstLineIndent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n    /**\n     * Gets or sets a value indicating whether [`line limit`].\n     * @private\n     */\n    get: function () {\n      return this.internalLineLimit;\n    },\n    set: function (value) {\n      this.internalLineLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n    /**\n     * Gets or sets a value indicating whether [`measure trailing spaces`].\n     * @private\n     */\n    get: function () {\n      if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n        return false;\n      } else {\n        return this.trailingSpaces;\n      }\n    },\n    set: function (value) {\n      this.trailingSpaces = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n    /**\n     * Gets or sets a value indicating whether [`no clip`].\n     * @private\n     */\n    get: function () {\n      if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n        return false;\n      } else {\n        return this.isNoClip;\n      }\n    },\n    set: function (value) {\n      this.isNoClip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n    /**\n     * Gets or sets value indicating type of the text `wrapping`.\n     * @private\n     */\n    get: function () {\n      // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n      //     return PdfWordWrapType.Word;\n      // } else {\n      return this.wordWrapType;\n      // }\n    },\n\n    set: function (value) {\n      this.wordWrapType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n    /**\n     * Gets or sets the `scaling factor`.\n     * @private\n     */\n    get: function () {\n      // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n      //     return 100;\n      // } else {\n      return this.scalingFactor;\n      // }\n    },\n\n    set: function (value) {\n      if (value <= 0) {\n        throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n      }\n      this.scalingFactor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n    /**\n     * Gets or sets the `indent` of the first line in the text.\n     * @private\n     */\n    get: function () {\n      if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n        return 0;\n      } else {\n        return this.initialLineIndent;\n      }\n    },\n    set: function (value) {\n      this.initialLineIndent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Clones` the object.\n   * @private\n   */\n  //IClonable implementation\n  PdfStringFormat.prototype.clone = function () {\n    var format = this;\n    return format;\n  };\n  return PdfStringFormat;\n}();\nexport { PdfStringFormat };","map":{"version":3,"names":["PdfVerticalAlignment","PdfSubSuperScript","PdfWordWrapType","PdfStringFormat","arg1","arg2","scalingFactor","wordWrapType","Word","internalLineLimit","textAlignment","verticalAlignment","Object","defineProperty","prototype","get","set","value","enumerable","configurable","direction","Top","isRightToLeft","internalCharacterSpacing","internalWordSpacing","leading","clip","pdfSubSuperScript","None","internalParagraphIndent","firstLineIndent","trailingSpaces","isNoClip","Error","initialLineIndent","clone","format"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-string-format.js"],"sourcesContent":["/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStringFormat = /** @class */ (function () {\n    function PdfStringFormat(arg1, arg2) {\n        /**\n         * The `scaling factor` of the text being drawn.\n         * @private\n         */\n        this.scalingFactor = 100.0;\n        /**\n         * Indicates text `wrapping` type.\n         * @private\n         */\n        this.wordWrapType = PdfWordWrapType.Word;\n        this.internalLineLimit = true;\n        this.wordWrapType = PdfWordWrapType.Word;\n        if ((typeof arg1 !== 'undefined') && (typeof arg1 !== 'string')) {\n            this.textAlignment = arg1;\n        }\n        if (typeof arg2 !== 'undefined') {\n            this.verticalAlignment = arg2;\n        }\n    }\n    Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n        //Properties\n        /**\n         * Gets or sets the `horizontal` text alignment\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the text alignment\n         * stringFormat.alignment = PdfTextAlignment.Center;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.textAlignment;\n        },\n        set: function (value) {\n            this.textAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n        get: function () {\n            return this.direction;\n        },\n        set: function (value) {\n            this.direction = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n        /**\n         * Gets or sets the `vertical` text alignment.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the vertical alignment\n         * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n                return PdfVerticalAlignment.Top;\n            }\n            else {\n                return this.verticalAlignment;\n            }\n        },\n        set: function (value) {\n            this.verticalAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n        /**\n         * Gets or sets the value that indicates text `direction` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n                return false;\n            }\n            else {\n                return this.isRightToLeft;\n            }\n        },\n        set: function (value) {\n            this.isRightToLeft = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the characters in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set character spacing\n         * stringFormat.characterSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalCharacterSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the words in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set word spacing\n         * stringFormat.wordSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalWordSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n        /**\n         * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // set string\n         * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n         * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n         * // set rectangle bounds\n         * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set line spacing\n         * stringFormat.lineSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.leading === 'undefined' || this.leading == null) {\n                return 0;\n            }\n            else {\n                return this.leading;\n            }\n        },\n        set: function (value) {\n            this.leading = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n        /**\n         * Gets or sets a value indicating whether the text is `clipped` or not.\n         * @private\n         */\n        get: function () {\n            if (typeof this.clip === 'undefined' || this.clip == null) {\n                return false;\n            }\n            else {\n                return this.clip;\n            }\n        },\n        set: function (value) {\n            this.clip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n        /**\n         * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n                return PdfSubSuperScript.None;\n            }\n            else {\n                return this.pdfSubSuperScript;\n            }\n        },\n        set: function (value) {\n            this.pdfSubSuperScript = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the paragraph.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n                return 0;\n            }\n            else {\n                return this.internalParagraphIndent;\n            }\n        },\n        set: function (value) {\n            this.internalParagraphIndent = value;\n            this.firstLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n        /**\n         * Gets or sets a value indicating whether [`line limit`].\n         * @private\n         */\n        get: function () {\n            return this.internalLineLimit;\n        },\n        set: function (value) {\n            this.internalLineLimit = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n        /**\n         * Gets or sets a value indicating whether [`measure trailing spaces`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n                return false;\n            }\n            else {\n                return this.trailingSpaces;\n            }\n        },\n        set: function (value) {\n            this.trailingSpaces = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n        /**\n         * Gets or sets a value indicating whether [`no clip`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n                return false;\n            }\n            else {\n                return this.isNoClip;\n            }\n        },\n        set: function (value) {\n            this.isNoClip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n        /**\n         * Gets or sets value indicating type of the text `wrapping`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n            //     return PdfWordWrapType.Word;\n            // } else {\n            return this.wordWrapType;\n            // }\n        },\n        set: function (value) {\n            this.wordWrapType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n        /**\n         * Gets or sets the `scaling factor`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n            //     return 100;\n            // } else {\n            return this.scalingFactor;\n            // }\n        },\n        set: function (value) {\n            if (value <= 0) {\n                throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n            }\n            this.scalingFactor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the text.\n         * @private\n         */\n        get: function () {\n            if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n                return 0;\n            }\n            else {\n                return this.initialLineIndent;\n            }\n        },\n        set: function (value) {\n            this.initialLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    //IClonable implementation\n    PdfStringFormat.prototype.clone = function () {\n        var format = this;\n        return format;\n    };\n    return PdfStringFormat;\n}());\nexport { PdfStringFormat };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}