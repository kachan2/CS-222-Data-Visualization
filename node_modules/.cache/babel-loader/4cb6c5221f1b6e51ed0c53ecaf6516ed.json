{"ast":null,"code":"/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nexport var InternalEnum;\n(function (InternalEnum) {\n  //Internals\n  /**\n   * public Enum for `ForceEncoding`.\n   * @private\n   */\n  var ForceEncoding;\n  (function (ForceEncoding) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Ascii`.\n     * @private\n     */\n    ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n    /**\n     * Specifies the type of `Unicode`.\n     * @private\n     */\n    ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n  })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n  /**\n   * public Enum for `SourceType`.\n   * @private\n   */\n  var SourceType;\n  (function (SourceType) {\n    /**\n     * Specifies the type of `StringValue`.\n     * @private\n     */\n    SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n    /**\n     * Specifies the type of `ByteBuffer`.\n     * @private\n     */\n    SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n  })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\nvar PdfString = /** @class */function () {\n  function PdfString(value) {\n    /**\n     * Value indicating whether the string was converted to hex.\n     * @default false\n     * @private\n     */\n    this.bHex = false;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n    this.position1 = -1;\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n    this.clonedObject1 = null;\n    /**\n     * `Shows` if the data of the stream was decrypted.\n     * @default false\n     * @private\n     */\n    this.bDecrypted = false;\n    /**\n     * Shows if the data of the stream `was decrypted`.\n     * @default false\n     * @private\n     */\n    this.isParentDecrypted = false;\n    /**\n     * Gets a value indicating whether the object is `packed or not`.\n     * @default false\n     * @private\n     */\n    this.isPacked = false;\n    /**\n     * @hidden\n     * @private\n     */\n    this.isFormField = false;\n    /**\n     * @hidden\n     * @private\n     */\n    this.isColorSpace = false;\n    /**\n     * @hidden\n     * @private\n     */\n    this.isHexString = true;\n    if (typeof value === 'undefined') {\n      this.bHex = false;\n    } else {\n      if (!(value.length > 0 && value[0] === '0xfeff')) {\n        this.stringValue = value;\n        this.data = [];\n        for (var i = 0; i < value.length; ++i) {\n          this.data.push(value.charCodeAt(i));\n        }\n      }\n    }\n  }\n  Object.defineProperty(PdfString.prototype, \"hex\", {\n    //Property\n    /**\n     * Gets a value indicating whether string is in `hex`.\n     * @private\n     */\n    get: function () {\n      return this.bHex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"value\", {\n    /**\n     * Gets or sets string `value` of the object.\n     * @private\n     */\n    get: function () {\n      return this.stringValue;\n    },\n    set: function (value) {\n      this.stringValue = value;\n      this.data = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status1;\n    },\n    set: function (value) {\n      this.status1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving1;\n    },\n    set: function (value) {\n      this.isSaving1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index1;\n    },\n    set: function (value) {\n      this.index1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return this.clonedObject1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position1;\n    },\n    set: function (value) {\n      this.position1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"CrossTable\", {\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get: function () {\n      return this.crossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"converted\", {\n    /**\n     * Gets a value indicating whether to check if the value has unicode characters.\n     * @private\n     */\n    get: function () {\n      return this.bConverted;\n    },\n    /**\n     * sets a value indicating whether to check if the value has unicode characters.\n     * @private\n     */\n    set: function (value) {\n      this.bConverted = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"encode\", {\n    /**\n     * Gets value indicating whether we should convert data to Unicode.\n     */\n    get: function () {\n      return this.bForceEncoding;\n    },\n    set: function (value) {\n      this.bForceEncoding = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Methods\n  /**\n   * Converts `bytes to string using hex format` for representing string.\n   * @private\n   */\n  PdfString.bytesToHex = function (bytes) {\n    if (bytes == null) {\n      return '';\n    }\n    var builder = '';\n    return builder;\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n  PdfString.prototype.save = function (writer) {\n    if (writer === null) {\n      throw new Error('ArgumentNullException : writer');\n    }\n    if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n      writer.write(this.pdfEncode());\n    } else {\n      writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n    }\n  };\n  PdfString.prototype.pdfEncode = function () {\n    var result = '';\n    if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n      var data = this.escapeSymbols(this.value);\n      for (var i = 0; i < data.length; i++) {\n        result += String.fromCharCode(data[i]);\n      }\n      result = PdfString.stringMark[0] + result + PdfString.stringMark[1];\n    } else {\n      result = this.value;\n    }\n    return result;\n  };\n  PdfString.prototype.escapeSymbols = function (value) {\n    var data = [];\n    for (var i = 0; i < value.length; i++) {\n      var currentData = value.charCodeAt(i);\n      switch (currentData) {\n        case 40:\n        case 41:\n          data.push(92);\n          data.push(currentData);\n          break;\n        case 13:\n          data.push(92);\n          data.push(114);\n          break;\n        case 92:\n          data.push(92);\n          data.push(currentData);\n          break;\n        default:\n          data.push(currentData);\n          break;\n      }\n    }\n    return data;\n  };\n  /**\n   * Creates a `copy of PdfString`.\n   * @private\n   */\n  PdfString.prototype.clone = function (crossTable) {\n    if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n      return this.clonedObject1;\n    } else {\n      this.clonedObject1 = null;\n    }\n    var newString = new PdfString(this.stringValue);\n    newString.bHex = this.bHex;\n    newString.crossTable = crossTable;\n    newString.isColorSpace = this.isColorSpace;\n    this.clonedObject1 = newString;\n    return newString;\n  };\n  /**\n   * Converts string to array of unicode symbols.\n   */\n  PdfString.toUnicodeArray = function (value, bAddPrefix) {\n    if (value == null) {\n      throw new Error('Argument Null Exception : value');\n    }\n    var startIndex = 0;\n    var output = [];\n    for (var i = 0; i < value.length; i++) {\n      var code = value.charCodeAt(i);\n      output.push(code / 256 >>> 0);\n      output.push(code & 0xff);\n    }\n    return output;\n  };\n  /**\n   * Converts byte data to string.\n   */\n  PdfString.byteToString = function (data) {\n    if (data == null) {\n      throw new Error('Argument Null Exception : stream');\n    }\n    var result = '';\n    for (var i = 0; i < data.length; ++i) {\n      result += String.fromCharCode(data[i]);\n    }\n    return result;\n  };\n  //constants = ;\n  /**\n   * `General markers` for string.\n   * @private\n   */\n  PdfString.stringMark = '()';\n  /**\n   * `Hex markers` for string.\n   * @private\n   */\n  PdfString.hexStringMark = '<>';\n  /**\n   * Format of password data.\n   * @private\n   */\n  PdfString.hexFormatPattern = '{0:X2}';\n  return PdfString;\n}();\nexport { PdfString };","map":{"version":3,"names":["InternalEnum","ForceEncoding","SourceType","PdfString","value","bHex","position1","clonedObject1","bDecrypted","isParentDecrypted","isPacked","isFormField","isColorSpace","isHexString","length","stringValue","data","i","push","charCodeAt","Object","defineProperty","prototype","get","enumerable","configurable","set","status1","isSaving1","index1","crossTable","bConverted","bForceEncoding","bytesToHex","bytes","builder","save","writer","Error","encode","undefined","Ascii","write","pdfEncode","stringMark","result","escapeSymbols","String","fromCharCode","currentData","clone","CrossTable","newString","toUnicodeArray","bAddPrefix","startIndex","output","code","byteToString","hexStringMark","hexFormatPattern"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-string.js"],"sourcesContent":["/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nexport var InternalEnum;\n(function (InternalEnum) {\n    //Internals\n    /**\n     * public Enum for `ForceEncoding`.\n     * @private\n     */\n    var ForceEncoding;\n    (function (ForceEncoding) {\n        /**\n         * Specifies the type of `None`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n        /**\n         * Specifies the type of `Ascii`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n        /**\n         * Specifies the type of `Unicode`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n    })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n    /**\n     * public Enum for `SourceType`.\n     * @private\n     */\n    var SourceType;\n    (function (SourceType) {\n        /**\n         * Specifies the type of `StringValue`.\n         * @private\n         */\n        SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n        /**\n         * Specifies the type of `ByteBuffer`.\n         * @private\n         */\n        SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n    })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\nvar PdfString = /** @class */ (function () {\n    function PdfString(value) {\n        /**\n         * Value indicating whether the string was converted to hex.\n         * @default false\n         * @private\n         */\n        this.bHex = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position1 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject1 = null;\n        /**\n         * `Shows` if the data of the stream was decrypted.\n         * @default false\n         * @private\n         */\n        this.bDecrypted = false;\n        /**\n         * Shows if the data of the stream `was decrypted`.\n         * @default false\n         * @private\n         */\n        this.isParentDecrypted = false;\n        /**\n         * Gets a value indicating whether the object is `packed or not`.\n         * @default false\n         * @private\n         */\n        this.isPacked = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isFormField = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isColorSpace = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isHexString = true;\n        if (typeof value === 'undefined') {\n            this.bHex = false;\n        }\n        else {\n            if (!(value.length > 0 && value[0] === '0xfeff')) {\n                this.stringValue = value;\n                this.data = [];\n                for (var i = 0; i < value.length; ++i) {\n                    this.data.push(value.charCodeAt(i));\n                }\n            }\n        }\n    }\n    Object.defineProperty(PdfString.prototype, \"hex\", {\n        //Property\n        /**\n         * Gets a value indicating whether string is in `hex`.\n         * @private\n         */\n        get: function () {\n            return this.bHex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"value\", {\n        /**\n         * Gets or sets string `value` of the object.\n         * @private\n         */\n        get: function () {\n            return this.stringValue;\n        },\n        set: function (value) {\n            this.stringValue = value;\n            this.data = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status1;\n        },\n        set: function (value) {\n            this.status1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving1;\n        },\n        set: function (value) {\n            this.isSaving1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index1;\n        },\n        set: function (value) {\n            this.index1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.clonedObject1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position1;\n        },\n        set: function (value) {\n            this.position1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"CrossTable\", {\n        /**\n         * Returns `PdfCrossTable` associated with the object.\n         * @private\n         */\n        get: function () {\n            return this.crossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"converted\", {\n        /**\n         * Gets a value indicating whether to check if the value has unicode characters.\n         * @private\n         */\n        get: function () {\n            return this.bConverted;\n        },\n        /**\n         * sets a value indicating whether to check if the value has unicode characters.\n         * @private\n         */\n        set: function (value) {\n            this.bConverted = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"encode\", {\n        /**\n         * Gets value indicating whether we should convert data to Unicode.\n         */\n        get: function () {\n            return this.bForceEncoding;\n        },\n        set: function (value) {\n            this.bForceEncoding = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * Converts `bytes to string using hex format` for representing string.\n     * @private\n     */\n    PdfString.bytesToHex = function (bytes) {\n        if (bytes == null) {\n            return '';\n        }\n        var builder = '';\n        return builder;\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfString.prototype.save = function (writer) {\n        if (writer === null) {\n            throw new Error('ArgumentNullException : writer');\n        }\n        if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n            writer.write(this.pdfEncode());\n        }\n        else {\n            writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n        }\n    };\n    PdfString.prototype.pdfEncode = function () {\n        var result = '';\n        if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n            var data = this.escapeSymbols(this.value);\n            for (var i = 0; i < data.length; i++) {\n                result += String.fromCharCode(data[i]);\n            }\n            result = PdfString.stringMark[0] + result + PdfString.stringMark[1];\n        }\n        else {\n            result = this.value;\n        }\n        return result;\n    };\n    PdfString.prototype.escapeSymbols = function (value) {\n        var data = [];\n        for (var i = 0; i < value.length; i++) {\n            var currentData = value.charCodeAt(i);\n            switch (currentData) {\n                case 40:\n                case 41:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                case 13:\n                    data.push(92);\n                    data.push(114);\n                    break;\n                case 92:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                default:\n                    data.push(currentData);\n                    break;\n            }\n        }\n        return data;\n    };\n    /**\n     * Creates a `copy of PdfString`.\n     * @private\n     */\n    PdfString.prototype.clone = function (crossTable) {\n        if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n            return this.clonedObject1;\n        }\n        else {\n            this.clonedObject1 = null;\n        }\n        var newString = new PdfString(this.stringValue);\n        newString.bHex = this.bHex;\n        newString.crossTable = crossTable;\n        newString.isColorSpace = this.isColorSpace;\n        this.clonedObject1 = newString;\n        return newString;\n    };\n    /**\n     * Converts string to array of unicode symbols.\n     */\n    PdfString.toUnicodeArray = function (value, bAddPrefix) {\n        if (value == null) {\n            throw new Error('Argument Null Exception : value');\n        }\n        var startIndex = 0;\n        var output = [];\n        for (var i = 0; i < value.length; i++) {\n            var code = value.charCodeAt(i);\n            output.push(code / 256 >>> 0);\n            output.push(code & 0xff);\n        }\n        return output;\n    };\n    /**\n     * Converts byte data to string.\n     */\n    PdfString.byteToString = function (data) {\n        if (data == null) {\n            throw new Error('Argument Null Exception : stream');\n        }\n        var result = '';\n        for (var i = 0; i < data.length; ++i) {\n            result += String.fromCharCode(data[i]);\n        }\n        return result;\n    };\n    //constants = ;\n    /**\n     * `General markers` for string.\n     * @private\n     */\n    PdfString.stringMark = '()';\n    /**\n     * `Hex markers` for string.\n     * @private\n     */\n    PdfString.hexStringMark = '<>';\n    /**\n     * Format of password data.\n     * @private\n     */\n    PdfString.hexFormatPattern = '{0:X2}';\n    return PdfString;\n}());\nexport { PdfString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}