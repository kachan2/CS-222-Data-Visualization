{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfBorders } from './styles/pdf-borders';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\nvar PdfGrid = /** @class */function (_super) {\n  __extends(PdfGrid, _super);\n  //constructor\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n  function PdfGrid() {\n    var _this = _super.call(this) || this;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.gridSize = new SizeF(0, 0);\n    /**\n     * Check the child grid is ' split or not'\n     */\n    _this.isGridSplit = false;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n    _this.breakRow = true;\n    _this.splitChildRowIndex = -1;\n    /**\n     * The event raised on `begin cell lay outing`.\n     * @event\n     * @private\n     */\n    //public beginPageLayout : Function;\n    /**\n     * The event raised on `end cell lay outing`.\n     * @event\n     * @private\n     */\n    //public endPageLayout : Function;\n    _this.hasRowSpanSpan = false;\n    _this.hasColumnSpan = false;\n    _this.isSingleGrid = true;\n    return _this;\n  }\n  Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n    //Properties\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n    /**\n     * Gets or sets a value indicating whether to `repeat header`.\n     * @private\n     */\n    get: function () {\n      if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n        this.bRepeatHeader = false;\n      }\n      return this.bRepeatHeader;\n    },\n    set: function (value) {\n      this.bRepeatHeader = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n    /**\n     * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n     * @private\n     */\n    get: function () {\n      return this.breakRow;\n    },\n    set: function (value) {\n      this.breakRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"columns\", {\n    /**\n     * Gets the `column` collection of the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n        this.gridColumns = new PdfGridColumnCollection(this);\n      }\n      return this.gridColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"rows\", {\n    /**\n     * Gets the `row` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridRows == null) {\n        this.gridRows = new PdfGridRowCollection(this);\n      }\n      return this.gridRows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"headers\", {\n    /**\n     * Gets the `headers` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n        this.gridHeaders = new PdfGridHeaderCollection(this);\n      }\n      return this.gridHeaders;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n    /**\n     * Indicating `initial width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.gridInitialWidth;\n    },\n    set: function (value) {\n      this.gridInitialWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"style\", {\n    /**\n     * Gets or sets the `grid style`.\n     * @private\n     */\n    get: function () {\n      if (this.gridStyle == null) {\n        this.gridStyle = new PdfGridStyle();\n      }\n      return this.gridStyle;\n    },\n    set: function (value) {\n      if (this.gridStyle == null) {\n        this.gridStyle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n    /**\n     * Gets a value indicating whether the grid column width is considered to be `page width`.\n     * @private\n     */\n    get: function () {\n      return this.ispageWidth;\n    },\n    set: function (value) {\n      this.ispageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n    /**\n     * Gets or set if grid `is nested grid`.\n     * @private\n     */\n    get: function () {\n      return this.ischildGrid;\n    },\n    set: function (value) {\n      this.ischildGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"size\", {\n    /**\n     * Gets or set if grid ' is split or not'\n     * @public\n     */\n    // public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }\n    /**\n     * Gets the `size`.\n     * @private\n     */\n    get: function () {\n      if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n        this.gridSize = this.measure();\n      }\n      return this.gridSize;\n      // } else {\n      //     return this.gridSize;\n      // }\n    },\n\n    set: function (value) {\n      this.gridSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n    get: function () {\n      return this.parentCell;\n    },\n    set: function (value) {\n      this.parentCell = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n    get: function () {\n      return this.layoutFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n    if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2.x, arg2.y);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      return this.drawHelper(arg1, arg2, arg3, null);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2, null);\n    } else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n      return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n      var width = arg1.graphics.clientSize.width - arg2;\n      var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n      return this.drawHelper(arg1, layoutRectangle, arg4);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n      return this.drawHelper(arg1, arg2, null);\n    } else {\n      return this.drawHelper(arg1, arg2, arg3);\n    }\n  };\n  /**\n   * `measures` this instance.\n   * @private\n   */\n  PdfGrid.prototype.measure = function () {\n    var height = 0;\n    var width = this.columns.width;\n    for (var i = 0; i < this.headers.count; i++) {\n      var row = this.headers.getHeader(i);\n      height += row.height;\n    }\n    for (var i = 0; i < this.rows.count; i++) {\n      var row = this.rows.getRow(i);\n      height += row.height;\n    }\n    return new SizeF(width, height);\n  };\n  PdfGrid.prototype.onBeginCellDraw = function (args) {\n    if (this.raiseBeginCellDraw) {\n      this.beginCellDraw(this, args);\n    }\n  };\n  PdfGrid.prototype.onEndCellDraw = function (args) {\n    if (this.raiseEndCellDraw) {\n      this.endCellDraw(this, args);\n    }\n  };\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n  PdfGrid.prototype.layout = function (param) {\n    var width = param.bounds.width;\n    var height = param.bounds.height;\n    var hasChanged = false;\n    if (typeof param.bounds.width === 'undefined' || param.bounds.width === 0) {\n      width = param.page.getClientSize().width - param.bounds.x;\n      hasChanged = true;\n    }\n    if (typeof param.bounds.height === 'undefined' || param.bounds.height === 0) {\n      height = param.page.getClientSize().height - param.bounds.y;\n      hasChanged = true;\n    }\n    if (hasChanged) {\n      param.bounds = new RectangleF(param.bounds.x, param.bounds.y, width, height);\n    }\n    if (this.rows.count !== 0) {\n      var currentRow = this.rows.getRow(0).cells.getCell(0).style;\n      if (currentRow.borders != null && (currentRow.borders.left != null && currentRow.borders.left.width !== 1 || currentRow.borders.top != null && currentRow.borders.top.width !== 1)) {\n        var x = currentRow.borders.left.width / 2;\n        var y = currentRow.borders.top.width / 2;\n        if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n          var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n          param.bounds = newBound;\n        }\n      }\n    }\n    this.setSpan();\n    this.checkSpan();\n    this.layoutFormat = param.format;\n    this.gridLocation = param.bounds;\n    var layouter = new PdfGridLayouter(this);\n    var result = layouter.Layouter(param);\n    return result;\n  };\n  PdfGrid.prototype.setSpan = function () {\n    var colSpan = 1;\n    var rowSpan = 1;\n    var currentCellIndex = 0;\n    var currentRowIndex = 0;\n    var maxSpan = 0;\n    var rowCount = this.headers.count;\n    for (var i = 0; i < rowCount; i++) {\n      var row = this.headers.getHeader(i);\n      maxSpan = 0;\n      var colCount = row.cells.count;\n      for (var j = 0; j < colCount; j++) {\n        var cell = row.cells.getCell(j);\n        maxSpan = Math.max(maxSpan, cell.rowSpan);\n        //Skip setting span map for already coverted rows/columns.\n        if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n          if (cell.columnSpan + j > row.cells.count) {\n            throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          }\n          if (cell.rowSpan + i > this.headers.count) {\n            throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n          }\n          // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n          //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          // }\n          if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n            colSpan = cell.columnSpan;\n            rowSpan = cell.rowSpan;\n            currentCellIndex = j;\n            currentRowIndex = i;\n            cell.isCellMergeStart = true;\n            cell.isRowMergeStart = true;\n            //Set Column merges for first row\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n              colSpan--;\n            }\n            currentCellIndex = j;\n            colSpan = cell.columnSpan;\n            //Set Row Merges and column merges foreach subsequent rows.\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              rowSpan--;\n              while (colSpan > 1) {\n                currentCellIndex++;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                colSpan--;\n              }\n              colSpan = cell.columnSpan;\n              currentCellIndex = j;\n            }\n          } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n            colSpan = cell.columnSpan;\n            currentCellIndex = j;\n            cell.isCellMergeStart = true;\n            //Set Column merges.\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n          } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n            rowSpan = cell.rowSpan;\n            currentRowIndex = i;\n            //Set row Merges.\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n            }\n          }\n        }\n      }\n      row.maximumRowSpan = maxSpan;\n    }\n  };\n  PdfGrid.prototype.checkSpan = function () {\n    var cellcolSpan;\n    var cellrowSpan = 1;\n    var cellmaxSpan = 0;\n    var currentCellIndex;\n    var currentRowIndex = 0;\n    cellcolSpan = cellrowSpan = 1;\n    currentCellIndex = currentRowIndex = 0;\n    if (this.hasRowSpanSpan || this.hasColumnSpan) {\n      var rowCount = this.rows.count;\n      for (var i = 0; i < rowCount; i++) {\n        var row = this.rows.getRow(i);\n        cellmaxSpan = 0;\n        var colCount = row.cells.count;\n        for (var j = 0; j < colCount; j++) {\n          var cell = row.cells.getCell(j);\n          cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);\n          //Skip setting span map for already coverted rows/columns.\n          if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n            if (cell.columnSpan + j > row.cells.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n            if (cell.rowSpan + i > this.rows.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n            if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n              cellcolSpan = cell.columnSpan;\n              cellrowSpan = cell.rowSpan;\n              currentCellIndex = j;\n              currentRowIndex = i;\n              cell.isCellMergeStart = true;\n              cell.isRowMergeStart = true;\n              //Set Column merges for first row\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellcolSpan--;\n              }\n              currentCellIndex = j;\n              cellcolSpan = cell.columnSpan;\n              //Set Row Merges and column merges foreach subsequent rows.\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellrowSpan--;\n                while (cellcolSpan > 1) {\n                  currentCellIndex++;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                  cellcolSpan--;\n                }\n                cellcolSpan = cell.columnSpan;\n                currentCellIndex = j;\n              }\n            } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n              cellcolSpan = cell.columnSpan;\n              currentCellIndex = j;\n              cell.isCellMergeStart = true;\n              //Set Column merges.\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                cellcolSpan--;\n              }\n            } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n              cellrowSpan = cell.rowSpan;\n              currentRowIndex = i;\n              //Set row Merges.\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                cellrowSpan--;\n              }\n            }\n          }\n        }\n        row.maximumRowSpan = cellmaxSpan;\n      }\n    }\n  };\n  PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n    if (typeof bounds !== 'undefined') {\n      this.isPageWidth = false;\n      var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n      //let tempWidth : number = this.columns.getColumn(0).width;\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        // if (this.columns.getColumn(i).width < 0)\n        //     this.columns.getColumn(i).columnWidth = widths[i];\n        // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n        this.columns.getColumn(i).columnWidth = widths[i];\n        this.tempWidth = widths[i];\n      }\n      if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n        var padding = 0;\n        var columnWidth = 0;\n        var columnCount = this.columns.count;\n        var childGridColumnWidth = 0;\n        if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n          if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n            padding += this.ParentCell.style.cellPadding.left;\n          }\n          if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n            padding += this.ParentCell.style.cellPadding.right;\n          }\n        }\n        for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n          columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n        }\n        for (var j = 0; j < this.columns.count; j++) {\n          if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n            columnWidth -= this.gridColumns.getColumn(j).width;\n            columnCount--;\n          }\n        }\n        if (this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined') {\n          if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.top;\n          }\n          if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n          }\n        }\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n        if (columnWidth > padding) {\n          childGridColumnWidth = (columnWidth - padding) / columnCount;\n          this.tempWidth = childGridColumnWidth;\n          if (this.ParentCell != null) {\n            for (var j = 0; j < this.columns.count; j++) {\n              if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n            }\n          }\n        }\n      }\n      // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n      // {\n      //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n      //     {\n      //         widths = this.columns.getDefaultWidths(bounds.width);\n      //         for (let i : number = 0; i < this.columns.count; i++)\n      //         {\n      //             this.columns.getColumn(i).width = widths[i];\n      //         }\n      //     }\n      // }\n    } else {\n      var widths = [this.columns.count];\n      for (var n = 0; n < this.columns.count; n++) {\n        widths[n] = 0;\n      }\n      var cellWidth = 0;\n      var cellWidths = 0;\n      if (typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined' || this.isChildGrid === null && typeof this.gridLocation !== 'undefined') {\n        this.initialWidth = this.gridLocation.width;\n      }\n      if (this.headers.count > 0) {\n        var colCount_1 = this.headers.getHeader(0).cells.count;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < colCount_1; i++) {\n          cellWidth = 0;\n          for (var j = 0; j < rowCount; j++) {\n            var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n            cellWidth = Math.max(cellWidth, rowWidth);\n          }\n          widths[i] = cellWidth;\n        }\n      }\n      // else {\n      //     let colCount : number = this.rows.getRow(0).cells.count;\n      //     let rowCount : number = this.rows.count;\n      //     for (let i : number = 0; i < colCount; i++) {\n      //         cellWidth = 0;\n      //         for (let j : number = 0; j < rowCount; j++) {\n      //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n      //             cellWidth = Math.max(cellWidth, rowWidth);\n      //         }\n      //         widths[i] = cellWidth;\n      //     }\n      // }\n      cellWidth = 0;\n      for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n        for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n          if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || this.rows.getRow(j).cells.getCell(i).value != null) {\n            if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n              var value = this.rows.getRow(j).grid.style.cellPadding.right + this.rows.getRow(j).grid.style.cellPadding.left + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;\n              //  if (this.initialWidth != 0 )\n              //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n            }\n\n            var rowWidth = 0;\n            rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;\n            // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n            // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n            // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n            // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n            // if (isCorrectWidth || isCorrectHeight) {\n            //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n            // }\n            // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n            cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n            cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n          }\n        }\n        if (this.rows.count != 0) widths[i] = cellWidth;\n        cellWidth = 0;\n      }\n      for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n        for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n          if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n            var total = widths[j];\n            for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n              total += widths[j + k];\n            }\n            // if (this.rows.getRow(i).cells.getCell(j).width > total)\n            // {\n            //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n            //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n            //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n            //         widths[k] += extendedWidth;\n            // }\n          }\n        }\n      }\n      // if (this.isChildGrid && this.initialWidth != 0)\n      // {\n      //     widths = this.columns.getDefaultWidths(this.initialWidth);\n      // }\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        if (this.columns.getColumn(i).width <= 0) this.columns.getColumn(i).columnWidth = widths[i];else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth) this.columns.getColumn(i).columnWidth = widths[i];\n      }\n      var padding = 0;\n      var colWidth = 0;\n      var colCount = this.columns.count;\n      var childGridColWidth = 0;\n      colWidth = this.tempWidth;\n      for (var j = 0; j < this.columns.count; j++) {\n        if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n          colWidth -= this.gridColumns.getColumn(j).width;\n          colCount--;\n        }\n      }\n      // if (this.style.cellSpacing != 0){\n      //     colWidth -= this.style.cellSpacing * 2;\n      // }\n      if (colWidth > 0) {\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n      }\n      if (colWidth > padding) {\n        childGridColWidth = colWidth / colCount;\n        if (this.ParentCell != null) {\n          for (var j = 0; j < this.columns.count; j++) {\n            if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColWidth;\n          }\n        }\n      }\n    }\n  };\n  return PdfGrid;\n}(PdfLayoutElement);\nexport { PdfGrid };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGridColumnCollection","PdfGridRowCollection","PdfGridHeaderCollection","RectangleF","SizeF","PointF","PdfLayoutElement","PdfLayoutFormat","PdfGridStyle","PdfBorders","PdfGridLayouter","PdfGrid","_super","_this","call","gridSize","isGridSplit","isRearranged","pageBounds","listOfNavigatePages","parentCellIndex","tempWidth","breakRow","splitChildRowIndex","hasRowSpanSpan","hasColumnSpan","isSingleGrid","defineProperty","get","beginCellDraw","enumerable","configurable","endCellDraw","bRepeatHeader","set","value","gridColumns","gridRows","gridHeaders","gridInitialWidth","gridStyle","ispageWidth","ischildGrid","width","height","measure","parentCell","layoutFormat","draw","arg1","arg2","arg3","arg4","drawHelper","x","y","graphics","clientSize","layoutRectangle","columns","i","headers","count","row","getHeader","rows","getRow","onBeginCellDraw","args","raiseBeginCellDraw","onEndCellDraw","raiseEndCellDraw","layout","param","bounds","hasChanged","page","getClientSize","currentRow","cells","getCell","style","borders","left","top","default","right","newBound","setSpan","checkSpan","format","gridLocation","layouter","result","Layouter","colSpan","rowSpan","currentCellIndex","currentRowIndex","maxSpan","rowCount","colCount","j","cell","Math","max","isCellMergeContinue","isRowMergeContinue","columnSpan","Error","toString","isCellMergeStart","isRowMergeStart","maximumRowSpan","cellcolSpan","cellrowSpan","cellmaxSpan","measureColumnsWidth","isPageWidth","widths","getDefaultWidths","getColumn","columnWidth","ParentCell","allowHorizontalOverflow","grid","padding","columnCount","childGridColumnWidth","cellPadding","hasLeftPad","hasRightPad","isCustomWidth","hasTopPad","bottom","hasBottomPad","cellSpacing","n","cellWidth","cellWidths","isChildGrid","initialWidth","colCount_1","rowWidth","min","colCount_2","RowCount","ColCount","total","k","colWidth","childGridColWidth"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfBorders } from './styles/pdf-borders';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\nvar PdfGrid = /** @class */ (function (_super) {\n    __extends(PdfGrid, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGrid() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        /**\n         * Check the child grid is ' split or not'\n         */\n        _this.isGridSplit = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.splitChildRowIndex = -1;\n        /**\n         * The event raised on `begin cell lay outing`.\n         * @event\n         * @private\n         */\n        //public beginPageLayout : Function;\n        /**\n         * The event raised on `end cell lay outing`.\n         * @event\n         * @private\n         */\n        //public endPageLayout : Function;\n        _this.hasRowSpanSpan = false;\n        _this.hasColumnSpan = false;\n        _this.isSingleGrid = true;\n        return _this;\n    }\n    Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n        /**\n         * Gets or sets a value indicating whether to `repeat header`.\n         * @private\n         */\n        get: function () {\n            if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n                this.bRepeatHeader = false;\n            }\n            return this.bRepeatHeader;\n        },\n        set: function (value) {\n            this.bRepeatHeader = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n        /**\n         * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n         * @private\n         */\n        get: function () {\n            return this.breakRow;\n        },\n        set: function (value) {\n            this.breakRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"columns\", {\n        /**\n         * Gets the `column` collection of the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n                this.gridColumns = new PdfGridColumnCollection(this);\n            }\n            return this.gridColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"rows\", {\n        /**\n         * Gets the `row` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridRows == null) {\n                this.gridRows = new PdfGridRowCollection(this);\n            }\n            return this.gridRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"headers\", {\n        /**\n         * Gets the `headers` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n                this.gridHeaders = new PdfGridHeaderCollection(this);\n            }\n            return this.gridHeaders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n        /**\n         * Indicating `initial width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.gridInitialWidth;\n        },\n        set: function (value) {\n            this.gridInitialWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"style\", {\n        /**\n         * Gets or sets the `grid style`.\n         * @private\n         */\n        get: function () {\n            if (this.gridStyle == null) {\n                this.gridStyle = new PdfGridStyle();\n            }\n            return this.gridStyle;\n        },\n        set: function (value) {\n            if (this.gridStyle == null) {\n                this.gridStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n        /**\n         * Gets a value indicating whether the grid column width is considered to be `page width`.\n         * @private\n         */\n        get: function () {\n            return this.ispageWidth;\n        },\n        set: function (value) {\n            this.ispageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n        /**\n         * Gets or set if grid `is nested grid`.\n         * @private\n         */\n        get: function () {\n            return this.ischildGrid;\n        },\n        set: function (value) {\n            this.ischildGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"size\", {\n        /**\n         * Gets or set if grid ' is split or not'\n         * @public\n         */\n        // public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }\n        /**\n         * Gets the `size`.\n         * @private\n         */\n        get: function () {\n            if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n                this.gridSize = this.measure();\n            }\n            return this.gridSize;\n            // } else {\n            //     return this.gridSize;\n            // }\n        },\n        set: function (value) {\n            this.gridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n        get: function () {\n            return this.parentCell;\n        },\n        set: function (value) {\n            this.parentCell = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n        get: function () {\n            return this.layoutFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    /**\n     * `measures` this instance.\n     * @private\n     */\n    PdfGrid.prototype.measure = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfGrid.prototype.onBeginCellDraw = function (args) {\n        if (this.raiseBeginCellDraw) {\n            this.beginCellDraw(this, args);\n        }\n    };\n    PdfGrid.prototype.onEndCellDraw = function (args) {\n        if (this.raiseEndCellDraw) {\n            this.endCellDraw(this, args);\n        }\n    };\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    PdfGrid.prototype.layout = function (param) {\n        var width = param.bounds.width;\n        var height = param.bounds.height;\n        var hasChanged = false;\n        if (typeof param.bounds.width === 'undefined' || param.bounds.width === 0) {\n            width = param.page.getClientSize().width - param.bounds.x;\n            hasChanged = true;\n        }\n        if (typeof param.bounds.height === 'undefined' || param.bounds.height === 0) {\n            height = param.page.getClientSize().height - param.bounds.y;\n            hasChanged = true;\n        }\n        if (hasChanged) {\n            param.bounds = new RectangleF(param.bounds.x, param.bounds.y, width, height);\n        }\n        if (this.rows.count !== 0) {\n            var currentRow = this.rows.getRow(0).cells.getCell(0).style;\n            if (currentRow.borders != null && ((currentRow.borders.left != null && currentRow.borders.left.width !== 1) ||\n                (currentRow.borders.top != null && currentRow.borders.top.width !== 1))) {\n                var x = currentRow.borders.left.width / 2;\n                var y = currentRow.borders.top.width / 2;\n                if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n                    var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n                    param.bounds = newBound;\n                }\n            }\n        }\n        this.setSpan();\n        this.checkSpan();\n        this.layoutFormat = param.format;\n        this.gridLocation = param.bounds;\n        var layouter = new PdfGridLayouter(this);\n        var result = (layouter.Layouter(param));\n        return result;\n    };\n    PdfGrid.prototype.setSpan = function () {\n        var colSpan = 1;\n        var rowSpan = 1;\n        var currentCellIndex = 0;\n        var currentRowIndex = 0;\n        var maxSpan = 0;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.headers.getHeader(i);\n            maxSpan = 0;\n            var colCount = row.cells.count;\n            for (var j = 0; j < colCount; j++) {\n                var cell = row.cells.getCell(j);\n                maxSpan = Math.max(maxSpan, cell.rowSpan);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n                    //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    // }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n            row.maximumRowSpan = maxSpan;\n        }\n    };\n    PdfGrid.prototype.checkSpan = function () {\n        var cellcolSpan;\n        var cellrowSpan = 1;\n        var cellmaxSpan = 0;\n        var currentCellIndex;\n        var currentRowIndex = 0;\n        cellcolSpan = cellrowSpan = 1;\n        currentCellIndex = currentRowIndex = 0;\n        if (this.hasRowSpanSpan || this.hasColumnSpan) {\n            var rowCount = this.rows.count;\n            for (var i = 0; i < rowCount; i++) {\n                var row = this.rows.getRow(i);\n                cellmaxSpan = 0;\n                var colCount = row.cells.count;\n                for (var j = 0; j < colCount; j++) {\n                    var cell = row.cells.getCell(j);\n                    cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);\n                    //Skip setting span map for already coverted rows/columns.\n                    if (!cell.isCellMergeContinue && !cell.isRowMergeContinue\n                        && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                        if (cell.columnSpan + j > row.cells.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.rowSpan + i > this.rows.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                            cellcolSpan = cell.columnSpan;\n                            cellrowSpan = cell.rowSpan;\n                            currentCellIndex = j;\n                            currentRowIndex = i;\n                            cell.isCellMergeStart = true;\n                            cell.isRowMergeStart = true;\n                            //Set Column merges for first row\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                            currentCellIndex = j;\n                            cellcolSpan = cell.columnSpan;\n                            //Set Row Merges and column merges foreach subsequent rows.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellrowSpan--;\n                                while (cellcolSpan > 1) {\n                                    currentCellIndex++;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                    cellcolSpan--;\n                                }\n                                cellcolSpan = cell.columnSpan;\n                                currentCellIndex = j;\n                            }\n                        }\n                        else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                            cellcolSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                            cell.isCellMergeStart = true;\n                            //Set Column merges.\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                        }\n                        else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                            cellrowSpan = cell.rowSpan;\n                            currentRowIndex = i;\n                            //Set row Merges.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                cellrowSpan--;\n                            }\n                        }\n                    }\n                }\n                row.maximumRowSpan = cellmaxSpan;\n            }\n        }\n    };\n    PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            this.isPageWidth = false;\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            //let tempWidth : number = this.columns.getColumn(0).width;\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                // if (this.columns.getColumn(i).width < 0)\n                //     this.columns.getColumn(i).columnWidth = widths[i];\n                // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n                this.columns.getColumn(i).columnWidth = widths[i];\n                this.tempWidth = widths[i];\n            }\n            if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n                var padding = 0;\n                var columnWidth = 0;\n                var columnCount = this.columns.count;\n                var childGridColumnWidth = 0;\n                if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n                    if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n                        padding += this.ParentCell.style.cellPadding.left;\n                    }\n                    if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n                        padding += this.ParentCell.style.cellPadding.right;\n                    }\n                }\n                for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n                    columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n                }\n                for (var j = 0; j < this.columns.count; j++) {\n                    if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                        columnWidth -= this.gridColumns.getColumn(j).width;\n                        columnCount--;\n                    }\n                }\n                if ((this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined')) {\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.top;\n                    }\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n                    }\n                }\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n                if (columnWidth > padding) {\n                    childGridColumnWidth = (columnWidth - padding) / columnCount;\n                    this.tempWidth = childGridColumnWidth;\n                    if (this.ParentCell != null) {\n                        for (var j = 0; j < this.columns.count; j++) {\n                            if (!this.columns.getColumn(j).isCustomWidth)\n                                this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n                        }\n                    }\n                }\n            }\n            // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n            // {\n            //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n            //     {\n            //         widths = this.columns.getDefaultWidths(bounds.width);\n            //         for (let i : number = 0; i < this.columns.count; i++)\n            //         {\n            //             this.columns.getColumn(i).width = widths[i];\n            //         }\n            //     }\n            // }\n        }\n        else {\n            var widths = [this.columns.count];\n            for (var n = 0; n < this.columns.count; n++) {\n                widths[n] = 0;\n            }\n            var cellWidth = 0;\n            var cellWidths = 0;\n            if ((typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined') || (this.isChildGrid === null && typeof this.gridLocation !== 'undefined')) {\n                this.initialWidth = this.gridLocation.width;\n            }\n            if (this.headers.count > 0) {\n                var colCount_1 = this.headers.getHeader(0).cells.count;\n                var rowCount = this.headers.count;\n                for (var i = 0; i < colCount_1; i++) {\n                    cellWidth = 0;\n                    for (var j = 0; j < rowCount; j++) {\n                        var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            // else {\n            //     let colCount : number = this.rows.getRow(0).cells.count;\n            //     let rowCount : number = this.rows.count;\n            //     for (let i : number = 0; i < colCount; i++) {\n            //         cellWidth = 0;\n            //         for (let j : number = 0; j < rowCount; j++) {\n            //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths[i] = cellWidth;\n            //     }\n            // }\n            cellWidth = 0;\n            for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n                for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n                    if ((this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue) || this.rows.getRow(j).cells.getCell(i).value != null) {\n                        if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n                            var value = this.rows.getRow(j).grid.style.cellPadding.right +\n                                this.rows.getRow(j).grid.style.cellPadding.left\n                                + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;\n                            //  if (this.initialWidth != 0 )\n                            //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n                        }\n                        var rowWidth = 0;\n                        rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;\n                        // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n                        // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n                        // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n                        // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n                        // if (isCorrectWidth || isCorrectHeight) {\n                        //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n                        // }\n                        // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n                        cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    }\n                }\n                if (this.rows.count != 0)\n                    widths[i] = cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n                for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n                    if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n                        var total = widths[j];\n                        for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n                            total += widths[j + k];\n                        }\n                        // if (this.rows.getRow(i).cells.getCell(j).width > total)\n                        // {\n                        //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n                        //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n                        //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n                        //         widths[k] += extendedWidth;\n                        // }\n                    }\n                }\n            }\n            // if (this.isChildGrid && this.initialWidth != 0)\n            // {\n            //     widths = this.columns.getDefaultWidths(this.initialWidth);\n            // }\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                if (this.columns.getColumn(i).width <= 0)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n                else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n            }\n            var padding = 0;\n            var colWidth = 0;\n            var colCount = this.columns.count;\n            var childGridColWidth = 0;\n            colWidth = this.tempWidth;\n            for (var j = 0; j < this.columns.count; j++) {\n                if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                    colWidth -= this.gridColumns.getColumn(j).width;\n                    colCount--;\n                }\n            }\n            // if (this.style.cellSpacing != 0){\n            //     colWidth -= this.style.cellSpacing * 2;\n            // }\n            if (colWidth > 0) {\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n            }\n            if (colWidth > padding) {\n                childGridColWidth = (colWidth) / colCount;\n                if (this.ParentCell != null) {\n                    for (var j = 0; j < this.columns.count; j++) {\n                        if (!this.columns.getColumn(j).isCustomWidth)\n                            this.columns.getColumn(j).columnWidth = childGridColWidth;\n                    }\n                }\n            }\n        }\n    };\n    return PdfGrid;\n}(PdfLayoutElement));\nexport { PdfGrid };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAE,GAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;EACxF,CAAC;AACL,CAAC,EAAG;AACJ;AACA;AACA;AACA,SAASI,uBAAuB,QAAQ,mBAAmB;AAC3D,SAASC,oBAAoB,EAAEC,uBAAuB,QAAQ,gBAAgB;AAC9E,SAASC,UAAU,EAAEC,KAAK,EAAEC,MAAM,QAAQ,6BAA6B;AACvE,SAASC,gBAAgB,QAAQ,yCAAyC;AAC1E,SAASC,eAAe,QAAQ,gDAAgD;AAChF,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,eAAe,QAAQ,uDAAuD;AACvF,IAAIC,OAAO,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC3C1B,SAAS,CAACyB,OAAO,EAAEC,MAAM,CAAC;EAC1B;EACA;AACJ;AACA;AACA;EACI,SAASD,OAAO,GAAG;IACf,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;AACA;IACQD,KAAK,CAACE,QAAQ,GAAG,IAAIX,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAChC;AACR;AACA;IACQS,KAAK,CAACG,WAAW,GAAG,KAAK;IACzB;AACR;AACA;AACA;IACQH,KAAK,CAACI,YAAY,GAAG,KAAK;IAC1B;AACR;AACA;AACA;IACQJ,KAAK,CAACK,UAAU,GAAG,IAAIf,UAAU,EAAE;IACnC;AACR;AACA;AACA;IACQU,KAAK,CAACM,mBAAmB,GAAG,EAAE;IAC9B;AACR;AACA;AACA;IACQN,KAAK,CAACO,eAAe,GAAG,CAAC;IACzBP,KAAK,CAACQ,SAAS,GAAG,CAAC;IACnB;AACR;AACA;AACA;IACQR,KAAK,CAACS,QAAQ,GAAG,IAAI;IACrBT,KAAK,CAACU,kBAAkB,GAAG,CAAC,CAAC;IAC7B;AACR;AACA;AACA;AACA;IACQ;IACA;AACR;AACA;AACA;AACA;IACQ;IACAV,KAAK,CAACW,cAAc,GAAG,KAAK;IAC5BX,KAAK,CAACY,aAAa,GAAG,KAAK;IAC3BZ,KAAK,CAACa,YAAY,GAAG,IAAI;IACzB,OAAOb,KAAK;EAChB;EACAvB,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,oBAAoB,EAAE;IAC3D;IACA;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,OAAQ,OAAO,IAAI,CAACC,aAAa,KAAK,WAAW,IAAI,OAAO,IAAI,CAACA,aAAa,KAAK,IAAI;IAC3F,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,kBAAkB,EAAE;IACzD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,OAAQ,OAAO,IAAI,CAACI,WAAW,KAAK,WAAW,IAAI,OAAO,IAAI,CAACA,WAAW,KAAK,IAAI;IACvF,CAAC;IACDF,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,cAAc,EAAE;IACrD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,IAAI,IAAI,CAACK,aAAa,IAAI,IAAI,IAAI,OAAO,IAAI,CAACA,aAAa,KAAK,WAAW,EAAE;QACzE,IAAI,CAACA,aAAa,GAAG,KAAK;MAC9B;MACA,OAAO,IAAI,CAACA,aAAa;IAC7B,CAAC;IACDC,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACF,aAAa,GAAGE,KAAK;IAC9B,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,0BAA0B,EAAE;IACjE;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACN,QAAQ;IACxB,CAAC;IACDY,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACb,QAAQ,GAAGa,KAAK;IACzB,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,SAAS,EAAE;IAChD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,IAAI,IAAI,CAACQ,WAAW,IAAI,IAAI,IAAI,OAAO,IAAI,CAACA,WAAW,KAAK,WAAW,EAAE;QACrE,IAAI,CAACA,WAAW,GAAG,IAAIpC,uBAAuB,CAAC,IAAI,CAAC;MACxD;MACA,OAAO,IAAI,CAACoC,WAAW;IAC3B,CAAC;IACDN,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,MAAM,EAAE;IAC7C;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,IAAI,IAAI,CAACS,QAAQ,IAAI,IAAI,EAAE;QACvB,IAAI,CAACA,QAAQ,GAAG,IAAIpC,oBAAoB,CAAC,IAAI,CAAC;MAClD;MACA,OAAO,IAAI,CAACoC,QAAQ;IACxB,CAAC;IACDP,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,SAAS,EAAE;IAChD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,IAAI,IAAI,CAACU,WAAW,IAAI,IAAI,IAAI,OAAO,IAAI,CAACA,WAAW,KAAK,WAAW,EAAE;QACrE,IAAI,CAACA,WAAW,GAAG,IAAIpC,uBAAuB,CAAC,IAAI,CAAC;MACxD;MACA,OAAO,IAAI,CAACoC,WAAW;IAC3B,CAAC;IACDR,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,cAAc,EAAE;IACrD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACW,gBAAgB;IAChC,CAAC;IACDL,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACI,gBAAgB,GAAGJ,KAAK;IACjC,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,OAAO,EAAE;IAC9C;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,IAAI,IAAI,CAACY,SAAS,IAAI,IAAI,EAAE;QACxB,IAAI,CAACA,SAAS,GAAG,IAAIhC,YAAY,EAAE;MACvC;MACA,OAAO,IAAI,CAACgC,SAAS;IACzB,CAAC;IACDN,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAACK,SAAS,IAAI,IAAI,EAAE;QACxB,IAAI,CAACA,SAAS,GAAGL,KAAK;MAC1B;IACJ,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,aAAa,EAAE;IACpD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACa,WAAW;IAC3B,CAAC;IACDP,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACM,WAAW,GAAGN,KAAK;IAC5B,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,aAAa,EAAE;IACpD;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACc,WAAW;IAC3B,CAAC;IACDR,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACO,WAAW,GAAGP,KAAK;IAC5B,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,MAAM,EAAE;IAC7C;AACR;AACA;AACA;IACQ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACR;AACA;AACA;IACQ8B,GAAG,EAAE,YAAY;MACb,IAAI,CAAC,IAAI,CAACb,QAAQ,CAAC4B,KAAK,KAAK,CAAC,IAAI,OAAO,IAAI,CAAC5B,QAAQ,CAAC4B,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC5B,QAAQ,CAAC6B,MAAM,KAAK,CAAC,EAAE;QACzG,IAAI,CAAC7B,QAAQ,GAAG,IAAI,CAAC8B,OAAO,EAAE;MAClC;MACA,OAAO,IAAI,CAAC9B,QAAQ;MACpB;MACA;MACA;IACJ,CAAC;;IACDmB,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACpB,QAAQ,GAAGoB,KAAK;IACzB,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,YAAY,EAAE;IACnD8B,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACkB,UAAU;IAC1B,CAAC;IACDZ,GAAG,EAAE,UAAUC,KAAK,EAAE;MAClB,IAAI,CAACW,UAAU,GAAGX,KAAK;IAC3B,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFzC,MAAM,CAACqC,cAAc,CAAChB,OAAO,CAACb,SAAS,EAAE,cAAc,EAAE;IACrD8B,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACmB,YAAY;IAC5B,CAAC;IACDjB,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFpB,OAAO,CAACb,SAAS,CAACkD,IAAI,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACvD,IAAIF,IAAI,YAAY7C,MAAM,IAAI,OAAO6C,IAAI,CAACP,KAAK,KAAK,WAAW,IAAI,OAAOQ,IAAI,KAAK,WAAW,EAAE;MAC5F,OAAO,IAAI,CAACE,UAAU,CAACJ,IAAI,EAAEC,IAAI,CAACI,CAAC,EAAEJ,IAAI,CAACK,CAAC,CAAC;IAChD,CAAC,MACI,IAAI,OAAOL,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,WAAW,EAAE;MAC1F,OAAO,IAAI,CAACC,UAAU,CAACJ,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE,IAAI,CAAC;IAClD,CAAC,MACI,IAAID,IAAI,YAAY/C,UAAU,IAAI,OAAO+C,IAAI,CAACP,KAAK,KAAK,WAAW,IAAI,OAAOQ,IAAI,KAAK,WAAW,EAAE;MACrG,OAAO,IAAI,CAACE,UAAU,CAACJ,IAAI,EAAEC,IAAI,EAAE,IAAI,CAAC;IAC5C,CAAC,MACI,IAAIA,IAAI,YAAY7C,MAAM,IAAI,OAAO6C,IAAI,CAACP,KAAK,KAAK,WAAW,IAAIQ,IAAI,YAAY5C,eAAe,EAAE;MACrG,OAAO,IAAI,CAAC8C,UAAU,CAACJ,IAAI,EAAEC,IAAI,CAACI,CAAC,EAAEJ,IAAI,CAACK,CAAC,EAAEJ,IAAI,CAAC;IACtD,CAAC,MACI,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,KAAKC,IAAI,YAAY7C,eAAe,IAAI6C,IAAI,IAAI,IAAI,CAAC,EAAE;MAChH,IAAIT,KAAK,GAAIM,IAAI,CAACO,QAAQ,CAACC,UAAU,CAACd,KAAK,GAAGO,IAAK;MACnD,IAAIQ,eAAe,GAAG,IAAIvD,UAAU,CAAC+C,IAAI,EAAEC,IAAI,EAAER,KAAK,EAAE,CAAC,CAAC;MAC1D,OAAO,IAAI,CAACU,UAAU,CAACJ,IAAI,EAAES,eAAe,EAAEN,IAAI,CAAC;IACvD,CAAC,MACI,IAAIF,IAAI,YAAY/C,UAAU,IAAI,OAAO+C,IAAI,CAACP,KAAK,KAAK,WAAW,IAAI,OAAOQ,IAAI,KAAK,SAAS,EAAE;MACnG,OAAO,IAAI,CAACE,UAAU,CAACJ,IAAI,EAAEC,IAAI,EAAE,IAAI,CAAC;IAC5C,CAAC,MACI;MACD,OAAO,IAAI,CAACG,UAAU,CAACJ,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;IAC5C;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIxC,OAAO,CAACb,SAAS,CAAC+C,OAAO,GAAG,YAAY;IACpC,IAAID,MAAM,GAAG,CAAC;IACd,IAAID,KAAK,GAAG,IAAI,CAACgB,OAAO,CAAChB,KAAK;IAC9B,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,OAAO,CAACC,KAAK,EAAEF,CAAC,EAAE,EAAE;MACzC,IAAIG,GAAG,GAAG,IAAI,CAACF,OAAO,CAACG,SAAS,CAACJ,CAAC,CAAC;MACnChB,MAAM,IAAImB,GAAG,CAACnB,MAAM;IACxB;IACA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,IAAI,CAACH,KAAK,EAAEF,CAAC,EAAE,EAAE;MACtC,IAAIG,GAAG,GAAG,IAAI,CAACE,IAAI,CAACC,MAAM,CAACN,CAAC,CAAC;MAC7BhB,MAAM,IAAImB,GAAG,CAACnB,MAAM;IACxB;IACA,OAAO,IAAIxC,KAAK,CAACuC,KAAK,EAAEC,MAAM,CAAC;EACnC,CAAC;EACDjC,OAAO,CAACb,SAAS,CAACqE,eAAe,GAAG,UAAUC,IAAI,EAAE;IAChD,IAAI,IAAI,CAACC,kBAAkB,EAAE;MACzB,IAAI,CAACxC,aAAa,CAAC,IAAI,EAAEuC,IAAI,CAAC;IAClC;EACJ,CAAC;EACDzD,OAAO,CAACb,SAAS,CAACwE,aAAa,GAAG,UAAUF,IAAI,EAAE;IAC9C,IAAI,IAAI,CAACG,gBAAgB,EAAE;MACvB,IAAI,CAACvC,WAAW,CAAC,IAAI,EAAEoC,IAAI,CAAC;IAChC;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIzD,OAAO,CAACb,SAAS,CAAC0E,MAAM,GAAG,UAAUC,KAAK,EAAE;IACxC,IAAI9B,KAAK,GAAG8B,KAAK,CAACC,MAAM,CAAC/B,KAAK;IAC9B,IAAIC,MAAM,GAAG6B,KAAK,CAACC,MAAM,CAAC9B,MAAM;IAChC,IAAI+B,UAAU,GAAG,KAAK;IACtB,IAAI,OAAOF,KAAK,CAACC,MAAM,CAAC/B,KAAK,KAAK,WAAW,IAAI8B,KAAK,CAACC,MAAM,CAAC/B,KAAK,KAAK,CAAC,EAAE;MACvEA,KAAK,GAAG8B,KAAK,CAACG,IAAI,CAACC,aAAa,EAAE,CAAClC,KAAK,GAAG8B,KAAK,CAACC,MAAM,CAACpB,CAAC;MACzDqB,UAAU,GAAG,IAAI;IACrB;IACA,IAAI,OAAOF,KAAK,CAACC,MAAM,CAAC9B,MAAM,KAAK,WAAW,IAAI6B,KAAK,CAACC,MAAM,CAAC9B,MAAM,KAAK,CAAC,EAAE;MACzEA,MAAM,GAAG6B,KAAK,CAACG,IAAI,CAACC,aAAa,EAAE,CAACjC,MAAM,GAAG6B,KAAK,CAACC,MAAM,CAACnB,CAAC;MAC3DoB,UAAU,GAAG,IAAI;IACrB;IACA,IAAIA,UAAU,EAAE;MACZF,KAAK,CAACC,MAAM,GAAG,IAAIvE,UAAU,CAACsE,KAAK,CAACC,MAAM,CAACpB,CAAC,EAAEmB,KAAK,CAACC,MAAM,CAACnB,CAAC,EAAEZ,KAAK,EAAEC,MAAM,CAAC;IAChF;IACA,IAAI,IAAI,CAACqB,IAAI,CAACH,KAAK,KAAK,CAAC,EAAE;MACvB,IAAIgB,UAAU,GAAG,IAAI,CAACb,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACa,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK;MAC3D,IAAIH,UAAU,CAACI,OAAO,IAAI,IAAI,KAAMJ,UAAU,CAACI,OAAO,CAACC,IAAI,IAAI,IAAI,IAAIL,UAAU,CAACI,OAAO,CAACC,IAAI,CAACxC,KAAK,KAAK,CAAC,IACrGmC,UAAU,CAACI,OAAO,CAACE,GAAG,IAAI,IAAI,IAAIN,UAAU,CAACI,OAAO,CAACE,GAAG,CAACzC,KAAK,KAAK,CAAE,CAAC,EAAE;QACzE,IAAIW,CAAC,GAAGwB,UAAU,CAACI,OAAO,CAACC,IAAI,CAACxC,KAAK,GAAG,CAAC;QACzC,IAAIY,CAAC,GAAGuB,UAAU,CAACI,OAAO,CAACE,GAAG,CAACzC,KAAK,GAAG,CAAC;QACxC,IAAI8B,KAAK,CAACC,MAAM,CAACpB,CAAC,KAAK7C,UAAU,CAAC4E,OAAO,CAACC,KAAK,CAAC3C,KAAK,GAAG,CAAC,IAAI8B,KAAK,CAACC,MAAM,CAACnB,CAAC,KAAK9C,UAAU,CAAC4E,OAAO,CAACC,KAAK,CAAC3C,KAAK,GAAG,CAAC,EAAE;UAChH,IAAI4C,QAAQ,GAAG,IAAIpF,UAAU,CAACmD,CAAC,EAAEC,CAAC,EAAE,IAAI,CAACxC,QAAQ,CAAC4B,KAAK,EAAE,IAAI,CAAC5B,QAAQ,CAAC6B,MAAM,CAAC;UAC9E6B,KAAK,CAACC,MAAM,GAAGa,QAAQ;QAC3B;MACJ;IACJ;IACA,IAAI,CAACC,OAAO,EAAE;IACd,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAAC1C,YAAY,GAAG0B,KAAK,CAACiB,MAAM;IAChC,IAAI,CAACC,YAAY,GAAGlB,KAAK,CAACC,MAAM;IAChC,IAAIkB,QAAQ,GAAG,IAAIlF,eAAe,CAAC,IAAI,CAAC;IACxC,IAAImF,MAAM,GAAID,QAAQ,CAACE,QAAQ,CAACrB,KAAK,CAAE;IACvC,OAAOoB,MAAM;EACjB,CAAC;EACDlF,OAAO,CAACb,SAAS,CAAC0F,OAAO,GAAG,YAAY;IACpC,IAAIO,OAAO,GAAG,CAAC;IACf,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,QAAQ,GAAG,IAAI,CAACvC,OAAO,CAACC,KAAK;IACjC,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,QAAQ,EAAExC,CAAC,EAAE,EAAE;MAC/B,IAAIG,GAAG,GAAG,IAAI,CAACF,OAAO,CAACG,SAAS,CAACJ,CAAC,CAAC;MACnCuC,OAAO,GAAG,CAAC;MACX,IAAIE,QAAQ,GAAGtC,GAAG,CAACgB,KAAK,CAACjB,KAAK;MAC9B,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;QAC/B,IAAIC,IAAI,GAAGxC,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC;QAC/BH,OAAO,GAAGK,IAAI,CAACC,GAAG,CAACN,OAAO,EAAEI,IAAI,CAACP,OAAO,CAAC;QACzC;QACA,IAAI,CAACO,IAAI,CAACG,mBAAmB,IAAI,CAACH,IAAI,CAACI,kBAAkB,KAAKJ,IAAI,CAACK,UAAU,GAAG,CAAC,IAAIL,IAAI,CAACP,OAAO,GAAG,CAAC,CAAC,EAAE;UACpG,IAAIO,IAAI,CAACK,UAAU,GAAGN,CAAC,GAAGvC,GAAG,CAACgB,KAAK,CAACjB,KAAK,EAAE;YACvC,MAAM,IAAI+C,KAAK,CAAC,gCAAgC,GAAGP,CAAC,CAACQ,QAAQ,EAAE,GAAG,UAAU,GAAGlD,CAAC,CAACkD,QAAQ,EAAE,CAAC;UAChG;UACA,IAAIP,IAAI,CAACP,OAAO,GAAGpC,CAAC,GAAG,IAAI,CAACC,OAAO,CAACC,KAAK,EAAE;YACvC,MAAM,IAAI+C,KAAK,CAAC,mCAAmC,GAAGP,CAAC,CAACQ,QAAQ,EAAE,GAAG,UAAU,GAAGlD,CAAC,CAACkD,QAAQ,EAAE,CAAC;UACnG;UACA;UACA;UACA;UACA,IAAIP,IAAI,CAACK,UAAU,GAAG,CAAC,IAAIL,IAAI,CAACP,OAAO,GAAG,CAAC,EAAE;YACzCD,OAAO,GAAGQ,IAAI,CAACK,UAAU;YACzBZ,OAAO,GAAGO,IAAI,CAACP,OAAO;YACtBC,gBAAgB,GAAGK,CAAC;YACpBJ,eAAe,GAAGtC,CAAC;YACnB2C,IAAI,CAACQ,gBAAgB,GAAG,IAAI;YAC5BR,IAAI,CAACS,eAAe,GAAG,IAAI;YAC3B;YACA,OAAOjB,OAAO,GAAG,CAAC,EAAE;cAChBE,gBAAgB,EAAE;cAClBlC,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACS,mBAAmB,GAAG,IAAI;cAC9D3C,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACU,kBAAkB,GAAG,IAAI;cAC7D5C,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACD,OAAO,GAAGA,OAAO;cACrDD,OAAO,EAAE;YACb;YACAE,gBAAgB,GAAGK,CAAC;YACpBP,OAAO,GAAGQ,IAAI,CAACK,UAAU;YACzB;YACA,OAAOZ,OAAO,GAAG,CAAC,EAAE;cAChBE,eAAe,EAAE;cACjB,IAAI,CAACrC,OAAO,CAACG,SAAS,CAACkC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC,CAACK,kBAAkB,GAAG,IAAI;cAClF,IAAI,CAAC9C,OAAO,CAACG,SAAS,CAACkC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACU,kBAAkB,GAAG,IAAI;cACjGX,OAAO,EAAE;cACT,OAAOD,OAAO,GAAG,CAAC,EAAE;gBAChBE,gBAAgB,EAAE;gBAClB,IAAI,CAACpC,OAAO,CAACG,SAAS,CAACkC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACS,mBAAmB,GAAG,IAAI;gBAClG,IAAI,CAAC7C,OAAO,CAACG,SAAS,CAACkC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACU,kBAAkB,GAAG,IAAI;gBACjGZ,OAAO,EAAE;cACb;cACAA,OAAO,GAAGQ,IAAI,CAACK,UAAU;cACzBX,gBAAgB,GAAGK,CAAC;YACxB;UACJ,CAAC,MACI,IAAIC,IAAI,CAACK,UAAU,GAAG,CAAC,IAAIL,IAAI,CAACP,OAAO,KAAK,CAAC,EAAE;YAChDD,OAAO,GAAGQ,IAAI,CAACK,UAAU;YACzBX,gBAAgB,GAAGK,CAAC;YACpBC,IAAI,CAACQ,gBAAgB,GAAG,IAAI;YAC5B;YACA,OAAOhB,OAAO,GAAG,CAAC,EAAE;cAChBE,gBAAgB,EAAE;cAClBlC,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACS,mBAAmB,GAAG,IAAI;cAC9DX,OAAO,EAAE;YACb;UACJ,CAAC,MACI,IAAIQ,IAAI,CAACK,UAAU,KAAK,CAAC,IAAIL,IAAI,CAACP,OAAO,GAAG,CAAC,EAAE;YAChDA,OAAO,GAAGO,IAAI,CAACP,OAAO;YACtBE,eAAe,GAAGtC,CAAC;YACnB;YACA,OAAOoC,OAAO,GAAG,CAAC,EAAE;cAChBE,eAAe,EAAE;cACjB,IAAI,CAACrC,OAAO,CAACG,SAAS,CAACkC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC,CAACK,kBAAkB,GAAG,IAAI;cAClFX,OAAO,EAAE;YACb;UACJ;QACJ;MACJ;MACAjC,GAAG,CAACkD,cAAc,GAAGd,OAAO;IAChC;EACJ,CAAC;EACDxF,OAAO,CAACb,SAAS,CAAC2F,SAAS,GAAG,YAAY;IACtC,IAAIyB,WAAW;IACf,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAInB,gBAAgB;IACpB,IAAIC,eAAe,GAAG,CAAC;IACvBgB,WAAW,GAAGC,WAAW,GAAG,CAAC;IAC7BlB,gBAAgB,GAAGC,eAAe,GAAG,CAAC;IACtC,IAAI,IAAI,CAAC1E,cAAc,IAAI,IAAI,CAACC,aAAa,EAAE;MAC3C,IAAI2E,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACH,KAAK;MAC9B,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,QAAQ,EAAExC,CAAC,EAAE,EAAE;QAC/B,IAAIG,GAAG,GAAG,IAAI,CAACE,IAAI,CAACC,MAAM,CAACN,CAAC,CAAC;QAC7BwD,WAAW,GAAG,CAAC;QACf,IAAIf,QAAQ,GAAGtC,GAAG,CAACgB,KAAK,CAACjB,KAAK;QAC9B,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;UAC/B,IAAIC,IAAI,GAAGxC,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC;UAC/Bc,WAAW,GAAGZ,IAAI,CAACC,GAAG,CAACW,WAAW,EAAEb,IAAI,CAACP,OAAO,CAAC;UACjD;UACA,IAAI,CAACO,IAAI,CAACG,mBAAmB,IAAI,CAACH,IAAI,CAACI,kBAAkB,KACjDJ,IAAI,CAACK,UAAU,GAAG,CAAC,IAAIL,IAAI,CAACP,OAAO,GAAG,CAAC,CAAC,EAAE;YAC9C,IAAIO,IAAI,CAACK,UAAU,GAAGN,CAAC,GAAGvC,GAAG,CAACgB,KAAK,CAACjB,KAAK,EAAE;cACvC,MAAM,IAAI+C,KAAK,CAAC,iCAAiC,GAAGP,CAAC,CAACQ,QAAQ,EAAE,GAAG,UAAU,GAAGlD,CAAC,CAACkD,QAAQ,EAAE,CAAC;YACjG;YACA,IAAIP,IAAI,CAACP,OAAO,GAAGpC,CAAC,GAAG,IAAI,CAACK,IAAI,CAACH,KAAK,EAAE;cACpC,MAAM,IAAI+C,KAAK,CAAC,iCAAiC,GAAGP,CAAC,CAACQ,QAAQ,EAAE,GAAG,UAAU,GAAGlD,CAAC,CAACkD,QAAQ,EAAE,CAAC;YACjG;YACA,IAAIP,IAAI,CAACK,UAAU,GAAG,CAAC,IAAIL,IAAI,CAACP,OAAO,GAAG,CAAC,EAAE;cACzCkB,WAAW,GAAGX,IAAI,CAACK,UAAU;cAC7BO,WAAW,GAAGZ,IAAI,CAACP,OAAO;cAC1BC,gBAAgB,GAAGK,CAAC;cACpBJ,eAAe,GAAGtC,CAAC;cACnB2C,IAAI,CAACQ,gBAAgB,GAAG,IAAI;cAC5BR,IAAI,CAACS,eAAe,GAAG,IAAI;cAC3B;cACA,OAAOE,WAAW,GAAG,CAAC,EAAE;gBACpBjB,gBAAgB,EAAE;gBAClBlC,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACS,mBAAmB,GAAG,IAAI;gBAC9D3C,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACU,kBAAkB,GAAG,IAAI;gBAC7DO,WAAW,EAAE;cACjB;cACAjB,gBAAgB,GAAGK,CAAC;cACpBY,WAAW,GAAGX,IAAI,CAACK,UAAU;cAC7B;cACA,OAAOO,WAAW,GAAG,CAAC,EAAE;gBACpBjB,eAAe,EAAE;gBACjB,IAAI,CAACjC,IAAI,CAACC,MAAM,CAACgC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC,CAACK,kBAAkB,GAAG,IAAI;gBAC5E,IAAI,CAAC1C,IAAI,CAACC,MAAM,CAACgC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACU,kBAAkB,GAAG,IAAI;gBAC3FQ,WAAW,EAAE;gBACb,OAAOD,WAAW,GAAG,CAAC,EAAE;kBACpBjB,gBAAgB,EAAE;kBAClB,IAAI,CAAChC,IAAI,CAACC,MAAM,CAACgC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACS,mBAAmB,GAAG,IAAI;kBAC5F,IAAI,CAACzC,IAAI,CAACC,MAAM,CAACgC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACU,kBAAkB,GAAG,IAAI;kBAC3FO,WAAW,EAAE;gBACjB;gBACAA,WAAW,GAAGX,IAAI,CAACK,UAAU;gBAC7BX,gBAAgB,GAAGK,CAAC;cACxB;YACJ,CAAC,MACI,IAAIC,IAAI,CAACK,UAAU,GAAG,CAAC,IAAIL,IAAI,CAACP,OAAO,KAAK,CAAC,EAAE;cAChDkB,WAAW,GAAGX,IAAI,CAACK,UAAU;cAC7BX,gBAAgB,GAAGK,CAAC;cACpBC,IAAI,CAACQ,gBAAgB,GAAG,IAAI;cAC5B;cACA,OAAOG,WAAW,GAAG,CAAC,EAAE;gBACpBjB,gBAAgB,EAAE;gBAClBlC,GAAG,CAACgB,KAAK,CAACC,OAAO,CAACiB,gBAAgB,CAAC,CAACS,mBAAmB,GAAG,IAAI;gBAC9DQ,WAAW,EAAE;cACjB;YACJ,CAAC,MACI,IAAIX,IAAI,CAACK,UAAU,KAAK,CAAC,IAAIL,IAAI,CAACP,OAAO,GAAG,CAAC,EAAE;cAChDmB,WAAW,GAAGZ,IAAI,CAACP,OAAO;cAC1BE,eAAe,GAAGtC,CAAC;cACnB;cACA,OAAOuD,WAAW,GAAG,CAAC,EAAE;gBACpBjB,eAAe,EAAE;gBACjB,IAAI,CAACjC,IAAI,CAACC,MAAM,CAACgC,eAAe,CAAC,CAACnB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC,CAACK,kBAAkB,GAAG,IAAI;gBAC5EQ,WAAW,EAAE;cACjB;YACJ;UACJ;QACJ;QACApD,GAAG,CAACkD,cAAc,GAAGG,WAAW;MACpC;IACJ;EACJ,CAAC;EACDzG,OAAO,CAACb,SAAS,CAACuH,mBAAmB,GAAG,UAAU3C,MAAM,EAAE;IACtD,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;MAC/B,IAAI,CAAC4C,WAAW,GAAG,KAAK;MACxB,IAAIC,MAAM,GAAG,IAAI,CAAC5D,OAAO,CAAC6D,gBAAgB,CAAC9C,MAAM,CAAC/B,KAAK,GAAG+B,MAAM,CAACpB,CAAC,CAAC;MACnE;MACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEE,KAAK,GAAG,IAAI,CAACH,OAAO,CAACG,KAAK,EAAEF,CAAC,GAAGE,KAAK,EAAEF,CAAC,EAAE,EAAE;QACxD;QACA;QACA;QACA,IAAI,CAACD,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAAC8D,WAAW,GAAGH,MAAM,CAAC3D,CAAC,CAAC;QACjD,IAAI,CAACvC,SAAS,GAAGkG,MAAM,CAAC3D,CAAC,CAAC;MAC9B;MACA,IAAI,IAAI,CAAC+D,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC1C,KAAK,CAAC2C,uBAAuB,IAAI,KAAK,IAAI,IAAI,CAACD,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAAC2C,uBAAuB,IAAI,KAAK,EAAE;QAC3I,IAAIE,OAAO,GAAG,CAAC;QACf,IAAIJ,WAAW,GAAG,CAAC;QACnB,IAAIK,WAAW,GAAG,IAAI,CAACpE,OAAO,CAACG,KAAK;QACpC,IAAIkE,oBAAoB,GAAG,CAAC;QAC5B,IAAI,IAAI,CAACL,UAAU,CAAC1C,KAAK,CAACgD,WAAW,IAAI,IAAI,IAAI,OAAO,IAAI,CAACN,UAAU,CAAC1C,KAAK,CAACgD,WAAW,KAAK,WAAW,EAAE;UACvG,IAAI,OAAO,IAAI,CAACN,UAAU,CAAC1C,KAAK,CAACgD,WAAW,CAAC9C,IAAI,IAAI,WAAW,IAAI,IAAI,CAACwC,UAAU,CAAC1C,KAAK,CAACgD,WAAW,CAACC,UAAU,EAAE;YAC9GJ,OAAO,IAAI,IAAI,CAACH,UAAU,CAAC1C,KAAK,CAACgD,WAAW,CAAC9C,IAAI;UACrD;UACA,IAAI,OAAO,IAAI,CAACwC,UAAU,CAAC1C,KAAK,CAACgD,WAAW,CAAC3C,KAAK,IAAI,WAAW,IAAI,IAAI,CAACqC,UAAU,CAAC1C,KAAK,CAACgD,WAAW,CAACE,WAAW,EAAE;YAChHL,OAAO,IAAI,IAAI,CAACH,UAAU,CAAC1C,KAAK,CAACgD,WAAW,CAAC3C,KAAK;UACtD;QACJ;QACA,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC+D,UAAU,CAACf,UAAU,EAAEhD,CAAC,EAAE,EAAE;UACjD8D,WAAW,IAAI,IAAI,CAACC,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAClE,OAAO,CAAC8D,SAAS,CAAC,IAAI,CAACrG,eAAe,GAAGwC,CAAC,CAAC,CAACjB,KAAK;QAC7F;QACA,KAAK,IAAI2D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC3C,OAAO,CAACG,KAAK,EAAEwC,CAAC,EAAE,EAAE;UACzC,IAAI,IAAI,CAAClE,WAAW,CAACqF,SAAS,CAACnB,CAAC,CAAC,CAAC3D,KAAK,GAAG,CAAC,IAAI,IAAI,CAACP,WAAW,CAACqF,SAAS,CAACnB,CAAC,CAAC,CAAC8B,aAAa,EAAE;YACxFV,WAAW,IAAI,IAAI,CAACtF,WAAW,CAACqF,SAAS,CAACnB,CAAC,CAAC,CAAC3D,KAAK;YAClDoF,WAAW,EAAE;UACjB;QACJ;QACA,IAAK,IAAI,CAACJ,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,IAAI,IAAI,IAAI,OAAO,IAAI,CAACN,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,IAAI,WAAW,EAAG;UAC1H,IAAI,OAAO,IAAI,CAACN,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAAC7C,GAAG,IAAI,WAAW,IAAI,IAAI,CAACuC,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAACI,SAAS,EAAE;YAC9HP,OAAO,IAAI,IAAI,CAACH,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAAC7C,GAAG;UAC7D;UACA,IAAI,OAAO,IAAI,CAACuC,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAACK,MAAM,IAAI,WAAW,IAAI,IAAI,CAACX,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAACM,YAAY,EAAE;YACpIT,OAAO,IAAI,IAAI,CAACH,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAACK,MAAM;UAChE;QACJ;QACA,IAAI,IAAI,CAACX,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACuD,WAAW,IAAI,CAAC,EAAE;UACjDd,WAAW,IAAI,IAAI,CAACC,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACuD,WAAW,GAAG,CAAC;QACjE;QACA,IAAId,WAAW,GAAGI,OAAO,EAAE;UACvBE,oBAAoB,GAAG,CAACN,WAAW,GAAGI,OAAO,IAAIC,WAAW;UAC5D,IAAI,CAAC1G,SAAS,GAAG2G,oBAAoB;UACrC,IAAI,IAAI,CAACL,UAAU,IAAI,IAAI,EAAE;YACzB,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC3C,OAAO,CAACG,KAAK,EAAEwC,CAAC,EAAE,EAAE;cACzC,IAAI,CAAC,IAAI,CAAC3C,OAAO,CAAC8D,SAAS,CAACnB,CAAC,CAAC,CAAC8B,aAAa,EACxC,IAAI,CAACzE,OAAO,CAAC8D,SAAS,CAACnB,CAAC,CAAC,CAACoB,WAAW,GAAGM,oBAAoB;YACpE;UACJ;QACJ;MACJ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC,MACI;MACD,IAAIT,MAAM,GAAG,CAAC,IAAI,CAAC5D,OAAO,CAACG,KAAK,CAAC;MACjC,KAAK,IAAI2E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9E,OAAO,CAACG,KAAK,EAAE2E,CAAC,EAAE,EAAE;QACzClB,MAAM,CAACkB,CAAC,CAAC,GAAG,CAAC;MACjB;MACA,IAAIC,SAAS,GAAG,CAAC;MACjB,IAAIC,UAAU,GAAG,CAAC;MAClB,IAAK,OAAO,IAAI,CAACC,WAAW,KAAK,WAAW,IAAI,OAAO,IAAI,CAACjD,YAAY,KAAK,WAAW,IAAM,IAAI,CAACiD,WAAW,KAAK,IAAI,IAAI,OAAO,IAAI,CAACjD,YAAY,KAAK,WAAY,EAAE;QAClK,IAAI,CAACkD,YAAY,GAAG,IAAI,CAAClD,YAAY,CAAChD,KAAK;MAC/C;MACA,IAAI,IAAI,CAACkB,OAAO,CAACC,KAAK,GAAG,CAAC,EAAE;QACxB,IAAIgF,UAAU,GAAG,IAAI,CAACjF,OAAO,CAACG,SAAS,CAAC,CAAC,CAAC,CAACe,KAAK,CAACjB,KAAK;QACtD,IAAIsC,QAAQ,GAAG,IAAI,CAACvC,OAAO,CAACC,KAAK;QACjC,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkF,UAAU,EAAElF,CAAC,EAAE,EAAE;UACjC8E,SAAS,GAAG,CAAC;UACb,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;YAC/B,IAAIyC,QAAQ,GAAGvC,IAAI,CAACwC,GAAG,CAAC,IAAI,CAACH,YAAY,EAAE,IAAI,CAAChF,OAAO,CAACG,SAAS,CAACsC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACjB,KAAK,CAAC;YAC5F+F,SAAS,GAAGlC,IAAI,CAACC,GAAG,CAACiC,SAAS,EAAEK,QAAQ,CAAC;UAC7C;UACAxB,MAAM,CAAC3D,CAAC,CAAC,GAAG8E,SAAS;QACzB;MACJ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAA,SAAS,GAAG,CAAC;MACb,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAEqF,UAAU,GAAG,IAAI,CAACtF,OAAO,CAACG,KAAK,EAAEF,CAAC,GAAGqF,UAAU,EAAErF,CAAC,EAAE,EAAE;QAClE,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEF,QAAQ,GAAG,IAAI,CAACnC,IAAI,CAACH,KAAK,EAAEwC,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;UAC3D,IAAK,IAAI,CAACrC,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACgD,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC3C,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAAC8C,mBAAmB,IAAK,IAAI,CAACzC,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACzB,KAAK,IAAI,IAAI,EAAE;YAC3K,IAAI,IAAI,CAAC8B,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACzB,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC8B,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACuB,IAAI,CAAC5C,KAAK,CAAC2C,uBAAuB,EAAE;cAC/G,IAAIzF,KAAK,GAAG,IAAI,CAAC8B,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACuB,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAAC3C,KAAK,GACxD,IAAI,CAACrB,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACuB,IAAI,CAAC5C,KAAK,CAACgD,WAAW,CAAC9C,IAAI,GAC7C,IAAI,CAAClB,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACqB,KAAK,CAACC,OAAO,CAACC,IAAI,CAACxC,KAAK,GAAG,CAAC;cACvE;cACA;YACJ;;YACA,IAAIoG,QAAQ,GAAG,CAAC;YAChBA,QAAQ,GAAG,IAAI,CAACF,YAAY,GAAG,GAAG,GAAGrC,IAAI,CAACwC,GAAG,CAAC,IAAI,CAACH,YAAY,EAAE,IAAI,CAAC5E,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACjB,KAAK,CAAC,GAAG,IAAI,CAACsB,IAAI,CAACC,MAAM,CAACoC,CAAC,CAAC,CAACvB,KAAK,CAACC,OAAO,CAACpB,CAAC,CAAC,CAACjB,KAAK;YACzJ;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA+F,SAAS,GAAGlC,IAAI,CAACC,GAAG,CAACc,MAAM,CAAC3D,CAAC,CAAC,EAAE4C,IAAI,CAACC,GAAG,CAACiC,SAAS,EAAEK,QAAQ,CAAC,CAAC;YAC9DL,SAAS,GAAGlC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC9C,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAACjB,KAAK,EAAE+F,SAAS,CAAC;UACpE;QACJ;QACA,IAAI,IAAI,CAACzE,IAAI,CAACH,KAAK,IAAI,CAAC,EACpByD,MAAM,CAAC3D,CAAC,CAAC,GAAG8E,SAAS;QACzBA,SAAS,GAAG,CAAC;MACjB;MACA,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAEsF,QAAQ,GAAG,IAAI,CAACjF,IAAI,CAACH,KAAK,EAAEF,CAAC,GAAGsF,QAAQ,EAAEtF,CAAC,EAAE,EAAE;QAC3D,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAE6C,QAAQ,GAAG,IAAI,CAACxF,OAAO,CAACG,KAAK,EAAEwC,CAAC,GAAG6C,QAAQ,EAAE7C,CAAC,EAAE,EAAE;UAC9D,IAAI,IAAI,CAACrC,IAAI,CAACC,MAAM,CAACN,CAAC,CAAC,CAACmB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC,CAACM,UAAU,GAAG,CAAC,EAAE;YACrD,IAAIwC,KAAK,GAAG7B,MAAM,CAACjB,CAAC,CAAC;YACrB,KAAK,IAAI+C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpF,IAAI,CAACC,MAAM,CAACN,CAAC,CAAC,CAACmB,KAAK,CAACC,OAAO,CAACsB,CAAC,CAAC,CAACM,UAAU,EAAEyC,CAAC,EAAE,EAAE;cACtED,KAAK,IAAI7B,MAAM,CAACjB,CAAC,GAAG+C,CAAC,CAAC;YAC1B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;UACJ;QACJ;MACJ;MACA;MACA;MACA;MACA;MACA,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEE,KAAK,GAAG,IAAI,CAACH,OAAO,CAACG,KAAK,EAAEF,CAAC,GAAGE,KAAK,EAAEF,CAAC,EAAE,EAAE;QACxD,IAAI,IAAI,CAACD,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAACjB,KAAK,IAAI,CAAC,EACpC,IAAI,CAACgB,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAAC8D,WAAW,GAAGH,MAAM,CAAC3D,CAAC,CAAC,CAAC,KACjD,IAAI,IAAI,CAACD,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAACjB,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAACgB,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAACwE,aAAa,EACpF,IAAI,CAACzE,OAAO,CAAC8D,SAAS,CAAC7D,CAAC,CAAC,CAAC8D,WAAW,GAAGH,MAAM,CAAC3D,CAAC,CAAC;MACzD;MACA,IAAIkE,OAAO,GAAG,CAAC;MACf,IAAIwB,QAAQ,GAAG,CAAC;MAChB,IAAIjD,QAAQ,GAAG,IAAI,CAAC1C,OAAO,CAACG,KAAK;MACjC,IAAIyF,iBAAiB,GAAG,CAAC;MACzBD,QAAQ,GAAG,IAAI,CAACjI,SAAS;MACzB,KAAK,IAAIiF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC3C,OAAO,CAACG,KAAK,EAAEwC,CAAC,EAAE,EAAE;QACzC,IAAI,IAAI,CAAClE,WAAW,CAACqF,SAAS,CAACnB,CAAC,CAAC,CAAC3D,KAAK,GAAG,CAAC,IAAI,IAAI,CAACP,WAAW,CAACqF,SAAS,CAACnB,CAAC,CAAC,CAAC8B,aAAa,EAAE;UACxFkB,QAAQ,IAAI,IAAI,CAAClH,WAAW,CAACqF,SAAS,CAACnB,CAAC,CAAC,CAAC3D,KAAK;UAC/C0D,QAAQ,EAAE;QACd;MACJ;MACA;MACA;MACA;MACA,IAAIiD,QAAQ,GAAG,CAAC,EAAE;QACd,IAAI,IAAI,CAAC3B,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACuD,WAAW,IAAI,CAAC,EAAE;UACjDc,QAAQ,IAAI,IAAI,CAAC3B,UAAU,CAAC5D,GAAG,CAAC8D,IAAI,CAAC5C,KAAK,CAACuD,WAAW,GAAG,CAAC;QAC9D;MACJ;MACA,IAAIc,QAAQ,GAAGxB,OAAO,EAAE;QACpByB,iBAAiB,GAAID,QAAQ,GAAIjD,QAAQ;QACzC,IAAI,IAAI,CAACsB,UAAU,IAAI,IAAI,EAAE;UACzB,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC3C,OAAO,CAACG,KAAK,EAAEwC,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,IAAI,CAAC3C,OAAO,CAAC8D,SAAS,CAACnB,CAAC,CAAC,CAAC8B,aAAa,EACxC,IAAI,CAACzE,OAAO,CAAC8D,SAAS,CAACnB,CAAC,CAAC,CAACoB,WAAW,GAAG6B,iBAAiB;UACjE;QACJ;MACJ;IACJ;EACJ,CAAC;EACD,OAAO5I,OAAO;AAClB,CAAC,CAACL,gBAAgB,CAAE;AACpB,SAASK,OAAO"},"metadata":{},"sourceType":"module"}