{"ast":null,"code":"/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nvar PdfName = /** @class */function () {\n  function PdfName(value) {\n    /**\n     * `Start symbol` of the name object.\n     * @default /\n     * @private\n     */\n    this.stringStartMark = '/';\n    /**\n     * `Value` of the element.\n     * @private\n     */\n    this.internalValue = '';\n    /**\n     * Indicates if the object is currently in `saving state or not`.\n     * @default false\n     * @private\n     */\n    this.isSaving6 = false;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n    this.position6 = -1;\n    this.internalValue = this.normalizeValue(value);\n  }\n  Object.defineProperty(PdfName.prototype, \"status\", {\n    //property\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status6;\n    },\n    set: function (value) {\n      this.status6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving6;\n    },\n    set: function (value) {\n      this.isSaving6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index6;\n    },\n    set: function (value) {\n      this.index6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position6;\n    },\n    set: function (value) {\n      this.position6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"value\", {\n    /**\n     * Gets or sets the `value` of the object.\n     * @private\n     */\n    get: function () {\n      return this.internalValue;\n    },\n    set: function (value) {\n      // if (value !== this.value) {\n      var val = value;\n      if (value !== null && value.length > 0) {\n        // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n        val = value;\n        this.internalValue = this.normalizeValue(val);\n      } else {\n        this.internalValue = val;\n      }\n      // }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  //public methods\n  /**\n   * `Saves` the name using the specified writer.\n   * @private\n   */\n  PdfName.prototype.save = function (writer) {\n    // if (writer === null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    writer.write(this.toString());\n  };\n  /**\n   * Gets `string` representation of the primitive.\n   * @private\n   */\n  PdfName.prototype.toString = function () {\n    return this.stringStartMark + this.escapeString(this.value);\n  };\n  /**\n   * Creates a `copy of PdfName`.\n   * @private\n   */\n  PdfName.prototype.clone = function (crossTable) {\n    var newName = new PdfName();\n    newName.value = this.internalValue;\n    return newName;\n  };\n  /**\n   * Replace some characters with its `escape sequences`.\n   * @private\n   */\n  PdfName.prototype.escapeString = function (stringValue) {\n    // if (str === null) {\n    //     throw new Error('ArgumentNullException : str');\n    // }\n    // if (str === '') {\n    //     return str;\n    // }\n    var result = '';\n    var len = 0;\n    for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {\n      var ch = stringValue[i];\n      var index = PdfName.delimiters.indexOf(ch);\n      // switch (ch) {\n      //     case '\\r' :\n      //         result = result + '\\\\r';\n      //         break;\n      //     case '\\n' :\n      //         result = result + '\\n';\n      //         break;\n      //     case '(' :\n      //     case ')' :\n      //     case '\\\\' :\n      //         //result.Append( '\\\\' ).Append( ch );\n      //         result = result + ch;\n      //         break;\n      //     default :\n      //         result = result + ch;\n      //         break;\n      // }\n      result = result + ch;\n    }\n    return result;\n  };\n  //methiods\n  /**\n   * Replace a symbol with its code with the precedence of the `sharp sign`.\n   * @private\n   */\n  PdfName.prototype.normalizeValue = function (value, c) {\n    // if (typeof c === undefined) {\n    //     let str : string = value;\n    //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n    //         str = this.normalizeValue(str, c);\n    //     }\n    //     return str;\n    // } else {\n    var strFormat = '#{0:X}';\n    //return value.replace(c.toString(),String.format(strFormat,c));\n    return value;\n    // }\n  };\n  /**\n   * PDF `special characters`.\n   * @private\n   */\n  PdfName.delimiters = '()<>[]{}/%}';\n  /**\n   * The symbols that are not allowed in PDF names and `should be replaced`.\n   * @private\n   */\n  PdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n  return PdfName;\n}();\nexport { PdfName };","map":{"version":3,"names":["PdfName","value","stringStartMark","internalValue","isSaving6","position6","normalizeValue","Object","defineProperty","prototype","get","status6","set","enumerable","configurable","index6","val","length","save","writer","write","toString","escapeString","clone","crossTable","newName","stringValue","result","len","i","len_1","ch","index","delimiters","indexOf","c","strFormat","replacements"],"sources":["/Users/macbookpro16/Desktop/cs222/client/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-name.js"],"sourcesContent":["/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nvar PdfName = /** @class */ (function () {\n    function PdfName(value) {\n        /**\n         * `Start symbol` of the name object.\n         * @default /\n         * @private\n         */\n        this.stringStartMark = '/';\n        /**\n         * `Value` of the element.\n         * @private\n         */\n        this.internalValue = '';\n        /**\n         * Indicates if the object is currently in `saving state or not`.\n         * @default false\n         * @private\n         */\n        this.isSaving6 = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position6 = -1;\n        this.internalValue = this.normalizeValue(value);\n    }\n    Object.defineProperty(PdfName.prototype, \"status\", {\n        //property\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status6;\n        },\n        set: function (value) {\n            this.status6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving6;\n        },\n        set: function (value) {\n            this.isSaving6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index6;\n        },\n        set: function (value) {\n            this.index6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position6;\n        },\n        set: function (value) {\n            this.position6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the object.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        set: function (value) {\n            // if (value !== this.value) {\n            var val = value;\n            if (value !== null && value.length > 0) {\n                // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n                val = value;\n                this.internalValue = this.normalizeValue(val);\n            }\n            else {\n                this.internalValue = val;\n            }\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //public methods\n    /**\n     * `Saves` the name using the specified writer.\n     * @private\n     */\n    PdfName.prototype.save = function (writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.toString());\n    };\n    /**\n     * Gets `string` representation of the primitive.\n     * @private\n     */\n    PdfName.prototype.toString = function () {\n        return (this.stringStartMark + this.escapeString(this.value));\n    };\n    /**\n     * Creates a `copy of PdfName`.\n     * @private\n     */\n    PdfName.prototype.clone = function (crossTable) {\n        var newName = new PdfName();\n        newName.value = this.internalValue;\n        return newName;\n    };\n    /**\n     * Replace some characters with its `escape sequences`.\n     * @private\n     */\n    PdfName.prototype.escapeString = function (stringValue) {\n        // if (str === null) {\n        //     throw new Error('ArgumentNullException : str');\n        // }\n        // if (str === '') {\n        //     return str;\n        // }\n        var result = '';\n        var len = 0;\n        for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {\n            var ch = stringValue[i];\n            var index = PdfName.delimiters.indexOf(ch);\n            // switch (ch) {\n            //     case '\\r' :\n            //         result = result + '\\\\r';\n            //         break;\n            //     case '\\n' :\n            //         result = result + '\\n';\n            //         break;\n            //     case '(' :\n            //     case ')' :\n            //     case '\\\\' :\n            //         //result.Append( '\\\\' ).Append( ch );\n            //         result = result + ch;\n            //         break;\n            //     default :\n            //         result = result + ch;\n            //         break;\n            // }\n            result = result + ch;\n        }\n        return result;\n    };\n    //methiods\n    /**\n     * Replace a symbol with its code with the precedence of the `sharp sign`.\n     * @private\n     */\n    PdfName.prototype.normalizeValue = function (value, c) {\n        // if (typeof c === undefined) {\n        //     let str : string = value;\n        //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n        //         str = this.normalizeValue(str, c);\n        //     }\n        //     return str;\n        // } else {\n        var strFormat = '#{0:X}';\n        //return value.replace(c.toString(),String.format(strFormat,c));\n        return value;\n        // }\n    };\n    /**\n     * PDF `special characters`.\n     * @private\n     */\n    PdfName.delimiters = '()<>[]{}/%}';\n    /**\n     * The symbols that are not allowed in PDF names and `should be replaced`.\n     * @private\n     */\n    PdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n    return PdfName;\n}());\nexport { PdfName };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,aAAe,YAAY;EACrC,SAASA,OAAO,CAACC,KAAK,EAAE;IACpB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,GAAG;IAC1B;AACR;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACF,aAAa,GAAG,IAAI,CAACG,cAAc,CAACL,KAAK,CAAC;EACnD;EACAM,MAAM,CAACC,cAAc,CAACR,OAAO,CAACS,SAAS,EAAE,QAAQ,EAAE;IAC/C;IACA;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACC,OAAO;IACvB,CAAC;IACDC,GAAG,EAAE,UAAUX,KAAK,EAAE;MAClB,IAAI,CAACU,OAAO,GAAGV,KAAK;IACxB,CAAC;IACDY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACR,OAAO,CAACS,SAAS,EAAE,UAAU,EAAE;IACjD;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACN,SAAS;IACzB,CAAC;IACDQ,GAAG,EAAE,UAAUX,KAAK,EAAE;MAClB,IAAI,CAACG,SAAS,GAAGH,KAAK;IAC1B,CAAC;IACDY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACR,OAAO,CAACS,SAAS,EAAE,uBAAuB,EAAE;IAC9D;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACK,MAAM;IACtB,CAAC;IACDH,GAAG,EAAE,UAAUX,KAAK,EAAE;MAClB,IAAI,CAACc,MAAM,GAAGd,KAAK;IACvB,CAAC;IACDY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACR,OAAO,CAACS,SAAS,EAAE,UAAU,EAAE;IACjD;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACL,SAAS;IACzB,CAAC;IACDO,GAAG,EAAE,UAAUX,KAAK,EAAE;MAClB,IAAI,CAACI,SAAS,GAAGJ,KAAK;IAC1B,CAAC;IACDY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACR,OAAO,CAACS,SAAS,EAAE,cAAc,EAAE;IACrD;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI;IACf,CAAC;IACDG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACR,OAAO,CAACS,SAAS,EAAE,OAAO,EAAE;IAC9C;AACR;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,IAAI,CAACP,aAAa;IAC7B,CAAC;IACDS,GAAG,EAAE,UAAUX,KAAK,EAAE;MAClB;MACA,IAAIe,GAAG,GAAGf,KAAK;MACf,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACgB,MAAM,GAAG,CAAC,EAAE;QACpC;QACAD,GAAG,GAAGf,KAAK;QACX,IAAI,CAACE,aAAa,GAAG,IAAI,CAACG,cAAc,CAACU,GAAG,CAAC;MACjD,CAAC,MACI;QACD,IAAI,CAACb,aAAa,GAAGa,GAAG;MAC5B;MACA;IACJ,CAAC;;IACDH,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;EACA;AACJ;AACA;AACA;EACId,OAAO,CAACS,SAAS,CAACS,IAAI,GAAG,UAAUC,MAAM,EAAE;IACvC;IACA;IACA;IACAA,MAAM,CAACC,KAAK,CAAC,IAAI,CAACC,QAAQ,EAAE,CAAC;EACjC,CAAC;EACD;AACJ;AACA;AACA;EACIrB,OAAO,CAACS,SAAS,CAACY,QAAQ,GAAG,YAAY;IACrC,OAAQ,IAAI,CAACnB,eAAe,GAAG,IAAI,CAACoB,YAAY,CAAC,IAAI,CAACrB,KAAK,CAAC;EAChE,CAAC;EACD;AACJ;AACA;AACA;EACID,OAAO,CAACS,SAAS,CAACc,KAAK,GAAG,UAAUC,UAAU,EAAE;IAC5C,IAAIC,OAAO,GAAG,IAAIzB,OAAO,EAAE;IAC3ByB,OAAO,CAACxB,KAAK,GAAG,IAAI,CAACE,aAAa;IAClC,OAAOsB,OAAO;EAClB,CAAC;EACD;AACJ;AACA;AACA;EACIzB,OAAO,CAACS,SAAS,CAACa,YAAY,GAAG,UAAUI,WAAW,EAAE;IACpD;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAGJ,WAAW,CAACT,MAAM,EAAEY,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;MACxD,IAAIE,EAAE,GAAGL,WAAW,CAACG,CAAC,CAAC;MACvB,IAAIG,KAAK,GAAGhC,OAAO,CAACiC,UAAU,CAACC,OAAO,CAACH,EAAE,CAAC;MAC1C;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAJ,MAAM,GAAGA,MAAM,GAAGI,EAAE;IACxB;IACA,OAAOJ,MAAM;EACjB,CAAC;EACD;EACA;AACJ;AACA;AACA;EACI3B,OAAO,CAACS,SAAS,CAACH,cAAc,GAAG,UAAUL,KAAK,EAAEkC,CAAC,EAAE;IACnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,SAAS,GAAG,QAAQ;IACxB;IACA,OAAOnC,KAAK;IACZ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACID,OAAO,CAACiC,UAAU,GAAG,aAAa;EAClC;AACJ;AACA;AACA;EACIjC,OAAO,CAACqC,YAAY,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC9C,OAAOrC,OAAO;AAClB,CAAC,EAAG;AACJ,SAASA,OAAO"},"metadata":{},"sourceType":"module"}